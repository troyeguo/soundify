{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\1-Project\\\\soundify-web\\\\utils\\\\pageWrappers\\\\withAuthUser.js\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint react/jsx-props-no-spreading: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { get, set } from 'lodash/object';\nimport { AuthUserInfoContext, useFirebaseAuth } from '../auth/hooks';\nimport { createAuthUser, createAuthUserInfo } from '../auth/user'; // Gets the authenticated user from the Firebase JS SDK, when client-side,\n// or from the request object, when server-side. Add the AuthUserInfo to\n// context.\n\nexport default (function (ComposedComponent) {\n  var WithAuthUserComp = function WithAuthUserComp(props) {\n    var AuthUserInfo = props.AuthUserInfo,\n        otherProps = _objectWithoutProperties(props, [\"AuthUserInfo\"]); // We'll use the authed user from client-side auth (Firebase JS SDK)\n    // when available. On the server side, we'll use the authed user from\n    // the session. This allows us to server-render while also using Firebase's\n    // client-side auth functionality.\n\n\n    var _useFirebaseAuth = useFirebaseAuth(),\n        firebaseUser = _useFirebaseAuth.user;\n\n    var AuthUserFromClient = createAuthUser(firebaseUser);\n    var AuthUserFromSession = AuthUserInfo.AuthUser,\n        token = AuthUserInfo.token;\n    var AuthUser = AuthUserFromClient || AuthUserFromSession || null;\n    return __jsx(AuthUserInfoContext.Provider, {\n      value: {\n        AuthUser: AuthUser,\n        token: token\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }\n    }, __jsx(ComposedComponent, _extends({}, otherProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  WithAuthUserComp.getInitialProps = function _callee(ctx) {\n    var req, res, AuthUserInfo, _require, addSession, jsonData, composedInitialProps;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            req = ctx.req, res = ctx.res; // Get the AuthUserInfo object.\n\n            if (false) {\n              // If server-side, get AuthUserInfo from the session in the request.\n              // Don't include server middleware in the client JS bundle. See:\n              // https://arunoda.me/blog/ssr-and-server-only-modules\n              _require = require('../middleware/cookieSession'), addSession = _require.addSession;\n              addSession(req, res);\n              AuthUserInfo = createAuthUserInfo({\n                firebaseUser: get(req, 'session.decodedToken', null),\n                token: get(req, 'session.token', null)\n              });\n            } else {\n              // If client-side, get AuthUserInfo from stored data. We store it\n              // in _document.js. See:\n              // https://github.com/zeit/next.js/issues/2252#issuecomment-353992669\n              try {\n                jsonData = JSON.parse(window.document.getElementById('__MY_AUTH_USER_INFO').textContent);\n\n                if (jsonData) {\n                  AuthUserInfo = jsonData;\n                } else {\n                  // Use the default (unauthed) user info if there's no data.\n                  AuthUserInfo = createAuthUserInfo();\n                }\n              } catch (e) {\n                // If there's some error, use the default (unauthed) user info.\n                AuthUserInfo = createAuthUserInfo();\n              }\n            } // Explicitly add the user to a custom prop in the getInitialProps\n            // context for ease of use in child components.\n\n\n            set(ctx, 'myCustomData.AuthUserInfo', AuthUserInfo); // Evaluate the composed component's getInitialProps().\n\n            composedInitialProps = {};\n\n            if (!ComposedComponent.getInitialProps) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(ComposedComponent.getInitialProps(ctx));\n\n          case 7:\n            composedInitialProps = _context.sent;\n\n          case 8:\n            return _context.abrupt(\"return\", _objectSpread({}, composedInitialProps, {\n              AuthUserInfo: AuthUserInfo\n            }));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  WithAuthUserComp.displayName = \"WithAuthUser(\".concat(ComposedComponent.displayName, \")\");\n  WithAuthUserComp.propTypes = {\n    AuthUserInfo: PropTypes.shape({\n      AuthUser: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n        emailVerified: PropTypes.bool.isRequired\n      }),\n      token: PropTypes.string\n    }).isRequired\n  };\n  WithAuthUserComp.defaultProps = {};\n  return WithAuthUserComp;\n});","map":{"version":3,"sources":["D:/1-Project/soundify-web/utils/pageWrappers/withAuthUser.js"],"names":["React","PropTypes","get","set","AuthUserInfoContext","useFirebaseAuth","createAuthUser","createAuthUserInfo","ComposedComponent","WithAuthUserComp","props","AuthUserInfo","otherProps","firebaseUser","user","AuthUserFromClient","AuthUserFromSession","AuthUser","token","getInitialProps","ctx","req","res","require","addSession","jsonData","JSON","parse","window","document","getElementById","textContent","e","composedInitialProps","displayName","propTypes","shape","id","string","isRequired","email","emailVerified","bool","defaultProps"],"mappings":"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","sourcesContent":["/* eslint react/jsx-props-no-spreading: 0 */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { get, set } from 'lodash/object'\nimport { AuthUserInfoContext, useFirebaseAuth } from '../auth/hooks'\nimport { createAuthUser, createAuthUserInfo } from '../auth/user'\n\n// Gets the authenticated user from the Firebase JS SDK, when client-side,\n// or from the request object, when server-side. Add the AuthUserInfo to\n// context.\nexport default ComposedComponent => {\n  const WithAuthUserComp = props => {\n    const { AuthUserInfo, ...otherProps } = props\n\n    // We'll use the authed user from client-side auth (Firebase JS SDK)\n    // when available. On the server side, we'll use the authed user from\n    // the session. This allows us to server-render while also using Firebase's\n    // client-side auth functionality.\n    const { user: firebaseUser } = useFirebaseAuth()\n    const AuthUserFromClient = createAuthUser(firebaseUser)\n    const { AuthUser: AuthUserFromSession, token } = AuthUserInfo\n    const AuthUser = AuthUserFromClient || AuthUserFromSession || null\n\n    return (\n      <AuthUserInfoContext.Provider value={{ AuthUser, token }}>\n        <ComposedComponent {...otherProps} />\n      </AuthUserInfoContext.Provider>\n    )\n  }\n\n  WithAuthUserComp.getInitialProps = async ctx => {\n    const { req, res } = ctx\n\n    // Get the AuthUserInfo object.\n    let AuthUserInfo\n    if (typeof window === 'undefined') {\n      // If server-side, get AuthUserInfo from the session in the request.\n      // Don't include server middleware in the client JS bundle. See:\n      // https://arunoda.me/blog/ssr-and-server-only-modules\n      const { addSession } = require('../middleware/cookieSession')\n      addSession(req, res)\n      AuthUserInfo = createAuthUserInfo({\n        firebaseUser: get(req, 'session.decodedToken', null),\n        token: get(req, 'session.token', null),\n      })\n    } else {\n      // If client-side, get AuthUserInfo from stored data. We store it\n      // in _document.js. See:\n      // https://github.com/zeit/next.js/issues/2252#issuecomment-353992669\n      try {\n        const jsonData = JSON.parse(\n          window.document.getElementById('__MY_AUTH_USER_INFO').textContent\n        )\n        if (jsonData) {\n          AuthUserInfo = jsonData\n        } else {\n          // Use the default (unauthed) user info if there's no data.\n          AuthUserInfo = createAuthUserInfo()\n        }\n      } catch (e) {\n        // If there's some error, use the default (unauthed) user info.\n        AuthUserInfo = createAuthUserInfo()\n      }\n    }\n\n    // Explicitly add the user to a custom prop in the getInitialProps\n    // context for ease of use in child components.\n    set(ctx, 'myCustomData.AuthUserInfo', AuthUserInfo)\n\n    // Evaluate the composed component's getInitialProps().\n    let composedInitialProps = {}\n    if (ComposedComponent.getInitialProps) {\n      composedInitialProps = await ComposedComponent.getInitialProps(ctx)\n    }\n\n    return {\n      ...composedInitialProps,\n      AuthUserInfo,\n    }\n  }\n\n  WithAuthUserComp.displayName = `WithAuthUser(${ComposedComponent.displayName})`\n\n  WithAuthUserComp.propTypes = {\n    AuthUserInfo: PropTypes.shape({\n      AuthUser: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n        emailVerified: PropTypes.bool.isRequired,\n      }),\n      token: PropTypes.string,\n    }).isRequired,\n  }\n\n  WithAuthUserComp.defaultProps = {}\n\n  return WithAuthUserComp\n}\n"]},"metadata":{},"sourceType":"module"}