{"ast":null,"code":"var _jsxFileName = \"D:\\\\1-Project\\\\soundify-web\\\\pages\\\\_document.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint react/no-danger: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash/object';\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\n\nclass CustomDocument extends Document {\n  render() {\n    // Store initial props from request data that we need to use again on\n    // the client. See:\n    // https://github.com/zeit/next.js/issues/3043#issuecomment-334521241\n    // https://github.com/zeit/next.js/issues/2252#issuecomment-353992669\n    // Alternatively, you could use a store, like Redux.\n    const {\n      AuthUserInfo\n    } = this.props;\n    return __jsx(Html, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }, __jsx(\"script\", {\n      id: \"__MY_AUTH_USER_INFO\",\n      type: \"application/json\",\n      dangerouslySetInnerHTML: {\n        __html: JSON.stringify(AuthUserInfo, null, 2)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }\n    })), __jsx(\"body\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, __jsx(Main, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }\n    }), __jsx(NextScript, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nCustomDocument.getInitialProps = async ctx => {\n  // Get the AuthUserInfo object. This is set if the server-rendered page\n  // is wrapped in the `withAuthUser` higher-order component.\n  const AuthUserInfo = get(ctx, 'myCustomData.AuthUserInfo', null);\n  const initialProps = await Document.getInitialProps(ctx);\n  return _objectSpread({}, initialProps, {\n    AuthUserInfo\n  });\n};\n\nCustomDocument.propTypes = {\n  AuthUserInfo: PropTypes.shape({\n    AuthUser: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      emailVerified: PropTypes.bool.isRequired\n    }),\n    token: PropTypes.string\n  }).isRequired\n};\nexport default CustomDocument;","map":{"version":3,"sources":["D:/1-Project/soundify-web/pages/_document.js"],"names":["React","PropTypes","get","Document","Html","Head","Main","NextScript","CustomDocument","render","AuthUserInfo","props","__html","JSON","stringify","getInitialProps","ctx","initialProps","propTypes","shape","AuthUser","id","string","isRequired","email","emailVerified","bool","token"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,OAAOC,QAAP,IAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,UAArC,QAAuD,eAAvD;;AAEA,MAAMC,cAAN,SAA6BL,QAA7B,CAAsC;AACpCM,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA;AACA;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAmB,KAAKC,KAA9B;AACA,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,EAAE,EAAC,qBADL;AAEE,MAAA,IAAI,EAAC,kBAFP;AAGE,MAAA,uBAAuB,EAAE;AACvBC,QAAAA,MAAM,EAAEC,IAAI,CAACC,SAAL,CAAeJ,YAAf,EAA6B,IAA7B,EAAmC,CAAnC;AADe,OAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAVF,CADF;AAiBD;;AAzBmC;;AA4BtCF,cAAc,CAACO,eAAf,GAAiC,MAAMC,GAAN,IAAa;AAC5C;AACA;AACA,QAAMN,YAAY,GAAGR,GAAG,CAACc,GAAD,EAAM,2BAAN,EAAmC,IAAnC,CAAxB;AAEA,QAAMC,YAAY,GAAG,MAAMd,QAAQ,CAACY,eAAT,CAAyBC,GAAzB,CAA3B;AACA,2BAAYC,YAAZ;AAA0BP,IAAAA;AAA1B;AACD,CAPD;;AASAF,cAAc,CAACU,SAAf,GAA2B;AACzBR,EAAAA,YAAY,EAAET,SAAS,CAACkB,KAAV,CAAgB;AAC5BC,IAAAA,QAAQ,EAAEnB,SAAS,CAACkB,KAAV,CAAgB;AACxBE,MAAAA,EAAE,EAAEpB,SAAS,CAACqB,MAAV,CAAiBC,UADG;AAExBC,MAAAA,KAAK,EAAEvB,SAAS,CAACqB,MAAV,CAAiBC,UAFA;AAGxBE,MAAAA,aAAa,EAAExB,SAAS,CAACyB,IAAV,CAAeH;AAHN,KAAhB,CADkB;AAM5BI,IAAAA,KAAK,EAAE1B,SAAS,CAACqB;AANW,GAAhB,EAOXC;AARsB,CAA3B;AAWA,eAAef,cAAf","sourcesContent":["/* eslint react/no-danger: 0 */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { get } from 'lodash/object'\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n\nclass CustomDocument extends Document {\n  render() {\n    // Store initial props from request data that we need to use again on\n    // the client. See:\n    // https://github.com/zeit/next.js/issues/3043#issuecomment-334521241\n    // https://github.com/zeit/next.js/issues/2252#issuecomment-353992669\n    // Alternatively, you could use a store, like Redux.\n    const { AuthUserInfo } = this.props\n    return (\n      <Html>\n        <Head>\n          <script\n            id=\"__MY_AUTH_USER_INFO\"\n            type=\"application/json\"\n            dangerouslySetInnerHTML={{\n              __html: JSON.stringify(AuthUserInfo, null, 2),\n            }}\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nCustomDocument.getInitialProps = async ctx => {\n  // Get the AuthUserInfo object. This is set if the server-rendered page\n  // is wrapped in the `withAuthUser` higher-order component.\n  const AuthUserInfo = get(ctx, 'myCustomData.AuthUserInfo', null)\n\n  const initialProps = await Document.getInitialProps(ctx)\n  return { ...initialProps, AuthUserInfo }\n}\n\nCustomDocument.propTypes = {\n  AuthUserInfo: PropTypes.shape({\n    AuthUser: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      emailVerified: PropTypes.bool.isRequired,\n    }),\n    token: PropTypes.string,\n  }).isRequired,\n}\n\nexport default CustomDocument\n"]},"metadata":{},"sourceType":"module"}