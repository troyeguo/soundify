{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { withRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport songList from \"../mock/songs\";\nimport styles from \"../styles/player.module.css\";\nimport { connect } from \"react-redux\";\nimport AddDialog from \"./AddDialog\";\n\nvar Player = /*#__PURE__*/function (_Component) {\n  _inherits(Player, _Component);\n\n  var _super = _createSuper(Player);\n\n  function Player(props) {\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"checkForPlayer\", function () {\n      var token = _this.props.user.access_token;\n\n      if (window.Spotify) {\n        clearInterval(_this.playerCheckInterval);\n        _this.player = new window.Spotify.Player({\n          name: \"Idanlo's Spotify App\",\n          getOAuthToken: function getOAuthToken(cb) {\n            cb(token);\n          }\n        });\n      }\n\n      if (_this.player) {\n        _this.createEventHandlers();\n\n        _this.player.connect();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createEventHandlers\", function () {\n      _this.player.on(\"initialization_error\", function (e) {\n        console.error(\"Initialization error \", e);\n\n        _this.setState({\n          player_init_error: true\n        });\n      });\n\n      _this.player.on(\"authentication_error\", function (e) {\n        return console.error(\"Authentication error \", e);\n      });\n\n      _this.player.on(\"account_error\", function (e) {\n        return console.error(\"Account error \", e);\n      });\n\n      _this.player.on(\"playback_error\", function (e) {\n        return console.error(\"Playback error \", e);\n      });\n\n      _this.player.on(\"player_state_changed\", function (state) {\n        if (state) {\n          console.log(\"player state changed\", state);\n          var duration = state.duration,\n              position = state.position; // duration = 100%\n          // position = ?%\n\n          var val = position * 100 / duration;\n\n          _this.setState({\n            playingInfo: state,\n            playing: !state.paused,\n            positionSliderValue: val\n          }); // Music started playing, start the position interval\n\n\n          if (!_this.props.isPlaying && !state.paused) {\n            _this.positionCheckInterval = setInterval(function () {\n              _this.checkChangePosition();\n            }, 1000);\n          } // Music stopped playing, clear the position interval\n\n\n          if (_this.props.isPlaying && state.paused) {\n            clearInterval(_this.positionCheckInterval);\n          }\n\n          if (_this.props.isPlaying === state.paused) {\n            _this.props.setIsPlaying(!state.paused);\n          }\n\n          if (!_this.props.currentlyPlaying || _this.props.currentlyPlaying !== state.track_window.current_track.name) {\n            var current_track = state.track_window.current_track;\n\n            _this.props.setCurrentlyPlaying(current_track.name);\n          }\n        }\n      });\n\n      _this.player.on(\"ready\", function (data) {\n        var device_id = data.device_id;\n        console.log(\"PLAYER CONNECTED \", device_id); // await this.setState({ deviceId: device_id });\n\n        _this.setState({\n          deviceId: device_id\n        }, function () {\n          _this.transferPlaybackHere();\n        });\n\n        _this.player.getVolume().then(function (vol) {\n          var volume = vol * 100;\n\n          _this.setState({\n            volumeSliderValue: volume\n          });\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"transferPlaybackHere\", function () {\n      // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\n      // for normal users they have to go in the spotify app/website and change the device manually\n      // user type is stored in redux state => this.props.user.type\n      var deviceId = _this.state.deviceId;\n      fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          Authorization: \"Bearer \".concat(_this.props.user.access_token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          device_ids: [deviceId],\n          play: false\n        })\n      }).then(function (res) {\n        console.log(\"status\", res.status);\n\n        if (res.status === 204) {\n          axios.get(\"https://api.spotify.com/v1/me/player\", {\n            headers: {\n              Authorization: \"Bearer \".concat(_this.props.user.access_token)\n            }\n          }).then(function () {\n            // Transferred playback successfully, get current timestamp\n            _this.checkChangePosition();\n          })[\"catch\"](function (err) {\n            console.log(err);\n          });\n        }\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      }); // console.log('Hello', this.props);\n      // if (this.props.user.product === 'premium') {\n      // } else {\n      //   console.log(\n      //     'Cannot transfer playback automatically because you are not a premium user.'\n      //   );\n      // }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPrevClick\", function () {\n      _this.player.previousTrack();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlayClick\", function () {\n      _this.player.togglePlay();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onNextClick\", function () {\n      _this.player.nextTrack();\n    });\n\n    _this.state = {\n      deviceId: null,\n      playingInfo: null,\n      playing: false,\n      player_init_error: false\n    };\n    _this.player = null;\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"render\",\n    value: function render() {\n      console.log(this.props.recently_played, \"recent\");\n\n      if (!this.props.recently_played) {\n        return null;\n      }\n\n      var recentTrack = this.props.recently_played[0];\n      return __jsx(\"div\", {\n        className: styles.player\n      }, __jsx(\"div\", {\n        className: styles.playerHeader\n      }, __jsx(\"div\", null, __jsx(\"img\", {\n        className: styles.avatar,\n        src: \"/images/avatar.jpeg\",\n        alt: \"\"\n      }), __jsx(\"span\", {\n        className: styles.nickname\n      }, \"Troye Guo\"), __jsx(\"span\", {\n        className: styles.triangle\n      }))), __jsx(\"div\", {\n        className: styles.playerCoverContainer\n      }, __jsx(\"img\", {\n        className: styles.playerCover,\n        src: recentTrack.track.album.images[1].url,\n        alt: \"\"\n      })), __jsx(\"div\", {\n        className: styles.musicInfo\n      }, __jsx(\"div\", {\n        className: styles.songName\n      }, recentTrack.track.name), __jsx(\"div\", {\n        className: styles.artistName\n      }, recentTrack.track.artists[0].name)), __jsx(\"div\", {\n        className: styles.playerPanel\n      }, __jsx(\"img\", {\n        src: \"/icons/favorite.svg\",\n        alt: \"\"\n      }), __jsx(\"img\", {\n        src: \"/icons/prev.svg\",\n        alt: \"\",\n        onClick: this.onPrevClick\n      }), __jsx(\"img\", {\n        src: \"/icons/play.svg\",\n        alt: \"\",\n        style: {\n          width: \"45px\"\n        },\n        onClick: this.onPlayClick\n      }), __jsx(\"img\", {\n        src: \"/icons/next.svg\",\n        alt: \"\",\n        onClick: this.onNextClick\n      }), __jsx(\"img\", {\n        src: \"/icons/shuffle.svg\",\n        alt: \"\",\n        style: {\n          width: \"25px\"\n        }\n      })), __jsx(\"div\", {\n        className: styles.playerNext\n      }, __jsx(\"div\", {\n        className: styles.nextText\n      }, \"Next\"), __jsx(\"div\", {\n        className: styles.nextListContainer\n      }, __jsx(\"ul\", {\n        className: styles.nextList\n      }, songList().map(function (item) {\n        return __jsx(\"li\", {\n          key: item.id,\n          className: styles.nextListItem\n        }, __jsx(\"div\", {\n          className: styles.nextSong\n        }, item.song), __jsx(\"p\", {\n          className: styles.nextArtistName,\n          style: {\n            fontSize: \"14px\",\n            lineHeight: \"20px\",\n            color: \"rgba(61, 63, 134, 0.61)\"\n          }\n        }, item.artist), __jsx(\"img\", {\n          src: \"/icons/play.svg\",\n          alt: \"\",\n          className: styles.nextButton\n        }));\n      })))));\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    recently_played: state.recently_played,\n    user: state.current_user,\n    playNow: state.play_now,\n    currentlyPlaying: state.currently_playing,\n    isPlaying: state.isPlaying\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setUser: function setUser(user) {\n      return dispatch({\n        type: actionTypes.SET_USER,\n        user: user\n      });\n    },\n    fetchRecentlyPlayed: function fetchRecentlyPlayed(options) {\n      return dispatch(actionTypes.fetchRecentlyPlayed(options));\n    },\n    resetPlayNow: function resetPlayNow() {\n      return dispatch({\n        type: actionTypes.RESET_PLAY_NOW\n      });\n    },\n    setCurrentlyPlaying: function setCurrentlyPlaying(song) {\n      return dispatch({\n        type: actionTypes.SET_CURRENTLY_PLAYING,\n        song: song\n      });\n    },\n    setIsPlaying: function setIsPlaying(isPlaying) {\n      return dispatch({\n        type: actionTypes.SET_IS_PLAYING,\n        isPlaying: isPlaying\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));","map":{"version":3,"sources":["D:/1-Project/soundify-web/components/Player.js"],"names":["React","Component","withRouter","useState","songList","styles","connect","AddDialog","Player","props","token","user","access_token","window","Spotify","clearInterval","playerCheckInterval","player","name","getOAuthToken","cb","createEventHandlers","on","e","console","error","setState","player_init_error","state","log","duration","position","val","playingInfo","playing","paused","positionSliderValue","isPlaying","positionCheckInterval","setInterval","checkChangePosition","setIsPlaying","currentlyPlaying","track_window","current_track","setCurrentlyPlaying","data","device_id","deviceId","transferPlaybackHere","getVolume","then","vol","volume","volumeSliderValue","fetch","method","headers","Authorization","body","JSON","stringify","device_ids","play","res","status","axios","get","err","previousTrack","togglePlay","nextTrack","recently_played","recentTrack","playerHeader","avatar","nickname","triangle","playerCoverContainer","playerCover","track","album","images","url","musicInfo","songName","artistName","artists","playerPanel","onPrevClick","width","onPlayClick","onNextClick","playerNext","nextText","nextListContainer","nextList","map","item","id","nextListItem","nextSong","song","nextArtistName","fontSize","lineHeight","color","artist","nextButton","mapStateToProps","current_user","playNow","play_now","currently_playing","mapDispatchToProps","dispatch","setUser","type","actionTypes","SET_USER","fetchRecentlyPlayed","options","resetPlayNow","RESET_PLAY_NOW","SET_CURRENTLY_PLAYING","SET_IS_PLAYING"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"next/router\";\r\nimport { useState } from \"react\";\r\nimport songList from \"../mock/songs\";\r\nimport styles from \"../styles/player.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport AddDialog from \"./AddDialog\";\r\nclass Player extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      deviceId: null,\r\n      playingInfo: null,\r\n      playing: false,\r\n      player_init_error: false,\r\n    };\r\n\r\n    this.player = null;\r\n  }\r\n  checkForPlayer = () => {\r\n    const token = this.props.user.access_token;\r\n\r\n    if (window.Spotify) {\r\n      clearInterval(this.playerCheckInterval);\r\n      this.player = new window.Spotify.Player({\r\n        name: \"Idanlo's Spotify App\",\r\n        getOAuthToken: (cb) => {\r\n          cb(token);\r\n        },\r\n      });\r\n    }\r\n\r\n    if (this.player) {\r\n      this.createEventHandlers();\r\n\r\n      this.player.connect();\r\n    }\r\n  };\r\n  createEventHandlers = () => {\r\n    this.player.on(\"initialization_error\", (e) => {\r\n      console.error(\"Initialization error \", e);\r\n      this.setState({ player_init_error: true });\r\n    });\r\n    this.player.on(\"authentication_error\", (e) =>\r\n      console.error(\"Authentication error \", e)\r\n    );\r\n    this.player.on(\"account_error\", (e) => console.error(\"Account error \", e));\r\n    this.player.on(\"playback_error\", (e) =>\r\n      console.error(\"Playback error \", e)\r\n    );\r\n\r\n    this.player.on(\"player_state_changed\", (state) => {\r\n      if (state) {\r\n        console.log(\"player state changed\", state);\r\n        let { duration, position } = state;\r\n        // duration = 100%\r\n        // position = ?%\r\n        let val = (position * 100) / duration;\r\n        this.setState({\r\n          playingInfo: state,\r\n          playing: !state.paused,\r\n          positionSliderValue: val,\r\n        });\r\n\r\n        // Music started playing, start the position interval\r\n        if (!this.props.isPlaying && !state.paused) {\r\n          this.positionCheckInterval = setInterval(() => {\r\n            this.checkChangePosition();\r\n          }, 1000);\r\n        }\r\n\r\n        // Music stopped playing, clear the position interval\r\n        if (this.props.isPlaying && state.paused) {\r\n          clearInterval(this.positionCheckInterval);\r\n        }\r\n\r\n        if (this.props.isPlaying === state.paused) {\r\n          this.props.setIsPlaying(!state.paused);\r\n        }\r\n\r\n        if (\r\n          !this.props.currentlyPlaying ||\r\n          this.props.currentlyPlaying !== state.track_window.current_track.name\r\n        ) {\r\n          let { current_track } = state.track_window;\r\n          this.props.setCurrentlyPlaying(current_track.name);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.player.on(\"ready\", (data) => {\r\n      let { device_id } = data;\r\n      console.log(\"PLAYER CONNECTED \", device_id);\r\n      // await this.setState({ deviceId: device_id });\r\n      this.setState({ deviceId: device_id }, () => {\r\n        this.transferPlaybackHere();\r\n      });\r\n      this.player.getVolume().then((vol) => {\r\n        let volume = vol * 100;\r\n        this.setState({ volumeSliderValue: volume });\r\n      });\r\n    });\r\n  };\r\n  transferPlaybackHere = () => {\r\n    // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\r\n    // for normal users they have to go in the spotify app/website and change the device manually\r\n    // user type is stored in redux state => this.props.user.type\r\n    const { deviceId } = this.state;\r\n    fetch(\"https://api.spotify.com/v1/me/player\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Authorization: `Bearer ${this.props.user.access_token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        device_ids: [deviceId],\r\n        play: false,\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        console.log(\"status\", res.status);\r\n        if (res.status === 204) {\r\n          axios\r\n            .get(\"https://api.spotify.com/v1/me/player\", {\r\n              headers: {\r\n                Authorization: `Bearer ${this.props.user.access_token}`,\r\n              },\r\n            })\r\n            .then(() => {\r\n              // Transferred playback successfully, get current timestamp\r\n              this.checkChangePosition();\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n\r\n    // console.log('Hello', this.props);\r\n    // if (this.props.user.product === 'premium') {\r\n    // } else {\r\n    //   console.log(\r\n    //     'Cannot transfer playback automatically because you are not a premium user.'\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  onPrevClick = () => {\r\n    this.player.previousTrack();\r\n  };\r\n\r\n  onPlayClick = () => {\r\n    this.player.togglePlay();\r\n  };\r\n\r\n  onNextClick = () => {\r\n    this.player.nextTrack();\r\n  };\r\n  render() {\r\n    console.log(this.props.recently_played, \"recent\");\r\n    if (!this.props.recently_played) {\r\n      return null;\r\n    }\r\n    let recentTrack = this.props.recently_played[0];\r\n    return (\r\n      <div className={styles.player}>\r\n        <div className={styles.playerHeader}>\r\n          <div>\r\n            <img className={styles.avatar} src=\"/images/avatar.jpeg\" alt=\"\" />\r\n            <span className={styles.nickname}>Troye Guo</span>\r\n            <span className={styles.triangle}></span>\r\n          </div>\r\n        </div>\r\n        <div className={styles.playerCoverContainer}>\r\n          <img\r\n            className={styles.playerCover}\r\n            src={recentTrack.track.album.images[1].url}\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className={styles.musicInfo}>\r\n          <div className={styles.songName}>{recentTrack.track.name}</div>\r\n          <div className={styles.artistName}>\r\n            {recentTrack.track.artists[0].name}\r\n          </div>\r\n        </div>\r\n        <div className={styles.playerPanel}>\r\n          <img src=\"/icons/favorite.svg\" alt=\"\" />\r\n          <img src=\"/icons/prev.svg\" alt=\"\" onClick={this.onPrevClick} />\r\n          <img\r\n            src=\"/icons/play.svg\"\r\n            alt=\"\"\r\n            style={{ width: \"45px\" }}\r\n            onClick={this.onPlayClick}\r\n          />\r\n          <img src=\"/icons/next.svg\" alt=\"\" onClick={this.onNextClick} />\r\n          <img src=\"/icons/shuffle.svg\" alt=\"\" style={{ width: \"25px\" }} />\r\n        </div>\r\n\r\n        <div className={styles.playerNext}>\r\n          <div className={styles.nextText}>Next</div>\r\n          <div className={styles.nextListContainer}>\r\n            <ul className={styles.nextList}>\r\n              {songList().map((item) => {\r\n                return (\r\n                  <li key={item.id} className={styles.nextListItem}>\r\n                    <div className={styles.nextSong}>{item.song}</div>\r\n                    <p\r\n                      className={styles.nextArtistName}\r\n                      style={{\r\n                        fontSize: \"14px\",\r\n                        lineHeight: \"20px\",\r\n                        color: \"rgba(61, 63, 134, 0.61)\",\r\n                      }}\r\n                    >\r\n                      {item.artist}\r\n                    </p>\r\n                    <img\r\n                      src=\"/icons/play.svg\"\r\n                      alt=\"\"\r\n                      className={styles.nextButton}\r\n                    />\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    recently_played: state.recently_played,\r\n    user: state.current_user,\r\n    playNow: state.play_now,\r\n    currentlyPlaying: state.currently_playing,\r\n    isPlaying: state.isPlaying,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => dispatch({ type: actionTypes.SET_USER, user }),\r\n    fetchRecentlyPlayed: (options) =>\r\n      dispatch(actionTypes.fetchRecentlyPlayed(options)),\r\n    resetPlayNow: () => dispatch({ type: actionTypes.RESET_PLAY_NOW }),\r\n    setCurrentlyPlaying: (song) =>\r\n      dispatch({ type: actionTypes.SET_CURRENTLY_PLAYING, song }),\r\n    setIsPlaying: (isPlaying) =>\r\n      dispatch({ type: actionTypes.SET_IS_PLAYING, isPlaying }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));\r\n"]},"metadata":{},"sourceType":"module"}