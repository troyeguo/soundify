{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useEffect } from \"react\";\nimport LRU from \"lru-cache\";\nconst isServer = true;\nconst DEFAULT_CACHE_KEY = \"cache\";\nexport default function clientCache({\n  lruConfig = {},\n  genCacheKeyStrate\n} = {}) {\n  // 默认10分钟缓存\n  const _ref = lruConfig || {},\n        {\n    maxAge = 1000 * 60 * 10\n  } = _ref,\n        restConfig = _objectWithoutProperties(_ref, [\"maxAge\"]);\n\n  const lruCache = new LRU(_objectSpread({\n    maxAge\n  }, restConfig));\n\n  function getCacheKey(context) {\n    return genCacheKeyStrate ? genCacheKeyStrate(context) : DEFAULT_CACHE_KEY;\n  }\n\n  function cache(fn) {\n    // 服务端不能保留缓存 会在多个用户之间共享\n    if (isServer) {\n      return fn;\n    }\n\n    return async (...args) => {\n      const key = getCacheKey(...args);\n      const cached = lruCache.get(key);\n\n      if (cached) {\n        return cached;\n      }\n\n      const result = await fn(...args);\n      lruCache.set(key, result);\n      return result;\n    };\n  }\n\n  function setCache(key, cachedData) {\n    lruCache.set(key, cachedData);\n  } // 允许客户端外部手动设置缓存数据\n\n\n  function useCache(key, cachedData) {\n    useEffect(() => {\n      if (!isServer) {\n        setCache(key, cachedData);\n      }\n    }, []);\n  }\n\n  return {\n    cache,\n    useCache,\n    setCache\n  };\n}","map":null,"metadata":{},"sourceType":"module"}