{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Router, { withRouter } from \"next/router\";\nimport * as actionTypes from \"../redux/action\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport Login from \"../components/Login\";\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"logInUserAndGetInfo\", newUser => {\n      console.log(\"LOG IN\", newUser); // console.log(this.props);\n\n      localStorage.setItem(\"newUser\", JSON.stringify(newUser));\n      this.props.setUser(newUser); // set user in redux state\n\n      console.log(\"test\");\n      Router.push(\"/Home\");\n    });\n\n    this.state = {\n      token: null\n    };\n    this.token = null;\n  }\n\n  componentDidMount() {\n    this.setState({\n      token: localStorage.getItem(\"react-spotify-access-token\")\n    }, () => {\n      // console.log(this.state.token, \"token\");\n      if (this.state.token !== undefined && this.state.token !== \"undefined\" && this.state.token) {\n        Router.push(\"/Home\");\n      }\n    }); // console.log(this.props, \"cdm\");\n\n    let params = this.getHashParams(); // If access token doesn't exist in has params, try to take it from local storage\n\n    if (params.access_token === \"undefined\") {\n      const currentAccessToken = localStorage.getItem(\"react-spotify-access-token\");\n\n      if (currentAccessToken) {\n        params.access_token = currentAccessToken;\n      }\n    } // console.log(\"Params after\", params);\n\n\n    if (params.access_token && params.access_token !== undefined && params.access_token !== \"undefined\") {\n      localStorage.setItem(\"react-spotify-access-token\", params.access_token);\n      axios.get(\"https://api.spotify.com/v1/me\", {\n        headers: {\n          Authorization: `Bearer ${params.access_token}`\n        }\n      }).then(({\n        data\n      }) => {\n        console.log(data, \"data\");\n\n        if (params.refresh_token) {\n          localStorage.setItem(\"react-spotify-refresh-token\", params.refresh_token);\n        }\n\n        let newUser = {\n          access_token: params.access_token,\n          displayName: data.display_name,\n          email: data.email,\n          type: data.type,\n          country: data.country,\n          product: data.product,\n          avatar: data.images[0].url\n        };\n        console.log(newUser, \"newUser\");\n        this.logInUserAndGetInfo(newUser);\n      }).catch(err => {\n        console.log(err, \"fgjxfjxf\"); // 401 = Unauthorized - the access token is incorrect (expired)\n\n        if (err || err.response.status === 401) {\n          // Check if refresh token exists\n          const refreshToken = localStorage.getItem(\"react-spotify-refresh-token\");\n\n          if (refreshToken) {\n            // Send refresh token to server to acquire a new access token\n            axios.post(\"http://localhost:3000/refresh\", {\n              data: JSON.stringify({\n                refresh_token: refreshToken\n              })\n            }).then(res => {\n              console.log(\"Refresh token response -\", res.data);\n              axios.get(\"https://api.spotify.com/v1/me\", {\n                headers: {\n                  Authorization: `Bearer ${res.data.access_token}`\n                }\n              }).then(({\n                data\n              }) => {\n                localStorage.setItem(\"react-spotify-access-token\", res.data.access_token);\n                let newUser = {\n                  access_token: params.access_token,\n                  displayName: data.display_name,\n                  email: data.email,\n                  type: data.type,\n                  country: data.country,\n                  product: data.product,\n                  avatar: data.images[0].url\n                };\n                this.logInUserAndGetInfo(newUser);\n              });\n            }).catch(e => {\n              console.log(\"Refresh token error -\", e);\n            }).finally(() => {\n              this.setState({\n                loading: false\n              });\n            });\n          } else {\n            // Refresh token doesn't exist, the user is shown a 'login with Spotify button'\n            this.setState({\n              loading: false\n            });\n          }\n        }\n      });\n    } else {\n      // The user is shown a 'login with Spotify button'\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    console.log(hashParams, \"hashParams\");\n    return hashParams;\n  }\n\n  render() {\n    // console.log(this.props, \"user\");\n    return __jsx(Login, null);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.current_user,\n    backgroundImage: state.backgroundImage\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUser: user => dispatch({\n      type: actionTypes.SET_USER,\n      user\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Index));","map":null,"metadata":{},"sourceType":"module"}