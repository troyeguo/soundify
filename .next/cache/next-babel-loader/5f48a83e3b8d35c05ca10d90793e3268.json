{"ast":null,"code":"import axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport \"./redux/reducer\";\nvar dispatch = useDispatch(); // dotenv.config();\n// console.log(process.env.NODE_ENV, \"REACT_APP_BASE_URL\");\n\nvar $axios = axios.create({\n  timeout: 6000,\n  retry: 4,\n  retryDelay: 1000\n}); //请求拦截\n\n$axios.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  // 通过reudx的store拿到拿到全局状态树的token ，添加到请求报文，后台会根据该报文返回status\n  // 此处应根据具体业务写token\n  // const token = store.getState().user.token || localStorage.getItem('token');\n  var token = localStorage.getItem(\"react-spotify-access-token\");\n  config.headers = {\n    Authorization: \"Bearer \".concat(token)\n  };\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  message.error(error);\n  return Promise.reject(error);\n}); // 添加响应拦截器\n\n$axios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  var _this = this;\n\n  if (error.response) {\n    console.log(error.response, \"error\");\n    var originalRequest = error.config;\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      console.log(\"Error happened\");\n      console.log(error); // return window.location.reload();\n\n      return axios.post(\"http://localhost:3000/refresh\", {\n        data: JSON.stringify({\n          refresh_token: localStorage.getItem(\"react-spotify-refresh-token\")\n        })\n      }).then(function (res) {\n        // console.log(this, \"props\");\n        if (res.status === 200) {\n          // 1) put token to LocalStorage\n          localStorage.setItem(\"react-spotify-access-token\", res.data.access_token); // console.log(\"New token\", res.data);\n          // console.log(originalRequest);\n\n          _this.props.setUser({\n            access_token: res.data.access_token\n          }); // // 2) Change Authorization header\n          // axios.defaults.headers.common['Authorization'] =\n          //   'Bearer ' + localStorageService.getAccessToken();\n          // 3) return originalRequest object with Axios.\n\n\n          return axios(originalRequest);\n        }\n      })[\"catch\"](function (error) {\n        console.log(error, \"error\");\n      });\n    }\n  }\n\n  return Promise.reject(error);\n});\nexport default $axios;","map":{"version":3,"sources":["D:/1-Project/soundify-web/$axios.js"],"names":["axios","useDispatch","dispatch","$axios","create","timeout","retry","retryDelay","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","message","Promise","reject","response","console","log","originalRequest","status","_retry","post","data","JSON","stringify","refresh_token","then","res","setItem","access_token","props","setUser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAe,iBAAf;AACA,IAAMC,QAAQ,GAAGD,WAAW,EAA5B,C,CACA;AACA;;AACA,IAAME,MAAM,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE,IADiB;AAE1BC,EAAAA,KAAK,EAAE,CAFmB;AAG1BC,EAAAA,UAAU,EAAE;AAHc,CAAb,CAAf,C,CAMA;;AACAJ,MAAM,CAACK,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,CACE,UAAUC,MAAV,EAAkB;AAChB;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,4BAArB,CAAd;AACAH,EAAAA,MAAM,CAACI,OAAP,GAAiB;AAAEC,IAAAA,aAAa,mBAAYJ,KAAZ;AAAf,GAAjB;AAEA,SAAOD,MAAP;AACD,CAVH,EAWE,UAAUM,KAAV,EAAiB;AACf;AACAC,EAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,SAAOE,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,CAfH,E,CAkBA;;AACAd,MAAM,CAACK,YAAP,CAAoBa,QAApB,CAA6BX,GAA7B,CACE,UAAUW,QAAV,EAAoB;AAClB,SAAOA,QAAP;AACD,CAHH,EAIE,UAAUJ,KAAV,EAAiB;AAAA;;AACf,MAAIA,KAAK,CAACI,QAAV,EAAoB;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACI,QAAlB,EAA4B,OAA5B;AACA,QAAMG,eAAe,GAAGP,KAAK,CAACN,MAA9B;;AACA,QAAIM,KAAK,CAACI,QAAN,CAAeI,MAAf,KAA0B,GAA1B,IAAiC,CAACD,eAAe,CAACE,MAAtD,EAA8D;AAC5DF,MAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAH4D,CAI5D;;AACA,aAAOjB,KAAK,CACT2B,IADI,CACC,+BADD,EACkC;AACrCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,aAAa,EAAElB,YAAY,CAACC,OAAb,CACb,6BADa;AADI,SAAf;AAD+B,OADlC,EAQJkB,IARI,CAQC,UAACC,GAAD,EAAS;AACb;AACA,YAAIA,GAAG,CAACR,MAAJ,KAAe,GAAnB,EAAwB;AACtB;AACAZ,UAAAA,YAAY,CAACqB,OAAb,CACE,4BADF,EAEED,GAAG,CAACL,IAAJ,CAASO,YAFX,EAFsB,CAMtB;AACA;;AACA,UAAA,KAAI,CAACC,KAAL,CAAWC,OAAX,CAAmB;AACjBF,YAAAA,YAAY,EAAEF,GAAG,CAACL,IAAJ,CAASO;AADN,WAAnB,EARsB,CAYtB;AACA;AACA;AAEA;;;AACA,iBAAOnC,KAAK,CAACwB,eAAD,CAAZ;AACD;AACF,OA7BI,WA8BE,UAACP,KAAD,EAAW;AAChBK,QAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAAmB,OAAnB;AACD,OAhCI,CAAP;AAiCD;AACF;;AACD,SAAOE,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,CAjDH;AAoDA,eAAed,MAAf","sourcesContent":["import axios from \"axios\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {} from \"./redux/reducer\";\r\nconst dispatch = useDispatch();\r\n// dotenv.config();\r\n// console.log(process.env.NODE_ENV, \"REACT_APP_BASE_URL\");\r\nconst $axios = axios.create({\r\n  timeout: 6000,\r\n  retry: 4,\r\n  retryDelay: 1000,\r\n});\r\n\r\n//请求拦截\r\n$axios.interceptors.request.use(\r\n  function (config) {\r\n    // 在发送请求之前做些什么\r\n    // 通过reudx的store拿到拿到全局状态树的token ，添加到请求报文，后台会根据该报文返回status\r\n    // 此处应根据具体业务写token\r\n    // const token = store.getState().user.token || localStorage.getItem('token');\r\n    const token = localStorage.getItem(\"react-spotify-access-token\");\r\n    config.headers = { Authorization: `Bearer ${token}` };\r\n\r\n    return config;\r\n  },\r\n  function (error) {\r\n    // 对请求错误做些什么\r\n    message.error(error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 添加响应拦截器\r\n$axios.interceptors.response.use(\r\n  function (response) {\r\n    return response;\r\n  },\r\n  function (error) {\r\n    if (error.response) {\r\n      console.log(error.response, \"error\");\r\n      const originalRequest = error.config;\r\n      if (error.response.status === 401 && !originalRequest._retry) {\r\n        originalRequest._retry = true;\r\n        console.log(\"Error happened\");\r\n        console.log(error);\r\n        // return window.location.reload();\r\n        return axios\r\n          .post(\"http://localhost:3000/refresh\", {\r\n            data: JSON.stringify({\r\n              refresh_token: localStorage.getItem(\r\n                \"react-spotify-refresh-token\"\r\n              ),\r\n            }),\r\n          })\r\n          .then((res) => {\r\n            // console.log(this, \"props\");\r\n            if (res.status === 200) {\r\n              // 1) put token to LocalStorage\r\n              localStorage.setItem(\r\n                \"react-spotify-access-token\",\r\n                res.data.access_token\r\n              );\r\n              // console.log(\"New token\", res.data);\r\n              // console.log(originalRequest);\r\n              this.props.setUser({\r\n                access_token: res.data.access_token,\r\n              });\r\n\r\n              // // 2) Change Authorization header\r\n              // axios.defaults.headers.common['Authorization'] =\r\n              //   'Bearer ' + localStorageService.getAccessToken();\r\n\r\n              // 3) return originalRequest object with Axios.\r\n              return axios(originalRequest);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error, \"error\");\r\n          });\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default $axios;\r\n"]},"metadata":{},"sourceType":"module"}