{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require(\"axios\");\n\nvar GITHUB_BASE_URL = \"https://api.github.com\";\nvar isServer = false; // 服务端环境需要手动拼接url\n\nfunction requestGithub(method, url, data, headers) {\n  var result;\n  return _regeneratorRuntime.async(function requestGithub$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (url) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new Error(\"url must be provided\");\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(axios({\n            method: method,\n            url: \"\".concat(GITHUB_BASE_URL).concat(url),\n            data: data,\n            headers: headers\n          }));\n\n        case 4:\n          result = _context.sent;\n          return _context.abrupt(\"return\", result);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction request(_ref, req, res) {\n  var _ref$method, method, url, _ref$data, data, session, _ref2, githubAuth, _ref3, access_token, token_type, headers, serverResult, clientResult;\n\n  return _regeneratorRuntime.async(function request$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref$method = _ref.method, method = _ref$method === void 0 ? \"GET\" : _ref$method, url = _ref.url, _ref$data = _ref.data, data = _ref$data === void 0 ? {} : _ref$data;\n\n          if (!isServer) {\n            _context2.next = 11;\n            break;\n          }\n\n          session = req.session;\n          _ref2 = session || {}, githubAuth = _ref2.githubAuth;\n          _ref3 = githubAuth || {}, access_token = _ref3.access_token, token_type = _ref3.token_type;\n          headers = {};\n\n          if (access_token) {\n            headers.Authorization = \"\".concat(token_type, \" \").concat(access_token);\n          } // 服务端走requestGithub方法，\n          // 补全api的前缀\n\n\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(requestGithub(method, url, data, headers));\n\n        case 9:\n          serverResult = _context2.sent;\n          return _context2.abrupt(\"return\", serverResult);\n\n        case 11:\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(axios({\n            method: method,\n            url: \"/github\".concat(url),\n            data: data\n          }));\n\n        case 13:\n          clientResult = _context2.sent;\n          return _context2.abrupt(\"return\", clientResult);\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nmodule.exports = {\n  request: request,\n  requestGithub: requestGithub\n};","map":{"version":3,"sources":["D:/1-Project/soundify-web/lib/api.js"],"names":["axios","require","GITHUB_BASE_URL","isServer","requestGithub","method","url","data","headers","Error","result","request","req","res","session","githubAuth","access_token","token_type","Authorization","serverResult","clientResult","module","exports"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,eAAe,GAAG,wBAAxB;AAEA,IAAMC,QAAQ,QAAd,C,CAEA;;AACA,SAAeC,aAAf,CAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,EAAgDC,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACOF,GADP;AAAA;AAAA;AAAA;;AAAA,gBAEU,IAAIG,KAAJ,CAAU,sBAAV,CAFV;;AAAA;AAAA;AAAA,2CAIuBT,KAAK,CAAC;AACzBK,YAAAA,MAAM,EAANA,MADyB;AAEzBC,YAAAA,GAAG,YAAKJ,eAAL,SAAuBI,GAAvB,CAFsB;AAGzBC,YAAAA,IAAI,EAAJA,IAHyB;AAIzBC,YAAAA,OAAO,EAAPA;AAJyB,WAAD,CAJ5B;;AAAA;AAIQE,UAAAA,MAJR;AAAA,2CAWSA,MAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAeC,OAAf,OAA2DC,GAA3D,EAAgEC,GAAhE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAyBR,MAAzB,EAAyBA,MAAzB,4BAAkC,KAAlC,gBAAyCC,GAAzC,QAAyCA,GAAzC,mBAA8CC,IAA9C,EAA8CA,IAA9C,0BAAqD,EAArD;;AAAA,eACMJ,QADN;AAAA;AAAA;AAAA;;AAEYW,UAAAA,OAFZ,GAEwBF,GAFxB,CAEYE,OAFZ;AAAA,kBAG2BA,OAAO,IAAI,EAHtC,EAGYC,UAHZ,SAGYA,UAHZ;AAAA,kBAIyCA,UAAU,IAAI,EAJvD,EAIYC,YAJZ,SAIYA,YAJZ,EAI0BC,UAJ1B,SAI0BA,UAJ1B;AAKUT,UAAAA,OALV,GAKoB,EALpB;;AAMI,cAAIQ,YAAJ,EAAkB;AAChBR,YAAAA,OAAO,CAACU,aAAR,aAA2BD,UAA3B,cAAyCD,YAAzC;AACD,WARL,CASI;AACA;;;AAVJ;AAAA,2CAW+BZ,aAAa,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,EAAoBC,OAApB,CAX5C;;AAAA;AAWUW,UAAAA,YAXV;AAAA,4CAYWA,YAZX;;AAAA;AAAA;AAAA,2CAgB6BnB,KAAK,CAAC;AAC/BK,YAAAA,MAAM,EAANA,MAD+B;AAE/BC,YAAAA,GAAG,mBAAYA,GAAZ,CAF4B;AAG/BC,YAAAA,IAAI,EAAJA;AAH+B,WAAD,CAhBlC;;AAAA;AAgBQa,UAAAA,YAhBR;AAAA,4CAqBSA,YArBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBAC,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,OAAO,EAAPA,OADe;AAEfP,EAAAA,aAAa,EAAbA;AAFe,CAAjB","sourcesContent":["const axios = require(\"axios\");\r\n\r\nconst GITHUB_BASE_URL = \"https://api.github.com\";\r\n\r\nconst isServer = typeof window === \"undefined\";\r\n\r\n// 服务端环境需要手动拼接url\r\nasync function requestGithub(method, url, data, headers) {\r\n  if (!url) {\r\n    throw new Error(\"url must be provided\");\r\n  }\r\n  const result = await axios({\r\n    method,\r\n    url: `${GITHUB_BASE_URL}${url}`,\r\n    data,\r\n    headers,\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nasync function request({ method = \"GET\", url, data = {} }, req, res) {\r\n  if (isServer) {\r\n    const { session } = req;\r\n    const { githubAuth } = session || {};\r\n    const { access_token, token_type } = githubAuth || {};\r\n    const headers = {};\r\n    if (access_token) {\r\n      headers.Authorization = `${token_type} ${access_token}`;\r\n    }\r\n    // 服务端走requestGithub方法，\r\n    // 补全api的前缀\r\n    const serverResult = await requestGithub(method, url, data, headers);\r\n    return serverResult;\r\n  }\r\n\r\n  // 客户端需要拼接github前缀 让koa的server可以识别并代理\r\n  const clientResult = await axios({\r\n    method,\r\n    url: `/github${url}`,\r\n    data,\r\n  });\r\n  return clientResult;\r\n}\r\n\r\nmodule.exports = {\r\n  request,\r\n  requestGithub,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}