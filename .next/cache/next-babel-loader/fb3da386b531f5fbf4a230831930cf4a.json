{"ast":null,"code":"import commonMiddleware from '../../utils/middleware/commonMiddleware';\nimport { verifyIdToken } from '../../utils/auth/firebaseAdmin';\n\nconst handler = (req, res) => {\n  if (!req.body) {\n    return res.status(400);\n  }\n\n  const {\n    token\n  } = req.body; // Here, we decode the user's Firebase token and store it in a cookie. Use\n  // express-session (or similar) to store the session data server-side.\n  // An alternative approach is to use Firebase's `createSessionCookie`. See:\n  // https://firebase.google.com/docs/auth/admin/manage-cookies\n  // Firebase docs:\n  //   \"This is a low overhead operation. The public certificates are initially\n  //    queried and cached until they expire. Session cookie verification can be\n  //    done with the cached public certificates without any additional network\n  //    requests.\"\n  // However, in a serverless environment, we shouldn't rely on caching, so\n  // it's possible Firebase's `verifySessionCookie` will make frequent network\n  // requests in a serverless context.\n\n  return verifyIdToken(token).then(decodedToken => {\n    req.session.decodedToken = decodedToken;\n    req.session.token = token;\n    return decodedToken;\n  }).then(decodedToken => {\n    return res.status(200).json({\n      status: true,\n      decodedToken\n    });\n  }).catch(error => {\n    return res.status(500).json({\n      error\n    });\n  });\n};\n\nexport default commonMiddleware(handler);","map":{"version":3,"sources":["D:/1-Project/soundify-web/pages/api/login.js"],"names":["commonMiddleware","verifyIdToken","handler","req","res","body","status","token","then","decodedToken","session","json","catch","error"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,yCAA7B;AACA,SAASC,aAAT,QAA8B,gCAA9B;;AAEA,MAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,MAAI,CAACD,GAAG,CAACE,IAAT,EAAe;AACb,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,CAAP;AACD;;AAED,QAAM;AAAEC,IAAAA;AAAF,MAAYJ,GAAG,CAACE,IAAtB,CAL4B,CAO5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOJ,aAAa,CAACM,KAAD,CAAb,CACJC,IADI,CACCC,YAAY,IAAI;AACpBN,IAAAA,GAAG,CAACO,OAAJ,CAAYD,YAAZ,GAA2BA,YAA3B;AACAN,IAAAA,GAAG,CAACO,OAAJ,CAAYH,KAAZ,GAAoBA,KAApB;AACA,WAAOE,YAAP;AACD,GALI,EAMJD,IANI,CAMCC,YAAY,IAAI;AACpB,WAAOL,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAAEL,MAAAA,MAAM,EAAE,IAAV;AAAgBG,MAAAA;AAAhB,KAArB,CAAP;AACD,GARI,EASJG,KATI,CASEC,KAAK,IAAI;AACd,WAAOT,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAAEE,MAAAA;AAAF,KAArB,CAAP;AACD,GAXI,CAAP;AAYD,CA/BD;;AAiCA,eAAeb,gBAAgB,CAACE,OAAD,CAA/B","sourcesContent":["import commonMiddleware from '../../utils/middleware/commonMiddleware'\nimport { verifyIdToken } from '../../utils/auth/firebaseAdmin'\n\nconst handler = (req, res) => {\n  if (!req.body) {\n    return res.status(400)\n  }\n\n  const { token } = req.body\n\n  // Here, we decode the user's Firebase token and store it in a cookie. Use\n  // express-session (or similar) to store the session data server-side.\n  // An alternative approach is to use Firebase's `createSessionCookie`. See:\n  // https://firebase.google.com/docs/auth/admin/manage-cookies\n  // Firebase docs:\n  //   \"This is a low overhead operation. The public certificates are initially\n  //    queried and cached until they expire. Session cookie verification can be\n  //    done with the cached public certificates without any additional network\n  //    requests.\"\n  // However, in a serverless environment, we shouldn't rely on caching, so\n  // it's possible Firebase's `verifySessionCookie` will make frequent network\n  // requests in a serverless context.\n  return verifyIdToken(token)\n    .then(decodedToken => {\n      req.session.decodedToken = decodedToken\n      req.session.token = token\n      return decodedToken\n    })\n    .then(decodedToken => {\n      return res.status(200).json({ status: true, decodedToken })\n    })\n    .catch(error => {\n      return res.status(500).json({ error })\n    })\n}\n\nexport default commonMiddleware(handler)\n"]},"metadata":{},"sourceType":"module"}