{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport styles from \"../styles/discover.module.css\";\nimport { UserArtists, ArtistTracks } from \"react-spotify-api\";\nimport { connect } from \"react-redux\";\nimport * as actionTypes from \"../redux/action\";\n\nclass Artists extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleIndex\", index => {\n      this.setState({\n        currentIndex: index\n      });\n    });\n\n    _defineProperty(this, \"handleSongIndex\", index => {\n      this.setState({\n        hoverIndex: index\n      });\n    });\n\n    _defineProperty(this, \"handleNext\", () => {\n      let coverList = document.querySelector(\".discover_contentCoverList__2BhJd\");\n      let coverItems = document.getElementsByClassName(\"discover_contentCoverContainer__DrO25\");\n      console.log(coverList);\n      let style = window.getComputedStyle(coverList);\n      let right = style.getPropertyValue(\"right\");\n\n      if (parseInt(right.substr(0, right.length - 2)) > (coverItems.length - 1) * 107) {\n        return;\n      }\n\n      let newRight = `${parseInt(right.substr(0, right.length - 2)) + 625}px`;\n      coverList.setAttribute(\"style\", `right:${newRight}`);\n    });\n\n    _defineProperty(this, \"handlePrev\", () => {\n      let coverList = document.querySelector(\".discover_contentCoverList__2BhJd\");\n      console.log(coverList);\n      let style = window.getComputedStyle(coverList);\n      let right = style.getPropertyValue(\"right\");\n\n      if (right === \"0px\") {\n        return;\n      }\n\n      let newRight = `${parseInt(right.substr(0, right.length - 2)) - 625}px`;\n      coverList.setAttribute(\"style\", `right:${newRight}`);\n    });\n\n    _defineProperty(this, \"playSongHandler\", (track, artist) => {\n      console.log(track, \"track\", artist, \"playlist\");\n\n      if (artist) {\n        let uris;\n\n        if (!track) {\n          uris = JSON.stringify({\n            context_uri: artist.uri\n          });\n        } else {\n          uris = JSON.stringify({\n            context_uri: track.album.uri,\n            offset: {\n              uri: track.uri\n            }\n          });\n        }\n\n        this.props.playSong(uris);\n      }\n    });\n\n    this.state = {\n      currentIndex: 0,\n      hoverIndex: -1\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"div\", {\n      className: styles.coverParent\n    }, __jsx(\"div\", {\n      className: styles.coverContainer\n    }, __jsx(UserArtists, null, (artists, loading, error) => artists && __jsx(\"div\", {\n      className: styles.contentCoverList\n    }, artists.artists.items.map((artist, index) => __jsx(\"div\", {\n      key: artist.id,\n      className: styles.contentCoverContainer,\n      onClick: () => {\n        this.handleIndex(index);\n      }\n    }, __jsx(\"img\", {\n      src: artist.images[1].url,\n      alt: \"\",\n      className: styles.contentCover\n    }), __jsx(\"div\", {\n      className: styles.contentTitle\n    }, artist.name), this.state.currentIndex === index ? __jsx(\"div\", {\n      className: styles.contentSelector\n    }) : null)))))), __jsx(\"img\", {\n      src: \"/icons/more.svg\",\n      alt: \"\",\n      className: styles.nextIcon,\n      onClick: () => {\n        this.handleNext();\n      }\n    }), __jsx(\"img\", {\n      src: \"/icons/more.svg\",\n      alt: \"\",\n      className: styles.prevIcon,\n      onClick: () => {\n        this.handlePrev();\n      }\n    }), __jsx(UserArtists, null, (artists, loading, error) => artists && __jsx(React.Fragment, null, __jsx(ArtistTracks, {\n      id: artists.artists.items[this.state.currentIndex].id\n    }, (tracks, loading, error) => tracks && __jsx(\"div\", null, __jsx(\"div\", {\n      className: styles.contentLine\n    }), __jsx(\"img\", {\n      src: \"/icons/play_with_shadow.svg\",\n      alt: \"\",\n      className: styles.playButtonShadow,\n      onClick: () => this.playSongHandler(null, artists.artists.items[this.state.currentIndex])\n    }), __jsx(\"ul\", {\n      className: styles.contentListContainer\n    }, __jsx(\"div\", {\n      className: styles.songListContainer\n    }, __jsx(\"div\", null, tracks.tracks.map((track, index) => __jsx(\"li\", {\n      key: track.name,\n      className: styles.contentList,\n      onMouseOver: () => {\n        this.handleSongIndex(index);\n      },\n      onMouseLeave: () => {\n        this.handleSongIndex(-1);\n      }\n    }, __jsx(\"div\", {\n      className: styles.indexName\n    }, index + 1), this.state.hoverIndex === index ? __jsx(\"img\", {\n      src: \"/icons/play.svg\",\n      alt: \"\",\n      className: styles.listPlayIcon,\n      onClick: () => this.playSongHandler(track, artists.artists.items[this.state.currentIndex])\n    }) : __jsx(\"img\", {\n      src: \"/icons/favorite.svg\",\n      alt: \"\",\n      className: styles.favoriteIcon\n    }), __jsx(\"div\", {\n      className: styles.trackName\n    }, track.name), __jsx(\"div\", {\n      className: styles.trackArtist\n    }, track.artists[0].name), __jsx(\"div\", {\n      className: styles.trackAlbum\n    }, track.album.name), __jsx(\"img\", {\n      src: \"/icons/more_dot.svg\",\n      alt: \"\",\n      className: styles.moreDot\n    })))))))))), __jsx(\"img\", {\n      src: \"/icons/more.svg\",\n      alt: \"\",\n      className: styles.nextIcon,\n      onClick: () => {\n        this.handleNext();\n      }\n    }), __jsx(\"img\", {\n      src: \"/icons/more.svg\",\n      alt: \"\",\n      className: styles.prevIcon,\n      onClick: () => {\n        this.handlePrev();\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    playSong: uris => dispatch(actionTypes.playSong(uris))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Artists);","map":null,"metadata":{},"sourceType":"module"}