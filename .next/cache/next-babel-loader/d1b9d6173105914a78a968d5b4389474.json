{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect } from \"react\";\nimport LRU from \"lru-cache\";\nvar isServer = false;\nvar DEFAULT_CACHE_KEY = \"cache\";\nexport default function clientCache() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$lruConfig = _ref.lruConfig,\n      lruConfig = _ref$lruConfig === void 0 ? {} : _ref$lruConfig,\n      genCacheKeyStrate = _ref.genCacheKeyStrate;\n\n  // 默认10分钟缓存\n  var _ref2 = lruConfig || {},\n      _ref2$maxAge = _ref2.maxAge,\n      maxAge = _ref2$maxAge === void 0 ? 1000 * 60 * 10 : _ref2$maxAge,\n      restConfig = _objectWithoutProperties(_ref2, [\"maxAge\"]);\n\n  var lruCache = new LRU(_objectSpread({\n    maxAge: maxAge\n  }, restConfig));\n\n  function getCacheKey(context) {\n    return genCacheKeyStrate ? genCacheKeyStrate(context) : DEFAULT_CACHE_KEY;\n  }\n\n  function cache(fn) {\n    // 服务端不能保留缓存 会在多个用户之间共享\n    if (isServer) {\n      return fn;\n    }\n\n    return function _callee() {\n      var key,\n          cached,\n          result,\n          _args = arguments;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              key = getCacheKey.apply(void 0, _args);\n              cached = lruCache.get(key);\n\n              if (!cached) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", cached);\n\n            case 4:\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(fn.apply(void 0, _args));\n\n            case 6:\n              result = _context.sent;\n              lruCache.set(key, result);\n              return _context.abrupt(\"return\", result);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n\n  function setCache(key, cachedData) {\n    lruCache.set(key, cachedData);\n  } // 允许客户端外部手动设置缓存数据\n\n\n  function useCache(key, cachedData) {\n    useEffect(function () {\n      if (!isServer) {\n        setCache(key, cachedData);\n      }\n    }, []);\n  }\n\n  return {\n    cache: cache,\n    useCache: useCache,\n    setCache: setCache\n  };\n}","map":null,"metadata":{},"sourceType":"module"}