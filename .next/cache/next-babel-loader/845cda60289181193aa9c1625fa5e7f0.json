{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require(\"axios\");\n\nvar GITHUB_BASE_URL = \"https://api.github.com\";\nvar isServer = false; // 服务端环境需要手动拼接url\n\nfunction requestGithub(method, url, data, headers) {\n  var result;\n  return _regeneratorRuntime.async(function requestGithub$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (url) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new Error(\"url must be provided\");\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(axios({\n            method: method,\n            url: \"\".concat(GITHUB_BASE_URL).concat(url),\n            data: data,\n            headers: headers\n          }));\n\n        case 4:\n          result = _context.sent;\n          return _context.abrupt(\"return\", result);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction request(_ref, req, res) {\n  var _ref$method, method, url, _ref$data, data, session, _ref2, githubAuth, _ref3, access_token, token_type, headers, serverResult, clientResult;\n\n  return _regeneratorRuntime.async(function request$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref$method = _ref.method, method = _ref$method === void 0 ? \"GET\" : _ref$method, url = _ref.url, _ref$data = _ref.data, data = _ref$data === void 0 ? {} : _ref$data;\n\n          if (!isServer) {\n            _context2.next = 11;\n            break;\n          }\n\n          session = req.session;\n          _ref2 = session || {}, githubAuth = _ref2.githubAuth;\n          _ref3 = githubAuth || {}, access_token = _ref3.access_token, token_type = _ref3.token_type;\n          headers = {};\n\n          if (access_token) {\n            headers.Authorization = \"\".concat(token_type, \" \").concat(access_token);\n          } // 服务端走requestGithub方法，\n          // 补全api的前缀\n\n\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(requestGithub(method, url, data, headers));\n\n        case 9:\n          serverResult = _context2.sent;\n          return _context2.abrupt(\"return\", serverResult);\n\n        case 11:\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(axios({\n            method: method,\n            url: \"/github\".concat(url),\n            data: data\n          }));\n\n        case 13:\n          clientResult = _context2.sent;\n          return _context2.abrupt(\"return\", clientResult);\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nmodule.exports = {\n  request: request,\n  requestGithub: requestGithub\n};","map":null,"metadata":{},"sourceType":"script"}