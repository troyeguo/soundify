{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect } from \"react\";\nimport LRU from \"lru-cache\";\nvar isServer = false;\nvar DEFAULT_CACHE_KEY = \"cache\";\nexport default function clientCache() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$lruConfig = _ref.lruConfig,\n      lruConfig = _ref$lruConfig === void 0 ? {} : _ref$lruConfig,\n      genCacheKeyStrate = _ref.genCacheKeyStrate;\n\n  // 默认10分钟缓存\n  var _ref2 = lruConfig || {},\n      _ref2$maxAge = _ref2.maxAge,\n      maxAge = _ref2$maxAge === void 0 ? 1000 * 60 * 10 : _ref2$maxAge,\n      restConfig = _objectWithoutProperties(_ref2, [\"maxAge\"]);\n\n  var lruCache = new LRU(_objectSpread({\n    maxAge: maxAge\n  }, restConfig));\n\n  function getCacheKey(context) {\n    return genCacheKeyStrate ? genCacheKeyStrate(context) : DEFAULT_CACHE_KEY;\n  }\n\n  function cache(fn) {\n    // 服务端不能保留缓存 会在多个用户之间共享\n    if (isServer) {\n      return fn;\n    }\n\n    return function _callee() {\n      var key,\n          cached,\n          result,\n          _args = arguments;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              key = getCacheKey.apply(void 0, _args);\n              cached = lruCache.get(key);\n\n              if (!cached) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", cached);\n\n            case 4:\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(fn.apply(void 0, _args));\n\n            case 6:\n              result = _context.sent;\n              lruCache.set(key, result);\n              return _context.abrupt(\"return\", result);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n\n  function setCache(key, cachedData) {\n    lruCache.set(key, cachedData);\n  } // 允许客户端外部手动设置缓存数据\n\n\n  function useCache(key, cachedData) {\n    useEffect(function () {\n      if (!isServer) {\n        setCache(key, cachedData);\n      }\n    }, []);\n  }\n\n  return {\n    cache: cache,\n    useCache: useCache,\n    setCache: setCache\n  };\n}","map":{"version":3,"sources":["D:/1-Project/soundify-web/lib/clientCache.js"],"names":["useEffect","LRU","isServer","DEFAULT_CACHE_KEY","clientCache","lruConfig","genCacheKeyStrate","maxAge","restConfig","lruCache","getCacheKey","context","cache","fn","key","cached","get","result","set","setCache","cachedData","useCache"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,GAAP,MAAgB,WAAhB;AAEA,IAAMC,QAAQ,QAAd;AACA,IAAMC,iBAAiB,GAAG,OAA1B;AACA,eAAe,SAASC,WAAT,GAGP;AAAA,iFAAJ,EAAI;AAAA,4BAFNC,SAEM;AAAA,MAFNA,SAEM,+BAFM,EAEN;AAAA,MADNC,iBACM,QADNA,iBACM;;AACN;AADM,cAE6CD,SAAS,IAAI,EAF1D;AAAA,2BAEEE,MAFF;AAAA,MAEEA,MAFF,6BAEW,OAAO,EAAP,GAAY,EAFvB;AAAA,MAE8BC,UAF9B;;AAIN,MAAMC,QAAQ,GAAG,IAAIR,GAAJ;AACfM,IAAAA,MAAM,EAANA;AADe,KAEZC,UAFY,EAAjB;;AAKA,WAASE,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,WAAOL,iBAAiB,GAAGA,iBAAiB,CAACK,OAAD,CAApB,GAAgCR,iBAAxD;AACD;;AAED,WAASS,KAAT,CAAeC,EAAf,EAAmB;AACjB;AACA,QAAIX,QAAJ,EAAc;AACZ,aAAOW,EAAP;AACD;;AAED,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,cAAAA,GADD,GACOJ,WAAW,MAAX,eADP;AAECK,cAAAA,MAFD,GAEUN,QAAQ,CAACO,GAAT,CAAaF,GAAb,CAFV;;AAAA,mBAGDC,MAHC;AAAA;AAAA;AAAA;;AAAA,+CAIIA,MAJJ;;AAAA;AAAA;AAAA,+CAMgBF,EAAE,MAAF,eANhB;;AAAA;AAMCI,cAAAA,MAND;AAOLR,cAAAA,QAAQ,CAACS,GAAT,CAAaJ,GAAb,EAAkBG,MAAlB;AAPK,+CAQEA,MARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAUD;;AAED,WAASE,QAAT,CAAkBL,GAAlB,EAAuBM,UAAvB,EAAmC;AACjCX,IAAAA,QAAQ,CAACS,GAAT,CAAaJ,GAAb,EAAkBM,UAAlB;AACD,GAjCK,CAmCN;;;AACA,WAASC,QAAT,CAAkBP,GAAlB,EAAuBM,UAAvB,EAAmC;AACjCpB,IAAAA,SAAS,CAAC,YAAM;AACd,UAAI,CAACE,QAAL,EAAe;AACbiB,QAAAA,QAAQ,CAACL,GAAD,EAAMM,UAAN,CAAR;AACD;AACF,KAJQ,EAIN,EAJM,CAAT;AAKD;;AAED,SAAO;AACLR,IAAAA,KAAK,EAALA,KADK;AAELS,IAAAA,QAAQ,EAARA,QAFK;AAGLF,IAAAA,QAAQ,EAARA;AAHK,GAAP;AAKD","sourcesContent":["import { useEffect } from \"react\";\r\nimport LRU from \"lru-cache\";\r\n\r\nconst isServer = typeof window === \"undefined\";\r\nconst DEFAULT_CACHE_KEY = \"cache\";\r\nexport default function clientCache({\r\n  lruConfig = {},\r\n  genCacheKeyStrate,\r\n} = {}) {\r\n  // 默认10分钟缓存\r\n  const { maxAge = 1000 * 60 * 10, ...restConfig } = lruConfig || {};\r\n\r\n  const lruCache = new LRU({\r\n    maxAge,\r\n    ...restConfig,\r\n  });\r\n\r\n  function getCacheKey(context) {\r\n    return genCacheKeyStrate ? genCacheKeyStrate(context) : DEFAULT_CACHE_KEY;\r\n  }\r\n\r\n  function cache(fn) {\r\n    // 服务端不能保留缓存 会在多个用户之间共享\r\n    if (isServer) {\r\n      return fn;\r\n    }\r\n\r\n    return async (...args) => {\r\n      const key = getCacheKey(...args);\r\n      const cached = lruCache.get(key);\r\n      if (cached) {\r\n        return cached;\r\n      }\r\n      const result = await fn(...args);\r\n      lruCache.set(key, result);\r\n      return result;\r\n    };\r\n  }\r\n\r\n  function setCache(key, cachedData) {\r\n    lruCache.set(key, cachedData);\r\n  }\r\n\r\n  // 允许客户端外部手动设置缓存数据\r\n  function useCache(key, cachedData) {\r\n    useEffect(() => {\r\n      if (!isServer) {\r\n        setCache(key, cachedData);\r\n      }\r\n    }, []);\r\n  }\r\n\r\n  return {\r\n    cache,\r\n    useCache,\r\n    setCache,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}