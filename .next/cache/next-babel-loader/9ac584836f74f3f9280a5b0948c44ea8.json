{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { withRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport songList from \"../mock/songs\";\nimport styles from \"../styles/player.module.css\";\nimport { connect } from \"react-redux\";\nimport AddDialog from \"./AddDialog\";\nimport * as actionTypes from \"../redux/action\";\nimport axios from \"axios\";\nimport { AudioAnimation, AnimationStop } from \"./audioAnimation\";\n\nvar Player = /*#__PURE__*/function (_Component) {\n  _inherits(Player, _Component);\n\n  var _super = _createSuper(Player);\n\n  function Player(props) {\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"checkForPlayer\", function () {\n      if (window.Spotify) {\n        console.log(\"checkForPlayer\");\n        clearInterval(_this.playerCheckInterval);\n        _this.player = new window.Spotify.Player({\n          name: \"Soundify\",\n          getOAuthToken: function getOAuthToken(cb) {\n            cb(_this.state.token);\n          }\n        });\n      }\n\n      if (_this.player) {\n        _this.createEventHandlers();\n\n        _this.player.connect();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createEventHandlers\", function () {\n      _this.player.on(\"initialization_error\", function (e) {\n        console.error(\"Initialization error \", e);\n\n        _this.setState({\n          player_init_error: true\n        });\n      });\n\n      _this.player.on(\"authentication_error\", function (e) {\n        return console.error(\"Authentication error \", e);\n      });\n\n      _this.player.on(\"account_error\", function (e) {\n        return console.error(\"Account error \", e);\n      });\n\n      _this.player.on(\"playback_error\", function (e) {\n        return console.error(\"Playback error \", e);\n      });\n\n      _this.player.on(\"player_state_changed\", function (state) {\n        if (state) {\n          console.log(\"player state changed\", state);\n          var duration = state.duration,\n              position = state.position; // duration = 100%\n          // position = ?%\n\n          var val = position * 100 / duration;\n\n          _this.setState({\n            playingInfo: state,\n            playing: !state.paused,\n            positionSliderValue: val\n          }); // Music started playing, start the position interval\n\n\n          if (!_this.props.isPlaying && !state.paused) {\n            _this.positionCheckInterval = setInterval(function () {\n              _this.checkChangePosition();\n            }, 1000);\n          } // Music stopped playing, clear the position interval\n\n\n          if (_this.props.isPlaying && state.paused) {\n            clearInterval(_this.positionCheckInterval);\n          }\n\n          if (_this.props.isPlaying === state.paused) {\n            _this.props.setIsPlaying(!state.paused);\n          }\n\n          if (!_this.props.currentlyPlaying || _this.props.currentlyPlaying !== state.track_window.current_track.name) {\n            var current_track = state.track_window.current_track;\n\n            _this.props.setCurrentlyPlaying(current_track.name);\n          }\n        }\n      });\n\n      _this.player.on(\"ready\", function (data) {\n        var device_id = data.device_id;\n        console.log(\"PLAYER CONNECTED \", device_id); // await this.setState({ deviceId: device_id });\n\n        _this.setState({\n          deviceId: device_id\n        }, function () {\n          _this.transferPlaybackHere();\n        });\n\n        _this.player.getVolume().then(function (vol) {\n          var volume = vol * 100;\n\n          _this.setState({\n            volumeSliderValue: volume\n          });\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkChangePosition\", function () {\n      _this.player.getCurrentState().then(function (state) {\n        if (state) {\n          var duration = state.duration,\n              position = state.position; // duration = 100%\n          // position = ?%\n\n          var val = position * 100 / duration;\n\n          if (val !== _this.state.positionSliderValue) {\n            _this.setState({\n              positionSliderValue: val\n            });\n          }\n\n          var positionStamp = _this.milisToMinutesAndSeconds(state.position);\n\n          var durationStamp = _this.milisToMinutesAndSeconds(state.duration);\n\n          _this.setState({\n            positionStamp: positionStamp,\n            durationStamp: durationStamp\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"transferPlaybackHere\", function () {\n      // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\n      // for normal users they have to go in the spotify app/website and change the device manually\n      // user type is stored in redux state => this.props.user.type\n      var deviceId = _this.state.deviceId;\n      fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          Authorization: \"Bearer \".concat(_this.state.token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          device_ids: [deviceId],\n          play: false\n        })\n      }).then(function (res) {\n        console.log(\"status\", res);\n\n        if (res.status === 204) {\n          axios.get(\"https://api.spotify.com/v1/me/player\", {\n            headers: {\n              Authorization: \"Bearer \".concat(_this.state.token)\n            }\n          }).then(function () {\n            // Transferred playback successfully, get current timestamp\n            _this.checkChangePosition();\n          })[\"catch\"](function (err) {\n            console.log(err);\n          });\n        }\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      }); // console.log('Hello', this.props);\n      // if (this.props.user.product === 'premium') {\n      // } else {\n      //   console.log(\n      //     'Cannot transfer playback automatically because you are not a premium user.'\n      //   );\n      // }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPrevClick\", function () {\n      _this.player.previousTrack();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlayClick\", function () {\n      _this.player.togglePlay();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onNextClick\", function () {\n      _this.player.nextTrack();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"milisToMinutesAndSeconds\", function (mil) {\n      var minutes = Math.floor(mil / 60000);\n      var seconds = (mil % 60000 / 1000).toFixed(0);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    });\n\n    _this.state = {\n      deviceId: null,\n      playingInfo: null,\n      playing: false,\n      positionSliderValue: 50,\n      volumeSliderValue: 50,\n      positionStamp: \"00:00\",\n      durationStamp: \"00:00\",\n      player_init_error: false\n    };\n    _this.player = null;\n    _this.playerCheckInterval = null;\n    _this.positionCheckInterval = null;\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        token: localStorage.getItem(\"react-spotify-access-token\")\n      }); // console.log(Spotify, \"etata\");\n\n      window.onSpotifyWebPlaybackSDKReady = function () {\n        console.log(\"onready\");\n        window.Spotify = Spotify;\n      };\n\n      console.log(window.Spotify, \"etata\");\n      this.playerCheckInterval = setInterval(function () {\n        return _this2.checkForPlayer();\n      }, 1000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.playingInfo) {\n        return null;\n      }\n\n      console.log(this.state.playingInfo);\n      return __jsx(\"div\", {\n        className: styles.player\n      }, __jsx(\"div\", {\n        className: styles.playerHeader\n      }, __jsx(\"div\", null, __jsx(\"img\", {\n        className: styles.avatar,\n        src: \"/images/avatar.jpeg\",\n        alt: \"\"\n      }), __jsx(\"span\", {\n        className: styles.nickname\n      }, \"Troye Guo\"), __jsx(\"span\", {\n        className: styles.triangle\n      }))), __jsx(\"div\", {\n        className: styles.playerCoverContainer\n      }, this.state.playing ? __jsx(\"img\", {\n        className: styles.playerCoverAnimation,\n        src: this.state.playingInfo.track_window.current_track.album.images[0].url,\n        alt: \"\"\n      }) : __jsx(\"img\", {\n        className: styles.playerCover,\n        src: this.state.playingInfo.track_window.current_track.album.images[0].url,\n        alt: \"\"\n      })), __jsx(\"div\", {\n        className: styles.musicInfo\n      }, __jsx(\"div\", {\n        className: styles.songName\n      }, this.state.playingInfo.track_window.current_track.name), __jsx(\"div\", {\n        className: styles.artistName\n      }, this.state.playingInfo.track_window.current_track.artists[0].name)), __jsx(\"div\", {\n        className: styles.playerPanel\n      }, __jsx(\"img\", {\n        src: \"/icons/prev.svg\",\n        alt: \"\",\n        onClick: this.onPrevClick\n      }), this.state.playing ? __jsx(\"img\", {\n        src: \"/icons/playing.svg\",\n        alt: \"\",\n        style: {\n          width: \"45px\"\n        },\n        onClick: this.onPlayClick\n      }) : __jsx(\"img\", {\n        src: \"/icons/play.svg\",\n        alt: \"\",\n        style: {\n          width: \"45px\"\n        },\n        onClick: this.onPlayClick\n      }), __jsx(\"img\", {\n        src: \"/icons/next.svg\",\n        alt: \"\",\n        onClick: this.onNextClick\n      })), __jsx(\"div\", {\n        className: styles.playerNext\n      }, __jsx(AudioAnimation, null)), __jsx(\"div\", {\n        className: styles.line\n      }));\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    recently_played: state.recently_played,\n    user: state.current_user,\n    playNow: state.play_now,\n    currentlyPlaying: state.currently_playing,\n    isPlaying: state.isPlaying\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setUser: function setUser(user) {\n      return dispatch({\n        type: actionTypes.SET_USER,\n        user: user\n      });\n    },\n    fetchRecentlyPlayed: function fetchRecentlyPlayed(options) {\n      return dispatch(actionTypes.fetchRecentlyPlayed(options));\n    },\n    resetPlayNow: function resetPlayNow() {\n      return dispatch({\n        type: actionTypes.RESET_PLAY_NOW\n      });\n    },\n    setCurrentlyPlaying: function setCurrentlyPlaying(song) {\n      return dispatch({\n        type: actionTypes.SET_CURRENTLY_PLAYING,\n        song: song\n      });\n    },\n    setIsPlaying: function setIsPlaying(isPlaying) {\n      return dispatch({\n        type: actionTypes.SET_IS_PLAYING,\n        isPlaying: isPlaying\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));","map":{"version":3,"sources":["D:/1-Project/soundify-web/components/Player.js"],"names":["React","Component","withRouter","useState","songList","styles","connect","AddDialog","actionTypes","axios","AudioAnimation","AnimationStop","Player","props","window","Spotify","console","log","clearInterval","playerCheckInterval","player","name","getOAuthToken","cb","state","token","createEventHandlers","on","e","error","setState","player_init_error","duration","position","val","playingInfo","playing","paused","positionSliderValue","isPlaying","positionCheckInterval","setInterval","checkChangePosition","setIsPlaying","currentlyPlaying","track_window","current_track","setCurrentlyPlaying","data","device_id","deviceId","transferPlaybackHere","getVolume","then","vol","volume","volumeSliderValue","getCurrentState","positionStamp","milisToMinutesAndSeconds","durationStamp","fetch","method","headers","Authorization","body","JSON","stringify","device_ids","play","res","status","get","err","previousTrack","togglePlay","nextTrack","mil","minutes","Math","floor","seconds","toFixed","localStorage","getItem","onSpotifyWebPlaybackSDKReady","checkForPlayer","playerHeader","avatar","nickname","triangle","playerCoverContainer","playerCoverAnimation","album","images","url","playerCover","musicInfo","songName","artistName","artists","playerPanel","onPrevClick","width","onPlayClick","onNextClick","playerNext","line","mapStateToProps","recently_played","user","current_user","playNow","play_now","currently_playing","mapDispatchToProps","dispatch","setUser","type","SET_USER","fetchRecentlyPlayed","options","resetPlayNow","RESET_PLAY_NOW","song","SET_CURRENTLY_PLAYING","SET_IS_PLAYING"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"next/router\";\r\nimport { useState } from \"react\";\r\nimport songList from \"../mock/songs\";\r\nimport styles from \"../styles/player.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport AddDialog from \"./AddDialog\";\r\nimport * as actionTypes from \"../redux/action\";\r\nimport axios from \"axios\";\r\nimport { AudioAnimation, AnimationStop } from \"./audioAnimation\";\r\nclass Player extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      deviceId: null,\r\n      playingInfo: null,\r\n      playing: false,\r\n      positionSliderValue: 50,\r\n      volumeSliderValue: 50,\r\n      positionStamp: \"00:00\",\r\n      durationStamp: \"00:00\",\r\n      player_init_error: false,\r\n    };\r\n\r\n    this.player = null;\r\n    this.playerCheckInterval = null;\r\n    this.positionCheckInterval = null;\r\n  }\r\n  componentDidMount() {\r\n    this.setState({\r\n      token: localStorage.getItem(\"react-spotify-access-token\"),\r\n    });\r\n    // console.log(Spotify, \"etata\");\r\n    window.onSpotifyWebPlaybackSDKReady = () => {\r\n      console.log(\"onready\");\r\n      window.Spotify = Spotify;\r\n    };\r\n    console.log(window.Spotify, \"etata\");\r\n    this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\r\n  }\r\n  checkForPlayer = () => {\r\n    if (window.Spotify) {\r\n      console.log(\"checkForPlayer\");\r\n      clearInterval(this.playerCheckInterval);\r\n      this.player = new window.Spotify.Player({\r\n        name: \"Soundify\",\r\n        getOAuthToken: (cb) => {\r\n          cb(this.state.token);\r\n        },\r\n      });\r\n    }\r\n\r\n    if (this.player) {\r\n      this.createEventHandlers();\r\n\r\n      this.player.connect();\r\n    }\r\n  };\r\n  createEventHandlers = () => {\r\n    this.player.on(\"initialization_error\", (e) => {\r\n      console.error(\"Initialization error \", e);\r\n      this.setState({ player_init_error: true });\r\n    });\r\n    this.player.on(\"authentication_error\", (e) =>\r\n      console.error(\"Authentication error \", e)\r\n    );\r\n    this.player.on(\"account_error\", (e) => console.error(\"Account error \", e));\r\n    this.player.on(\"playback_error\", (e) =>\r\n      console.error(\"Playback error \", e)\r\n    );\r\n\r\n    this.player.on(\"player_state_changed\", (state) => {\r\n      if (state) {\r\n        console.log(\"player state changed\", state);\r\n        let { duration, position } = state;\r\n        // duration = 100%\r\n        // position = ?%\r\n        let val = (position * 100) / duration;\r\n        this.setState({\r\n          playingInfo: state,\r\n          playing: !state.paused,\r\n          positionSliderValue: val,\r\n        });\r\n\r\n        // Music started playing, start the position interval\r\n        if (!this.props.isPlaying && !state.paused) {\r\n          this.positionCheckInterval = setInterval(() => {\r\n            this.checkChangePosition();\r\n          }, 1000);\r\n        }\r\n\r\n        // Music stopped playing, clear the position interval\r\n        if (this.props.isPlaying && state.paused) {\r\n          clearInterval(this.positionCheckInterval);\r\n        }\r\n\r\n        if (this.props.isPlaying === state.paused) {\r\n          this.props.setIsPlaying(!state.paused);\r\n        }\r\n\r\n        if (\r\n          !this.props.currentlyPlaying ||\r\n          this.props.currentlyPlaying !== state.track_window.current_track.name\r\n        ) {\r\n          let { current_track } = state.track_window;\r\n          this.props.setCurrentlyPlaying(current_track.name);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.player.on(\"ready\", (data) => {\r\n      let { device_id } = data;\r\n      console.log(\"PLAYER CONNECTED \", device_id);\r\n      // await this.setState({ deviceId: device_id });\r\n      this.setState({ deviceId: device_id }, () => {\r\n        this.transferPlaybackHere();\r\n      });\r\n      this.player.getVolume().then((vol) => {\r\n        let volume = vol * 100;\r\n        this.setState({ volumeSliderValue: volume });\r\n      });\r\n    });\r\n  };\r\n  checkChangePosition = () => {\r\n    this.player.getCurrentState().then((state) => {\r\n      if (state) {\r\n        let { duration, position } = state;\r\n        // duration = 100%\r\n        // position = ?%\r\n        let val = (position * 100) / duration;\r\n        if (val !== this.state.positionSliderValue) {\r\n          this.setState({\r\n            positionSliderValue: val,\r\n          });\r\n        }\r\n\r\n        let positionStamp = this.milisToMinutesAndSeconds(state.position);\r\n        let durationStamp = this.milisToMinutesAndSeconds(state.duration);\r\n        this.setState({ positionStamp, durationStamp });\r\n      }\r\n    });\r\n  };\r\n  transferPlaybackHere = () => {\r\n    // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\r\n    // for normal users they have to go in the spotify app/website and change the device manually\r\n    // user type is stored in redux state => this.props.user.type\r\n    const { deviceId } = this.state;\r\n    fetch(\"https://api.spotify.com/v1/me/player\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Authorization: `Bearer ${this.state.token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        device_ids: [deviceId],\r\n        play: false,\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        console.log(\"status\", res);\r\n        if (res.status === 204) {\r\n          axios\r\n            .get(\"https://api.spotify.com/v1/me/player\", {\r\n              headers: {\r\n                Authorization: `Bearer ${this.state.token}`,\r\n              },\r\n            })\r\n            .then(() => {\r\n              // Transferred playback successfully, get current timestamp\r\n              this.checkChangePosition();\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n\r\n    // console.log('Hello', this.props);\r\n    // if (this.props.user.product === 'premium') {\r\n    // } else {\r\n    //   console.log(\r\n    //     'Cannot transfer playback automatically because you are not a premium user.'\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  onPrevClick = () => {\r\n    this.player.previousTrack();\r\n  };\r\n\r\n  onPlayClick = () => {\r\n    this.player.togglePlay();\r\n  };\r\n\r\n  onNextClick = () => {\r\n    this.player.nextTrack();\r\n  };\r\n  milisToMinutesAndSeconds = (mil) => {\r\n    let minutes = Math.floor(mil / 60000);\r\n    let seconds = ((mil % 60000) / 1000).toFixed(0);\r\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n  };\r\n  render() {\r\n    if (!this.state.playingInfo) {\r\n      return null;\r\n    }\r\n    console.log(this.state.playingInfo);\r\n\r\n    return (\r\n      <div className={styles.player}>\r\n        <div className={styles.playerHeader}>\r\n          <div>\r\n            <img className={styles.avatar} src=\"/images/avatar.jpeg\" alt=\"\" />\r\n            <span className={styles.nickname}>Troye Guo</span>\r\n            <span className={styles.triangle}></span>\r\n          </div>\r\n        </div>\r\n        <div className={styles.playerCoverContainer}>\r\n          {this.state.playing ? (\r\n            <img\r\n              className={styles.playerCoverAnimation}\r\n              src={\r\n                this.state.playingInfo.track_window.current_track.album\r\n                  .images[0].url\r\n              }\r\n              alt=\"\"\r\n            />\r\n          ) : (\r\n            <img\r\n              className={styles.playerCover}\r\n              src={\r\n                this.state.playingInfo.track_window.current_track.album\r\n                  .images[0].url\r\n              }\r\n              alt=\"\"\r\n            />\r\n          )}\r\n        </div>\r\n        <div className={styles.musicInfo}>\r\n          <div className={styles.songName}>\r\n            {this.state.playingInfo.track_window.current_track.name}\r\n          </div>\r\n          <div className={styles.artistName}>\r\n            {this.state.playingInfo.track_window.current_track.artists[0].name}\r\n          </div>\r\n        </div>\r\n        <div className={styles.playerPanel}>\r\n          <img src=\"/icons/prev.svg\" alt=\"\" onClick={this.onPrevClick} />\r\n          {this.state.playing ? (\r\n            <img\r\n              src=\"/icons/playing.svg\"\r\n              alt=\"\"\r\n              style={{ width: \"45px\" }}\r\n              onClick={this.onPlayClick}\r\n            />\r\n          ) : (\r\n            <img\r\n              src=\"/icons/play.svg\"\r\n              alt=\"\"\r\n              style={{ width: \"45px\" }}\r\n              onClick={this.onPlayClick}\r\n            />\r\n          )}\r\n          <img src=\"/icons/next.svg\" alt=\"\" onClick={this.onNextClick} />\r\n        </div>\r\n\r\n        <div className={styles.playerNext}>\r\n          <AudioAnimation />\r\n        </div>\r\n        <div className={styles.line}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    recently_played: state.recently_played,\r\n    user: state.current_user,\r\n    playNow: state.play_now,\r\n    currentlyPlaying: state.currently_playing,\r\n    isPlaying: state.isPlaying,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => dispatch({ type: actionTypes.SET_USER, user }),\r\n    fetchRecentlyPlayed: (options) =>\r\n      dispatch(actionTypes.fetchRecentlyPlayed(options)),\r\n    resetPlayNow: () => dispatch({ type: actionTypes.RESET_PLAY_NOW }),\r\n    setCurrentlyPlaying: (song) =>\r\n      dispatch({ type: actionTypes.SET_CURRENTLY_PLAYING, song }),\r\n    setIsPlaying: (isPlaying) =>\r\n      dispatch({ type: actionTypes.SET_IS_PLAYING, isPlaying }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));\r\n"]},"metadata":{},"sourceType":"module"}