{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Router, { withRouter, useRouter } from \"next/router\";\nimport Sidebar from \"../components/Sidebar\";\nimport Player from \"../components/Player\";\nimport Content from \"../components/Content\";\nimport * as actionTypes from \"../redux/action\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { SpotifyApiContext, SpotifyApiAxiosContext } from \"react-spotify-api\";\nimport { logger } from \"../utils\";\nconst menuList = [\"Home\", \"Playlist\", \"Album\", \"Artist\", \"Search\"];\n\nclass Index extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {});\n\n    _defineProperty(this, \"handleHashParams\", async params => {\n      logger.log(\"Params\", params); // If access token doesn't exist in has params, try to take it from local storage\n\n      if (!(\"access_token\" in params)) {\n        const currentAccessToken = localStorage.getItem(\"react-spotify-access-token\");\n\n        if (currentAccessToken) {\n          params.access_token = currentAccessToken;\n        }\n      }\n\n      logger.log(\"Params after\", params);\n\n      if (\"access_token\" in params) {\n        logger.log(\"access_token\" in params);\n        const metadata = await axios.get(\"https://api.spotify.com/v1/me\", {\n          headers: {\n            Authorization: `Bearer ${params.access_token}`\n          }\n        });\n        console.log(metadata, \"metadata\"); //       localStorage.setItem(\n        //         \"react-spotify-access-token\",\n        //         params.access_token\n        //       );\n        //       if (params.refresh_token) {\n        //         localStorage.setItem(\n        //           \"react-spotify-refresh-token\",\n        //           params.refresh_token\n        //         );\n        //       }\n        //       let newUser = {\n        //         access_token: params.access_token,\n        //         displayName: data.display_name,\n        //         email: data.email,\n        //         id: data.id,\n        //         type: data.type,\n        //         country: data.country,\n        //         product: data.product,\n        //       };\n        //       logger.log(this.props.setUser);\n        //       this.setState({ loading: false });\n        //       this.logInUserAndGetInfo(newUser);\n        //       this.props.fetchRecentlyPlayed({ limit: 12 });\n        //     })\n        //     .catch((err) => {\n        //       console.log(err, \"fgjxfjxf\");\n        //       // 401 = Unauthorized - the access token is incorrect (expired)\n        //       if (true) {\n        //         // Check if refresh token exists\n        //         const refreshToken = localStorage.getItem(\n        //           \"react-spotify-refresh-token\"\n        //         );\n        //         if (refreshToken) {\n        //           // Send refresh token to server to acquire a new access token\n        //           axios\n        //             .post(\"http://localhost:3000/refresh\", {\n        //               data: JSON.stringify({\n        //                 refresh_token: refreshToken,\n        //               }),\n        //             })\n        //             .then((res) => {\n        //               logger.log(\"Refresh token response -\", res.data);\n        //               axios\n        //                 .get(\"https://api.spotify.com/v1/me\", {\n        //                   headers: {\n        //                     Authorization: `Bearer ${res.data.access_token}`,\n        //                   },\n        //                 })\n        //                 .then(({ data }) => {\n        //                   localStorage.setItem(\n        //                     \"react-spotify-access-token\",\n        //                     res.data.access_token\n        //                   );\n        //                   let newUser = {\n        //                     access_token: res.data.access_token,\n        //                     displayName: data.display_name,\n        //                     email: data.email,\n        //                     id: data.id,\n        //                     type: data.type,\n        //                     country: data.country,\n        //                     product: data.product,\n        //                   };\n        //                   this.logInUserAndGetInfo(newUser);\n        //                   this.props.fetchRecentlyPlayed({ limit: 12 });\n        //                 });\n        //             })\n        //             .catch((e) => {\n        //               logger.log(\"Refresh token error -\", e);\n        //             })\n        //             .finally(() => {\n        //               this.setState({ loading: false });\n        //             });\n        //         } else {\n        //           // Refresh token doesn't exist, the user is shown a 'login with Spotify button'\n        //           this.setState({ loading: false });\n        //         }\n        //       }\n        //     });\n        // } else {\n        //   // The user is shown a 'login with Spotify button'\n        //   this.setState({ loading: false });\n        // }\n      }\n    });\n\n    _defineProperty(this, \"logInUserAndGetInfo\", newUser => {\n      logger.log(\"LOG IN\", newUser);\n      const router = useRouter();\n      this.props.setUser(newUser); // set user in redux state\n\n      if (router.pathname === \"/\") {\n        Router.push(\"/browse/featured\"); // if there is no page the user wants to go to\n        // then go to the home page\n      } else {\n        // if there is a page the user wants to go to then just send them there\n        Router.push();\n      }\n    });\n  }\n\n  componentDidMount() {\n    // console.log(this.props, \"cdm\");\n    axios.interceptors.response.use(response => {\n      return response;\n    }, error => {\n      // console.log(error.response, \"error\");\n      const originalRequest = error.config;\n\n      if (error.response.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        console.log(\"Error happened\");\n        console.log(error); // return window.location.reload();\n\n        return axios.post(\"http://localhost:3000/refresh\", {\n          data: JSON.stringify({\n            refresh_token: localStorage.getItem(\"react-spotify-refresh-token\")\n          })\n        }).then(res => {\n          // console.log(this, \"props\");\n          if (res.status === 200) {\n            // 1) put token to LocalStorage\n            localStorage.setItem(\"react-spotify-access-token\", res.data.access_token);\n            logger.log(\"New token\", res.data);\n            logger.log(originalRequest);\n            this.props.setUser({\n              access_token: res.data.access_token\n            }); // // 2) Change Authorization header\n            // axios.defaults.headers.common['Authorization'] =\n            //   'Bearer ' + localStorageService.getAccessToken();\n            // 3) return originalRequest object with Axios.\n\n            return axios(originalRequest);\n          }\n        });\n      }\n    });\n    let params = this.getHashParams();\n    this.handleHashParams(params);\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    logger.log(hashParams, \"hashParams\");\n    return hashParams;\n  }\n\n  render() {\n    // console.log(this.props, \"user\");\n    return __jsx(\"div\", {\n      className: \"layout\"\n    }, __jsx(SpotifyApiAxiosContext.Provider, {\n      value: axios\n    }, __jsx(SpotifyApiContext.Provider, null, __jsx(Sidebar, null), __jsx(Content, null), __jsx(Player, null))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.current_user,\n    backgroundImage: state.backgroundImage\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUser: user => dispatch({\n      type: actionTypes.SET_USER,\n      user\n    }),\n    fetchRecentlyPlayed: options => dispatch(actionTypes.fetchRecentlyPlayed(options))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Index));","map":{"version":3,"sources":["D:/1-Project/soundify-web/pages/index.js"],"names":["React","Component","Router","withRouter","useRouter","Sidebar","Player","Content","actionTypes","axios","connect","SpotifyApiContext","SpotifyApiAxiosContext","logger","menuList","Index","params","log","currentAccessToken","localStorage","getItem","access_token","metadata","get","headers","Authorization","console","newUser","router","props","setUser","pathname","push","componentDidMount","interceptors","response","use","error","originalRequest","config","status","_retry","post","data","JSON","stringify","refresh_token","then","res","setItem","getHashParams","handleHashParams","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","render","mapStateToProps","state","user","current_user","backgroundImage","mapDispatchToProps","dispatch","type","SET_USER","fetchRecentlyPlayed","options"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Router, { withRouter, useRouter } from \"next/router\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport Player from \"../components/Player\";\r\nimport Content from \"../components/Content\";\r\nimport * as actionTypes from \"../redux/action\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { SpotifyApiContext, SpotifyApiAxiosContext } from \"react-spotify-api\";\r\nimport { logger } from \"../utils\";\r\nconst menuList = [\"Home\", \"Playlist\", \"Album\", \"Artist\", \"Search\"];\r\nclass Index extends Component {\r\n  state = {};\r\n  componentDidMount() {\r\n    // console.log(this.props, \"cdm\");\r\n    axios.interceptors.response.use(\r\n      (response) => {\r\n        return response;\r\n      },\r\n      (error) => {\r\n        // console.log(error.response, \"error\");\r\n        const originalRequest = error.config;\r\n        if (error.response.status === 401 && !originalRequest._retry) {\r\n          originalRequest._retry = true;\r\n          console.log(\"Error happened\");\r\n          console.log(error);\r\n          // return window.location.reload();\r\n          return axios\r\n            .post(\"http://localhost:3000/refresh\", {\r\n              data: JSON.stringify({\r\n                refresh_token: localStorage.getItem(\r\n                  \"react-spotify-refresh-token\"\r\n                ),\r\n              }),\r\n            })\r\n            .then((res) => {\r\n              // console.log(this, \"props\");\r\n              if (res.status === 200) {\r\n                // 1) put token to LocalStorage\r\n                localStorage.setItem(\r\n                  \"react-spotify-access-token\",\r\n                  res.data.access_token\r\n                );\r\n                logger.log(\"New token\", res.data);\r\n                logger.log(originalRequest);\r\n                this.props.setUser({ access_token: res.data.access_token });\r\n\r\n                // // 2) Change Authorization header\r\n                // axios.defaults.headers.common['Authorization'] =\r\n                //   'Bearer ' + localStorageService.getAccessToken();\r\n\r\n                // 3) return originalRequest object with Axios.\r\n                return axios(originalRequest);\r\n              }\r\n            });\r\n        }\r\n      }\r\n    );\r\n\r\n    let params = this.getHashParams();\r\n    this.handleHashParams(params);\r\n  }\r\n  handleHashParams = async (params) => {\r\n    logger.log(\"Params\", params);\r\n    // If access token doesn't exist in has params, try to take it from local storage\r\n    if (!(\"access_token\" in params)) {\r\n      const currentAccessToken = localStorage.getItem(\r\n        \"react-spotify-access-token\"\r\n      );\r\n\r\n      if (currentAccessToken) {\r\n        params.access_token = currentAccessToken;\r\n      }\r\n    }\r\n    logger.log(\"Params after\", params);\r\n    if (\"access_token\" in params) {\r\n      logger.log(\"access_token\" in params);\r\n      const metadata = await axios.get(\"https://api.spotify.com/v1/me\", {\r\n        headers: {\r\n          Authorization: `Bearer ${params.access_token}`,\r\n        },\r\n      });\r\n      console.log(metadata, \"metadata\");\r\n      //       localStorage.setItem(\r\n      //         \"react-spotify-access-token\",\r\n      //         params.access_token\r\n      //       );\r\n      //       if (params.refresh_token) {\r\n      //         localStorage.setItem(\r\n      //           \"react-spotify-refresh-token\",\r\n      //           params.refresh_token\r\n      //         );\r\n      //       }\r\n      //       let newUser = {\r\n      //         access_token: params.access_token,\r\n      //         displayName: data.display_name,\r\n      //         email: data.email,\r\n      //         id: data.id,\r\n      //         type: data.type,\r\n      //         country: data.country,\r\n      //         product: data.product,\r\n      //       };\r\n      //       logger.log(this.props.setUser);\r\n      //       this.setState({ loading: false });\r\n      //       this.logInUserAndGetInfo(newUser);\r\n      //       this.props.fetchRecentlyPlayed({ limit: 12 });\r\n      //     })\r\n      //     .catch((err) => {\r\n      //       console.log(err, \"fgjxfjxf\");\r\n      //       // 401 = Unauthorized - the access token is incorrect (expired)\r\n      //       if (true) {\r\n      //         // Check if refresh token exists\r\n      //         const refreshToken = localStorage.getItem(\r\n      //           \"react-spotify-refresh-token\"\r\n      //         );\r\n      //         if (refreshToken) {\r\n      //           // Send refresh token to server to acquire a new access token\r\n      //           axios\r\n      //             .post(\"http://localhost:3000/refresh\", {\r\n      //               data: JSON.stringify({\r\n      //                 refresh_token: refreshToken,\r\n      //               }),\r\n      //             })\r\n      //             .then((res) => {\r\n      //               logger.log(\"Refresh token response -\", res.data);\r\n      //               axios\r\n      //                 .get(\"https://api.spotify.com/v1/me\", {\r\n      //                   headers: {\r\n      //                     Authorization: `Bearer ${res.data.access_token}`,\r\n      //                   },\r\n      //                 })\r\n      //                 .then(({ data }) => {\r\n      //                   localStorage.setItem(\r\n      //                     \"react-spotify-access-token\",\r\n      //                     res.data.access_token\r\n      //                   );\r\n\r\n      //                   let newUser = {\r\n      //                     access_token: res.data.access_token,\r\n      //                     displayName: data.display_name,\r\n      //                     email: data.email,\r\n      //                     id: data.id,\r\n      //                     type: data.type,\r\n      //                     country: data.country,\r\n      //                     product: data.product,\r\n      //                   };\r\n      //                   this.logInUserAndGetInfo(newUser);\r\n      //                   this.props.fetchRecentlyPlayed({ limit: 12 });\r\n      //                 });\r\n      //             })\r\n      //             .catch((e) => {\r\n      //               logger.log(\"Refresh token error -\", e);\r\n      //             })\r\n      //             .finally(() => {\r\n      //               this.setState({ loading: false });\r\n      //             });\r\n      //         } else {\r\n      //           // Refresh token doesn't exist, the user is shown a 'login with Spotify button'\r\n      //           this.setState({ loading: false });\r\n      //         }\r\n      //       }\r\n      //     });\r\n      // } else {\r\n      //   // The user is shown a 'login with Spotify button'\r\n      //   this.setState({ loading: false });\r\n      // }\r\n    }\r\n  };\r\n  logInUserAndGetInfo = (newUser) => {\r\n    logger.log(\"LOG IN\", newUser);\r\n    const router = useRouter();\r\n    this.props.setUser(newUser); // set user in redux state\r\n    if (router.pathname === \"/\") {\r\n      Router.push(\"/browse/featured\"); // if there is no page the user wants to go to\r\n      // then go to the home page\r\n    } else {\r\n      // if there is a page the user wants to go to then just send them there\r\n      Router.push();\r\n    }\r\n  };\r\n\r\n  getHashParams() {\r\n    var hashParams = {};\r\n    var e,\r\n      r = /([^&;=]+)=?([^&;]*)/g,\r\n      q = window.location.hash.substring(1);\r\n    while ((e = r.exec(q))) {\r\n      hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    }\r\n    logger.log(hashParams, \"hashParams\");\r\n    return hashParams;\r\n  }\r\n  render() {\r\n    // console.log(this.props, \"user\");\r\n    return (\r\n      <div className=\"layout\">\r\n        <SpotifyApiAxiosContext.Provider value={axios}>\r\n          <SpotifyApiContext.Provider\r\n          // value={this.props.user.access_token}\r\n          >\r\n            <Sidebar />\r\n            <Content />\r\n            <Player />\r\n          </SpotifyApiContext.Provider>\r\n        </SpotifyApiAxiosContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.current_user,\r\n    backgroundImage: state.backgroundImage,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => dispatch({ type: actionTypes.SET_USER, user }),\r\n    fetchRecentlyPlayed: (options) =>\r\n      dispatch(actionTypes.fetchRecentlyPlayed(options)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Index));\r\n"]},"metadata":{},"sourceType":"module"}