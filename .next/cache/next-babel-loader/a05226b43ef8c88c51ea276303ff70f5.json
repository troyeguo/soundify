{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { withRouter } from \"next/router\";\nimport styles from \"../styles/player.module.css\";\nimport { connect } from \"react-redux\";\nimport * as actionTypes from \"../redux/action\";\nimport $axios from \"../$axios\";\nimport LoadingPage from \"./LoadingPage\";\nimport { AudioAnimation, AudioStop } from \"./AudioAnimation\";\n\nclass Player extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"checkForPlayer\", () => {\n      if (window.Spotify) {\n        console.log(\"checkForPlayer\");\n        clearInterval(this.playerCheckInterval);\n        this.player = new window.Spotify.Player({\n          name: \"Soundify\",\n          getOAuthToken: cb => {\n            cb(this.state.token);\n          }\n        });\n      }\n\n      if (this.player) {\n        this.createEventHandlers();\n        this.player.connect();\n      }\n    });\n\n    _defineProperty(this, \"createEventHandlers\", () => {\n      this.player.on(\"initialization_error\", e => {\n        console.error(\"Initialization error \", e);\n        this.setState({\n          player_init_error: true\n        });\n      });\n      this.player.on(\"authentication_error\", e => console.error(\"Authentication error \", e));\n      this.player.on(\"account_error\", e => console.error(\"Account error \", e));\n      this.player.on(\"playback_error\", e => console.error(\"Playback error \", e));\n      this.player.on(\"player_state_changed\", state => {\n        if (state) {\n          // console.log(\"player state changed\", state);\n          let {\n            duration,\n            position\n          } = state; // duration = 100%\n          // position = ?%\n\n          let val = position * 100 / duration;\n          this.setState({\n            playingInfo: state,\n            playing: !state.paused,\n            positionSliderValue: val\n          }); // Music started playing, start the position interval\n\n          if (!this.props.isPlaying && !state.paused) {\n            this.positionCheckInterval = setInterval(() => {\n              this.checkChangePosition();\n            }, 1000);\n          } // Music stopped playing, clear the position interval\n\n\n          if (this.props.isPlaying && state.paused) {\n            clearInterval(this.positionCheckInterval);\n          }\n\n          if (this.props.isPlaying === state.paused) {\n            this.props.setIsPlaying(!state.paused);\n          }\n\n          if (!this.props.currentlyPlaying || this.props.currentlyPlaying !== state.track_window.current_track.name) {\n            let {\n              current_track\n            } = state.track_window;\n            this.props.setCurrentlyPlaying(current_track.name);\n          }\n        }\n      });\n      this.player.on(\"ready\", data => {\n        let {\n          device_id\n        } = data;\n        console.log(\"PLAYER CONNECTED \", device_id); // await this.setState({ deviceId: device_id });\n\n        this.setState({\n          deviceId: device_id\n        }, () => {\n          this.transferPlaybackHere();\n        });\n        let newUser = localStorage.getItem(\"newUser\"); // console.log(newUser, \"newUser\");\n\n        if (newUser) {\n          this.setState({\n            user: JSON.parse(newUser)\n          });\n        }\n\n        this.player.getVolume().then(vol => {\n          let volume = vol * 100;\n          this.setState({\n            volumeSliderValue: volume\n          });\n        });\n      });\n    });\n\n    _defineProperty(this, \"checkChangePosition\", () => {\n      this.player.getCurrentState().then(state => {\n        if (state) {\n          let {\n            duration,\n            position\n          } = state; // duration = 100%\n          // position = ?%\n\n          let val = position * 100 / duration;\n\n          if (val !== this.state.positionSliderValue) {\n            this.setState({\n              positionSliderValue: val\n            });\n          }\n\n          let positionStamp = this.milisToMinutesAndSeconds(state.position);\n          let durationStamp = this.milisToMinutesAndSeconds(state.duration);\n          this.setState({\n            positionStamp,\n            durationStamp\n          });\n        }\n      });\n    });\n\n    _defineProperty(this, \"transferPlaybackHere\", () => {\n      // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\n      // for normal users they have to go in the spotify app/website and change the device manually\n      // user type is stored in redux state => this.props.user.type\n      const {\n        deviceId\n      } = this.state;\n      fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${this.state.token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          device_ids: [deviceId],\n          play: false\n        })\n      }).then(res => {\n        // console.log(\"status\", res);\n        if (res.status === 204) {\n          $axios.get(\"https://api.spotify.com/v1/me/player\").then(() => {\n            // Transferred playback successfully, get current timestamp\n            this.checkChangePosition();\n          }).catch(err => {\n            console.log(err);\n          });\n        }\n      }).catch(e => console.error(e)); // console.log('Hello', this.props);\n      // if (this.props.user.product === 'premium') {\n      // } else {\n      //   console.log(\n      //     'Cannot transfer playback automatically because you are not a premium user.'\n      //   );\n      // }\n    });\n\n    _defineProperty(this, \"onPrevClick\", () => {\n      this.player.previousTrack();\n    });\n\n    _defineProperty(this, \"onPlayClick\", () => {\n      this.player.togglePlay();\n    });\n\n    _defineProperty(this, \"onNextClick\", () => {\n      this.player.nextTrack();\n    });\n\n    _defineProperty(this, \"milisToMinutesAndSeconds\", mil => {\n      let minutes = Math.floor(mil / 60000);\n      let seconds = (mil % 60000 / 1000).toFixed(0);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    });\n\n    this.state = {\n      deviceId: null,\n      playingInfo: null,\n      playing: false,\n      positionSliderValue: 50,\n      volumeSliderValue: 50,\n      positionStamp: \"00:00\",\n      durationStamp: \"00:00\",\n      player_init_error: false,\n      user: null,\n      noConnection: false\n    };\n    this.player = null;\n    this.playerCheckInterval = null;\n    this.positionCheckInterval = null;\n  }\n\n  componentDidMount() {\n    let count = 0;\n    let countInterval = setInterval(() => {\n      count++;\n\n      if (count > 15) {\n        this.setState({\n          noConnection: true\n        });\n        clearInterval(countInterval);\n      }\n    }, 1000);\n    this.setState({\n      token: localStorage.getItem(\"react-spotify-access-token\")\n    });\n    let newUser = localStorage.getItem(\"newUser\"); // console.log(newUser, \"newUser\");\n\n    if (newUser) {\n      this.setState({\n        user: JSON.parse(newUser)\n      });\n    } // console.log(Spotify, \"etata\");\n\n\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      console.log(\"onready\");\n      window.Spotify = Spotify;\n    }; // console.log(window.Spotify, \"etata\");\n\n\n    this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n  }\n\n  render() {\n    // console.log(this.state.playingInfo, this.state.user, \"this.state.user\");\n    if (this.state.noConnection) {\n      return __jsx(\"div\", {\n        className: styles.player\n      }, __jsx(\"div\", {\n        className: styles.loadingContainer\n      }, __jsx(\"div\", {\n        className: styles.loadingText\n      }, \"This takes longer than expected, first make sure your internet connection to spotify is fine, than please go to spotify and select Soundify manually in your spotify connect devices\")));\n    }\n\n    if (!this.state.playingInfo || !this.state.user) {\n      return __jsx(\"div\", {\n        className: styles.player\n      }, __jsx(\"div\", {\n        className: styles.loadingContainer\n      }, __jsx(\"div\", {\n        style: {\n          position: \"relative\",\n          left: \"70px\",\n          bottom: \"130px\"\n        }\n      }, __jsx(LoadingPage, null)), __jsx(\"div\", {\n        className: styles.loadingText\n      }, \"Connecting to Spotify Player...\")));\n    } // console.log(this.state.playingInfo);\n\n\n    return __jsx(\"div\", {\n      className: styles.player\n    }, __jsx(\"div\", {\n      className: styles.playerHeader\n    }, __jsx(\"div\", null, __jsx(\"img\", {\n      className: styles.avatar,\n      src: this.state.user.avatar,\n      alt: \"\"\n    }), __jsx(\"span\", {\n      className: styles.nickname\n    }, this.state.user.displayName))), __jsx(\"div\", {\n      className: styles.playerCoverContainer\n    }, this.state.playing ? __jsx(\"img\", {\n      className: styles.playerCoverAnimation,\n      src: this.state.playingInfo.track_window.current_track.album.images[0].url,\n      alt: \"\"\n    }) : __jsx(\"img\", {\n      className: styles.playerCover,\n      src: this.state.playingInfo.track_window.current_track.album.images[0].url,\n      alt: \"\"\n    })), __jsx(\"div\", {\n      className: styles.musicInfo\n    }, __jsx(\"div\", {\n      className: styles.songName\n    }, this.state.playingInfo.track_window.current_track.name), __jsx(\"div\", {\n      className: styles.artistName\n    }, this.state.playingInfo.track_window.current_track.artists[0].name)), __jsx(\"div\", {\n      className: styles.playerPanel\n    }, __jsx(\"img\", {\n      src: \"/icons/prev.svg\",\n      alt: \"\",\n      onClick: this.onPrevClick\n    }), this.state.playing ? __jsx(\"img\", {\n      src: \"/icons/playing.svg\",\n      alt: \"\",\n      style: {\n        width: \"45px\"\n      },\n      onClick: this.onPlayClick\n    }) : __jsx(\"img\", {\n      src: \"/icons/play.svg\",\n      alt: \"\",\n      style: {\n        width: \"45px\"\n      },\n      onClick: this.onPlayClick\n    }), __jsx(\"img\", {\n      src: \"/icons/next.svg\",\n      alt: \"\",\n      onClick: this.onNextClick\n    })), __jsx(\"div\", {\n      className: styles.playerNext\n    }, this.state.playing ? __jsx(AudioAnimation, null) : __jsx(AudioStop, null)), __jsx(\"div\", {\n      className: styles.line\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    recently_played: state.recently_played,\n    user: state.current_user,\n    playNow: state.play_now,\n    currentlyPlaying: state.currently_playing,\n    isPlaying: state.isPlaying\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUser: user => dispatch({\n      type: actionTypes.SET_USER,\n      user\n    }),\n    fetchRecentlyPlayed: options => dispatch(actionTypes.fetchRecentlyPlayed(options)),\n    resetPlayNow: () => dispatch({\n      type: actionTypes.RESET_PLAY_NOW\n    }),\n    setCurrentlyPlaying: song => dispatch({\n      type: actionTypes.SET_CURRENTLY_PLAYING,\n      song\n    }),\n    setIsPlaying: isPlaying => dispatch({\n      type: actionTypes.SET_IS_PLAYING,\n      isPlaying\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));","map":{"version":3,"sources":["D:/1-Project/soundify-web/components/Player.js"],"names":["React","Component","withRouter","styles","connect","actionTypes","$axios","LoadingPage","AudioAnimation","AudioStop","Player","constructor","props","window","Spotify","console","log","clearInterval","playerCheckInterval","player","name","getOAuthToken","cb","state","token","createEventHandlers","on","e","error","setState","player_init_error","duration","position","val","playingInfo","playing","paused","positionSliderValue","isPlaying","positionCheckInterval","setInterval","checkChangePosition","setIsPlaying","currentlyPlaying","track_window","current_track","setCurrentlyPlaying","data","device_id","deviceId","transferPlaybackHere","newUser","localStorage","getItem","user","JSON","parse","getVolume","then","vol","volume","volumeSliderValue","getCurrentState","positionStamp","milisToMinutesAndSeconds","durationStamp","fetch","method","headers","Authorization","body","stringify","device_ids","play","res","status","get","catch","err","previousTrack","togglePlay","nextTrack","mil","minutes","Math","floor","seconds","toFixed","noConnection","componentDidMount","count","countInterval","onSpotifyWebPlaybackSDKReady","checkForPlayer","render","loadingContainer","loadingText","left","bottom","playerHeader","avatar","nickname","displayName","playerCoverContainer","playerCoverAnimation","album","images","url","playerCover","musicInfo","songName","artistName","artists","playerPanel","onPrevClick","width","onPlayClick","onNextClick","playerNext","line","mapStateToProps","recently_played","current_user","playNow","play_now","currently_playing","mapDispatchToProps","dispatch","setUser","type","SET_USER","fetchRecentlyPlayed","options","resetPlayNow","RESET_PLAY_NOW","song","SET_CURRENTLY_PLAYING","SET_IS_PLAYING"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"next/router\";\r\nimport styles from \"../styles/player.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionTypes from \"../redux/action\";\r\nimport $axios from \"../$axios\";\r\nimport LoadingPage from \"./LoadingPage\";\r\nimport { AudioAnimation, AudioStop } from \"./AudioAnimation\";\r\nclass Player extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      deviceId: null,\r\n      playingInfo: null,\r\n      playing: false,\r\n      positionSliderValue: 50,\r\n      volumeSliderValue: 50,\r\n      positionStamp: \"00:00\",\r\n      durationStamp: \"00:00\",\r\n      player_init_error: false,\r\n      user: null,\r\n      noConnection: false,\r\n    };\r\n\r\n    this.player = null;\r\n    this.playerCheckInterval = null;\r\n    this.positionCheckInterval = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    let count = 0;\r\n    let countInterval = setInterval(() => {\r\n      count++;\r\n      if (count > 15) {\r\n        this.setState({ noConnection: true });\r\n        clearInterval(countInterval);\r\n      }\r\n    }, 1000);\r\n    this.setState({\r\n      token: localStorage.getItem(\"react-spotify-access-token\"),\r\n    });\r\n    let newUser = localStorage.getItem(\"newUser\");\r\n    // console.log(newUser, \"newUser\");\r\n    if (newUser) {\r\n      this.setState({ user: JSON.parse(newUser) });\r\n    }\r\n\r\n    // console.log(Spotify, \"etata\");\r\n    window.onSpotifyWebPlaybackSDKReady = () => {\r\n      console.log(\"onready\");\r\n      window.Spotify = Spotify;\r\n    };\r\n    // console.log(window.Spotify, \"etata\");\r\n    this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\r\n  }\r\n  checkForPlayer = () => {\r\n    if (window.Spotify) {\r\n      console.log(\"checkForPlayer\");\r\n      clearInterval(this.playerCheckInterval);\r\n      this.player = new window.Spotify.Player({\r\n        name: \"Soundify\",\r\n        getOAuthToken: (cb) => {\r\n          cb(this.state.token);\r\n        },\r\n      });\r\n    }\r\n\r\n    if (this.player) {\r\n      this.createEventHandlers();\r\n\r\n      this.player.connect();\r\n    }\r\n  };\r\n  createEventHandlers = () => {\r\n    this.player.on(\"initialization_error\", (e) => {\r\n      console.error(\"Initialization error \", e);\r\n      this.setState({ player_init_error: true });\r\n    });\r\n    this.player.on(\"authentication_error\", (e) =>\r\n      console.error(\"Authentication error \", e)\r\n    );\r\n    this.player.on(\"account_error\", (e) => console.error(\"Account error \", e));\r\n    this.player.on(\"playback_error\", (e) =>\r\n      console.error(\"Playback error \", e)\r\n    );\r\n\r\n    this.player.on(\"player_state_changed\", (state) => {\r\n      if (state) {\r\n        // console.log(\"player state changed\", state);\r\n        let { duration, position } = state;\r\n        // duration = 100%\r\n        // position = ?%\r\n        let val = (position * 100) / duration;\r\n        this.setState({\r\n          playingInfo: state,\r\n          playing: !state.paused,\r\n          positionSliderValue: val,\r\n        });\r\n\r\n        // Music started playing, start the position interval\r\n        if (!this.props.isPlaying && !state.paused) {\r\n          this.positionCheckInterval = setInterval(() => {\r\n            this.checkChangePosition();\r\n          }, 1000);\r\n        }\r\n\r\n        // Music stopped playing, clear the position interval\r\n        if (this.props.isPlaying && state.paused) {\r\n          clearInterval(this.positionCheckInterval);\r\n        }\r\n\r\n        if (this.props.isPlaying === state.paused) {\r\n          this.props.setIsPlaying(!state.paused);\r\n        }\r\n\r\n        if (\r\n          !this.props.currentlyPlaying ||\r\n          this.props.currentlyPlaying !== state.track_window.current_track.name\r\n        ) {\r\n          let { current_track } = state.track_window;\r\n          this.props.setCurrentlyPlaying(current_track.name);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.player.on(\"ready\", (data) => {\r\n      let { device_id } = data;\r\n      console.log(\"PLAYER CONNECTED \", device_id);\r\n      // await this.setState({ deviceId: device_id });\r\n      this.setState({ deviceId: device_id }, () => {\r\n        this.transferPlaybackHere();\r\n      });\r\n      let newUser = localStorage.getItem(\"newUser\");\r\n      // console.log(newUser, \"newUser\");\r\n      if (newUser) {\r\n        this.setState({ user: JSON.parse(newUser) });\r\n      }\r\n      this.player.getVolume().then((vol) => {\r\n        let volume = vol * 100;\r\n        this.setState({ volumeSliderValue: volume });\r\n      });\r\n    });\r\n  };\r\n  checkChangePosition = () => {\r\n    this.player.getCurrentState().then((state) => {\r\n      if (state) {\r\n        let { duration, position } = state;\r\n        // duration = 100%\r\n        // position = ?%\r\n        let val = (position * 100) / duration;\r\n        if (val !== this.state.positionSliderValue) {\r\n          this.setState({\r\n            positionSliderValue: val,\r\n          });\r\n        }\r\n\r\n        let positionStamp = this.milisToMinutesAndSeconds(state.position);\r\n        let durationStamp = this.milisToMinutesAndSeconds(state.duration);\r\n        this.setState({ positionStamp, durationStamp });\r\n      }\r\n    });\r\n  };\r\n  transferPlaybackHere = () => {\r\n    // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\r\n    // for normal users they have to go in the spotify app/website and change the device manually\r\n    // user type is stored in redux state => this.props.user.type\r\n    const { deviceId } = this.state;\r\n    fetch(\"https://api.spotify.com/v1/me/player\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Authorization: `Bearer ${this.state.token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        device_ids: [deviceId],\r\n        play: false,\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        // console.log(\"status\", res);\r\n        if (res.status === 204) {\r\n          $axios\r\n            .get(\"https://api.spotify.com/v1/me/player\")\r\n            .then(() => {\r\n              // Transferred playback successfully, get current timestamp\r\n              this.checkChangePosition();\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n\r\n    // console.log('Hello', this.props);\r\n    // if (this.props.user.product === 'premium') {\r\n    // } else {\r\n    //   console.log(\r\n    //     'Cannot transfer playback automatically because you are not a premium user.'\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  onPrevClick = () => {\r\n    this.player.previousTrack();\r\n  };\r\n\r\n  onPlayClick = () => {\r\n    this.player.togglePlay();\r\n  };\r\n\r\n  onNextClick = () => {\r\n    this.player.nextTrack();\r\n  };\r\n  milisToMinutesAndSeconds = (mil) => {\r\n    let minutes = Math.floor(mil / 60000);\r\n    let seconds = ((mil % 60000) / 1000).toFixed(0);\r\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n  };\r\n\r\n  render() {\r\n    // console.log(this.state.playingInfo, this.state.user, \"this.state.user\");\r\n    if (this.state.noConnection) {\r\n      return (\r\n        <div className={styles.player}>\r\n          <div className={styles.loadingContainer}>\r\n            <div className={styles.loadingText}>\r\n              This takes longer than expected, first make sure your internet\r\n              connection to spotify is fine, than please go to spotify and\r\n              select Soundify manually in your spotify connect devices\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (!this.state.playingInfo || !this.state.user) {\r\n      return (\r\n        <div className={styles.player}>\r\n          <div className={styles.loadingContainer}>\r\n            <div\r\n              style={{ position: \"relative\", left: \"70px\", bottom: \"130px\" }}\r\n            >\r\n              <LoadingPage />\r\n            </div>\r\n\r\n            <div className={styles.loadingText}>\r\n              Connecting to Spotify Player...\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    // console.log(this.state.playingInfo);\r\n\r\n    return (\r\n      <div className={styles.player}>\r\n        <div className={styles.playerHeader}>\r\n          <div>\r\n            <img\r\n              className={styles.avatar}\r\n              src={this.state.user.avatar}\r\n              alt=\"\"\r\n            />\r\n            <span className={styles.nickname}>\r\n              {this.state.user.displayName}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className={styles.playerCoverContainer}>\r\n          {this.state.playing ? (\r\n            <img\r\n              className={styles.playerCoverAnimation}\r\n              src={\r\n                this.state.playingInfo.track_window.current_track.album\r\n                  .images[0].url\r\n              }\r\n              alt=\"\"\r\n            />\r\n          ) : (\r\n            <img\r\n              className={styles.playerCover}\r\n              src={\r\n                this.state.playingInfo.track_window.current_track.album\r\n                  .images[0].url\r\n              }\r\n              alt=\"\"\r\n            />\r\n          )}\r\n        </div>\r\n        <div className={styles.musicInfo}>\r\n          <div className={styles.songName}>\r\n            {this.state.playingInfo.track_window.current_track.name}\r\n          </div>\r\n          <div className={styles.artistName}>\r\n            {this.state.playingInfo.track_window.current_track.artists[0].name}\r\n          </div>\r\n        </div>\r\n        <div className={styles.playerPanel}>\r\n          <img src=\"/icons/prev.svg\" alt=\"\" onClick={this.onPrevClick} />\r\n          {this.state.playing ? (\r\n            <img\r\n              src=\"/icons/playing.svg\"\r\n              alt=\"\"\r\n              style={{ width: \"45px\" }}\r\n              onClick={this.onPlayClick}\r\n            />\r\n          ) : (\r\n            <img\r\n              src=\"/icons/play.svg\"\r\n              alt=\"\"\r\n              style={{ width: \"45px\" }}\r\n              onClick={this.onPlayClick}\r\n            />\r\n          )}\r\n          <img src=\"/icons/next.svg\" alt=\"\" onClick={this.onNextClick} />\r\n        </div>\r\n\r\n        <div className={styles.playerNext}>\r\n          {this.state.playing ? <AudioAnimation /> : <AudioStop />}\r\n        </div>\r\n        <div className={styles.line}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    recently_played: state.recently_played,\r\n    user: state.current_user,\r\n    playNow: state.play_now,\r\n    currentlyPlaying: state.currently_playing,\r\n    isPlaying: state.isPlaying,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => dispatch({ type: actionTypes.SET_USER, user }),\r\n    fetchRecentlyPlayed: (options) =>\r\n      dispatch(actionTypes.fetchRecentlyPlayed(options)),\r\n    resetPlayNow: () => dispatch({ type: actionTypes.RESET_PLAY_NOW }),\r\n    setCurrentlyPlaying: (song) =>\r\n      dispatch({ type: actionTypes.SET_CURRENTLY_PLAYING, song }),\r\n    setIsPlaying: (isPlaying) =>\r\n      dispatch({ type: actionTypes.SET_IS_PLAYING, isPlaying }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));\r\n"]},"metadata":{},"sourceType":"module"}