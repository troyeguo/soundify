{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Router, { withRouter, useRouter } from \"next/router\";\nimport Sidebar from \"../components/Sidebar\";\nimport Player from \"../components/Player\";\nimport Content from \"../components/Content\";\nimport * as actionTypes from \"../redux/action\";\nimport $axios from \"../$axios\";\nimport { connect } from \"react-redux\";\nimport { SpotifyApiContext, SpotifyApiAxiosContext } from \"react-spotify-api\";\nvar menuList = [\"Home\", \"Playlist\", \"Album\", \"Artist\", \"Search\"];\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  var _super = _createSuper(Index);\n\n  function Index() {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"logInUserAndGetInfo\", function (newUser) {\n      console.log(\"LOG IN\", newUser);\n      var router = useRouter();\n\n      _this.props.setUser(newUser); // set user in redux state\n\n\n      if (router.pathname === \"/\") {\n        Router.push(\"/browse/featured\"); // if there is no page the user wants to go to\n        // then go to the home page\n      } else {\n        // if there is a page the user wants to go to then just send them there\n        Router.push();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // console.log(this.props, \"cdm\");\n      axios.interceptors.response.use(function (response) {\n        return response;\n      }, function (error) {\n        // console.log(error.response, \"error\");\n        var originalRequest = error.config;\n\n        if (error.response.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n          console.log(\"Error happened\");\n          console.log(error); // return window.location.reload();\n\n          return axios.post(\"http://localhost:3000/refresh\", {\n            data: JSON.stringify({\n              refresh_token: localStorage.getItem(\"react-spotify-refresh-token\")\n            })\n          }).then(function (res) {\n            // console.log(this, \"props\");\n            if (res.status === 200) {\n              // 1) put token to LocalStorage\n              localStorage.setItem(\"react-spotify-access-token\", res.data.access_token); // console.log(\"New token\", res.data);\n              // console.log(originalRequest);\n\n              _this2.props.setUser({\n                access_token: res.data.access_token\n              }); // // 2) Change Authorization header\n              // axios.defaults.headers.common['Authorization'] =\n              //   'Bearer ' + localStorageService.getAccessToken();\n              // 3) return originalRequest object with Axios.\n\n\n              return axios(originalRequest);\n            }\n          })[\"catch\"](function (error) {\n            console.log(error, \"error\");\n          });\n        }\n      });\n      var params = this.getHashParams();\n      console.log(\"Params\", params); // If access token doesn't exist in has params, try to take it from local storage\n\n      if (!(\"access_token\" in params)) {\n        var currentAccessToken = localStorage.getItem(\"react-spotify-access-token\");\n\n        if (currentAccessToken) {\n          params.access_token = currentAccessToken;\n        }\n      }\n\n      console.log(\"Params after\", params);\n\n      if (params.access_token !== \"undefined\") {\n        console.log(params.access_token === \"undefined\", \"params.access_token\");\n        axios.get(\"https://api.spotify.com/v1/me\", {\n          headers: {\n            Authorization: \"Bearer \".concat(params.access_token)\n          }\n        }).then(function (_ref) {\n          var data = _ref.data;\n          localStorage.setItem(\"react-spotify-access-token\", params.access_token);\n\n          if (params.refresh_token) {\n            localStorage.setItem(\"react-spotify-refresh-token\", params.refresh_token);\n          }\n\n          var newUser = {\n            access_token: params.access_token,\n            displayName: data.display_name,\n            email: data.email,\n            id: data.id,\n            type: data.type,\n            country: data.country,\n            product: data.product\n          };\n          console.log(_this2.props.setUser);\n\n          _this2.setState({\n            loading: false\n          });\n\n          _this2.logInUserAndGetInfo(newUser);\n\n          _this2.props.fetchRecentlyPlayed({\n            limit: 12\n          });\n        })[\"catch\"](function (err) {\n          console.log(err.response, \"fgjxfjxf\"); // 401 = Unauthorized - the access token is incorrect (expired)\n\n          if (err.response.status === 401) {\n            // Check if refresh token exists\n            var refreshToken = localStorage.getItem(\"react-spotify-refresh-token\");\n\n            if (refreshToken) {\n              // Send refresh token to server to acquire a new access token\n              axios.post(\"http://localhost:3000/refresh\", {\n                data: JSON.stringify({\n                  refresh_token: refreshToken\n                })\n              }).then(function (res) {\n                console.log(\"Refresh token response -\", res.data);\n                axios.get(\"https://api.spotify.com/v1/me\", {\n                  headers: {\n                    Authorization: \"Bearer \".concat(res.data.access_token)\n                  }\n                }).then(function (_ref2) {\n                  var data = _ref2.data;\n                  localStorage.setItem(\"react-spotify-access-token\", res.data.access_token);\n                  var newUser = {\n                    access_token: res.data.access_token,\n                    displayName: data.display_name,\n                    email: data.email,\n                    id: data.id,\n                    type: data.type,\n                    country: data.country,\n                    product: data.product\n                  };\n\n                  _this2.logInUserAndGetInfo(newUser);\n\n                  _this2.props.fetchRecentlyPlayed({\n                    limit: 12\n                  });\n                });\n              })[\"catch\"](function (e) {\n                console.log(\"Refresh token error -\", e);\n              })[\"finally\"](function () {\n                _this2.setState({\n                  loading: false\n                });\n              });\n            } else {\n              // Refresh token doesn't exist, the user is shown a 'login with Spotify button'\n              _this2.setState({\n                loading: false\n              });\n            }\n          }\n        });\n      } else {\n        // The user is shown a 'login with Spotify button'\n        this.setState({\n          loading: false\n        });\n      }\n    }\n  }, {\n    key: \"getHashParams\",\n    value: function getHashParams() {\n      var hashParams = {};\n      var e,\n          r = /([^&;=]+)=?([^&;]*)/g,\n          q = window.location.hash.substring(1);\n\n      while (e = r.exec(q)) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n      }\n\n      console.log(hashParams, \"hashParams\");\n      return hashParams;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // console.log(this.props, \"user\");\n      return __jsx(\"div\", {\n        className: \"layout\"\n      }, __jsx(SpotifyApiAxiosContext.Provider, {\n        value: axios\n      }, __jsx(SpotifyApiContext.Provider, null, __jsx(Sidebar, null), __jsx(Content, null), __jsx(Player, null))));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.current_user,\n    backgroundImage: state.backgroundImage\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setUser: function setUser(user) {\n      return dispatch({\n        type: actionTypes.SET_USER,\n        user: user\n      });\n    },\n    fetchRecentlyPlayed: function fetchRecentlyPlayed(options) {\n      return dispatch(actionTypes.fetchRecentlyPlayed(options));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Index));","map":{"version":3,"sources":["D:/1-Project/soundify-web/pages/index.js"],"names":["React","Component","Router","withRouter","useRouter","Sidebar","Player","Content","actionTypes","$axios","connect","SpotifyApiContext","SpotifyApiAxiosContext","menuList","Index","newUser","console","log","router","props","setUser","pathname","push","axios","interceptors","response","use","error","originalRequest","config","status","_retry","post","data","JSON","stringify","refresh_token","localStorage","getItem","then","res","setItem","access_token","params","getHashParams","currentAccessToken","get","headers","Authorization","displayName","display_name","email","id","type","country","product","setState","loading","logInUserAndGetInfo","fetchRecentlyPlayed","limit","err","refreshToken","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","mapStateToProps","state","user","current_user","backgroundImage","mapDispatchToProps","dispatch","SET_USER","options"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Router, { withRouter, useRouter } from \"next/router\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport Player from \"../components/Player\";\r\nimport Content from \"../components/Content\";\r\nimport * as actionTypes from \"../redux/action\";\r\nimport $axios from \"../$axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { SpotifyApiContext, SpotifyApiAxiosContext } from \"react-spotify-api\";\r\nconst menuList = [\"Home\", \"Playlist\", \"Album\", \"Artist\", \"Search\"];\r\nclass Index extends Component {\r\n  state = {};\r\n  componentDidMount() {\r\n    // console.log(this.props, \"cdm\");\r\n    axios.interceptors.response.use(\r\n      (response) => {\r\n        return response;\r\n      },\r\n      (error) => {\r\n        // console.log(error.response, \"error\");\r\n        const originalRequest = error.config;\r\n        if (error.response.status === 401 && !originalRequest._retry) {\r\n          originalRequest._retry = true;\r\n          console.log(\"Error happened\");\r\n          console.log(error);\r\n          // return window.location.reload();\r\n          return axios\r\n            .post(\"http://localhost:3000/refresh\", {\r\n              data: JSON.stringify({\r\n                refresh_token: localStorage.getItem(\r\n                  \"react-spotify-refresh-token\"\r\n                ),\r\n              }),\r\n            })\r\n            .then((res) => {\r\n              // console.log(this, \"props\");\r\n              if (res.status === 200) {\r\n                // 1) put token to LocalStorage\r\n                localStorage.setItem(\r\n                  \"react-spotify-access-token\",\r\n                  res.data.access_token\r\n                );\r\n                // console.log(\"New token\", res.data);\r\n                // console.log(originalRequest);\r\n                this.props.setUser({ access_token: res.data.access_token });\r\n\r\n                // // 2) Change Authorization header\r\n                // axios.defaults.headers.common['Authorization'] =\r\n                //   'Bearer ' + localStorageService.getAccessToken();\r\n\r\n                // 3) return originalRequest object with Axios.\r\n                return axios(originalRequest);\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.log(error, \"error\");\r\n            });\r\n        }\r\n      }\r\n    );\r\n\r\n    let params = this.getHashParams();\r\n    console.log(\"Params\", params);\r\n    // If access token doesn't exist in has params, try to take it from local storage\r\n    if (!(\"access_token\" in params)) {\r\n      const currentAccessToken = localStorage.getItem(\r\n        \"react-spotify-access-token\"\r\n      );\r\n\r\n      if (currentAccessToken) {\r\n        params.access_token = currentAccessToken;\r\n      }\r\n    }\r\n    console.log(\"Params after\", params);\r\n    if (params.access_token !== \"undefined\") {\r\n      console.log(params.access_token === \"undefined\", \"params.access_token\");\r\n      axios\r\n        .get(\"https://api.spotify.com/v1/me\", {\r\n          headers: {\r\n            Authorization: `Bearer ${params.access_token}`,\r\n          },\r\n        })\r\n        .then(({ data }) => {\r\n          localStorage.setItem(\r\n            \"react-spotify-access-token\",\r\n            params.access_token\r\n          );\r\n          if (params.refresh_token) {\r\n            localStorage.setItem(\r\n              \"react-spotify-refresh-token\",\r\n              params.refresh_token\r\n            );\r\n          }\r\n          let newUser = {\r\n            access_token: params.access_token,\r\n            displayName: data.display_name,\r\n            email: data.email,\r\n            id: data.id,\r\n            type: data.type,\r\n            country: data.country,\r\n            product: data.product,\r\n          };\r\n          console.log(this.props.setUser);\r\n          this.setState({ loading: false });\r\n          this.logInUserAndGetInfo(newUser);\r\n          this.props.fetchRecentlyPlayed({ limit: 12 });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response, \"fgjxfjxf\");\r\n          // 401 = Unauthorized - the access token is incorrect (expired)\r\n          if (err.response.status === 401) {\r\n            // Check if refresh token exists\r\n            const refreshToken = localStorage.getItem(\r\n              \"react-spotify-refresh-token\"\r\n            );\r\n            if (refreshToken) {\r\n              // Send refresh token to server to acquire a new access token\r\n              axios\r\n                .post(\"http://localhost:3000/refresh\", {\r\n                  data: JSON.stringify({\r\n                    refresh_token: refreshToken,\r\n                  }),\r\n                })\r\n                .then((res) => {\r\n                  console.log(\"Refresh token response -\", res.data);\r\n                  axios\r\n                    .get(\"https://api.spotify.com/v1/me\", {\r\n                      headers: {\r\n                        Authorization: `Bearer ${res.data.access_token}`,\r\n                      },\r\n                    })\r\n                    .then(({ data }) => {\r\n                      localStorage.setItem(\r\n                        \"react-spotify-access-token\",\r\n                        res.data.access_token\r\n                      );\r\n\r\n                      let newUser = {\r\n                        access_token: res.data.access_token,\r\n                        displayName: data.display_name,\r\n                        email: data.email,\r\n                        id: data.id,\r\n                        type: data.type,\r\n                        country: data.country,\r\n                        product: data.product,\r\n                      };\r\n                      this.logInUserAndGetInfo(newUser);\r\n                      this.props.fetchRecentlyPlayed({ limit: 12 });\r\n                    });\r\n                })\r\n                .catch((e) => {\r\n                  console.log(\"Refresh token error -\", e);\r\n                })\r\n                .finally(() => {\r\n                  this.setState({ loading: false });\r\n                });\r\n            } else {\r\n              // Refresh token doesn't exist, the user is shown a 'login with Spotify button'\r\n              this.setState({ loading: false });\r\n            }\r\n          }\r\n        });\r\n    } else {\r\n      // The user is shown a 'login with Spotify button'\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n  logInUserAndGetInfo = (newUser) => {\r\n    console.log(\"LOG IN\", newUser);\r\n    const router = useRouter();\r\n    this.props.setUser(newUser); // set user in redux state\r\n    if (router.pathname === \"/\") {\r\n      Router.push(\"/browse/featured\"); // if there is no page the user wants to go to\r\n      // then go to the home page\r\n    } else {\r\n      // if there is a page the user wants to go to then just send them there\r\n      Router.push();\r\n    }\r\n  };\r\n\r\n  getHashParams() {\r\n    var hashParams = {};\r\n    var e,\r\n      r = /([^&;=]+)=?([^&;]*)/g,\r\n      q = window.location.hash.substring(1);\r\n    while ((e = r.exec(q))) {\r\n      hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    }\r\n    console.log(hashParams, \"hashParams\");\r\n    return hashParams;\r\n  }\r\n  render() {\r\n    // console.log(this.props, \"user\");\r\n    return (\r\n      <div className=\"layout\">\r\n        <SpotifyApiAxiosContext.Provider value={axios}>\r\n          <SpotifyApiContext.Provider\r\n          // value={this.props.user.access_token}\r\n          >\r\n            <Sidebar />\r\n            <Content />\r\n            <Player />\r\n          </SpotifyApiContext.Provider>\r\n        </SpotifyApiAxiosContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.current_user,\r\n    backgroundImage: state.backgroundImage,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => dispatch({ type: actionTypes.SET_USER, user }),\r\n    fetchRecentlyPlayed: (options) =>\r\n      dispatch(actionTypes.fetchRecentlyPlayed(options)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Index));\r\n"]},"metadata":{},"sourceType":"module"}