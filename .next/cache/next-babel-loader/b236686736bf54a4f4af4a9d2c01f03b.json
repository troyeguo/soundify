{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { withRouter } from \"next/router\";\nimport styles from \"../styles/player.module.css\";\nimport { connect } from \"react-redux\";\nimport * as actionTypes from \"../redux/action\";\nimport $axios from \"../$axios\";\nimport LoadingPage from \"./LoadingPage\";\nimport { AudioAnimation, AudioStop } from \"./AudioAnimation\";\n\nvar Player = /*#__PURE__*/function (_Component) {\n  _inherits(Player, _Component);\n\n  var _super = _createSuper(Player);\n\n  function Player(props) {\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"checkForPlayer\", function () {\n      if (window.Spotify) {\n        console.log(\"checkForPlayer\");\n        clearInterval(_this.playerCheckInterval);\n        _this.player = new window.Spotify.Player({\n          name: \"Soundify\",\n          getOAuthToken: function getOAuthToken(cb) {\n            cb(_this.state.token);\n          }\n        });\n      }\n\n      if (_this.player) {\n        _this.createEventHandlers();\n\n        _this.player.connect();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createEventHandlers\", function () {\n      _this.player.on(\"initialization_error\", function (e) {\n        console.error(\"Initialization error \", e);\n\n        _this.setState({\n          player_init_error: true\n        });\n      });\n\n      _this.player.on(\"authentication_error\", function (e) {\n        return console.error(\"Authentication error \", e);\n      });\n\n      _this.player.on(\"account_error\", function (e) {\n        return console.error(\"Account error \", e);\n      });\n\n      _this.player.on(\"playback_error\", function (e) {\n        return console.error(\"Playback error \", e);\n      });\n\n      _this.player.on(\"player_state_changed\", function (state) {\n        if (state) {\n          // console.log(\"player state changed\", state);\n          var duration = state.duration,\n              position = state.position; // duration = 100%\n          // position = ?%\n\n          var val = position * 100 / duration;\n\n          _this.setState({\n            playingInfo: state,\n            playing: !state.paused,\n            positionSliderValue: val\n          }); // Music started playing, start the position interval\n\n\n          if (!_this.props.isPlaying && !state.paused) {\n            _this.positionCheckInterval = setInterval(function () {\n              _this.checkChangePosition();\n            }, 1000);\n          } // Music stopped playing, clear the position interval\n\n\n          if (_this.props.isPlaying && state.paused) {\n            clearInterval(_this.positionCheckInterval);\n          }\n\n          if (_this.props.isPlaying === state.paused) {\n            _this.props.setIsPlaying(!state.paused);\n          }\n\n          if (!_this.props.currentlyPlaying || _this.props.currentlyPlaying !== state.track_window.current_track.name) {\n            var current_track = state.track_window.current_track;\n\n            _this.props.setCurrentlyPlaying(current_track.name);\n          }\n        }\n      });\n\n      _this.player.on(\"ready\", function (data) {\n        var device_id = data.device_id;\n        console.log(\"PLAYER CONNECTED \", device_id); // await this.setState({ deviceId: device_id });\n\n        _this.setState({\n          deviceId: device_id\n        }, function () {\n          _this.transferPlaybackHere();\n        });\n\n        _this.player.getVolume().then(function (vol) {\n          var volume = vol * 100;\n\n          _this.setState({\n            volumeSliderValue: volume\n          });\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkChangePosition\", function () {\n      _this.player.getCurrentState().then(function (state) {\n        if (state) {\n          var duration = state.duration,\n              position = state.position; // duration = 100%\n          // position = ?%\n\n          var val = position * 100 / duration;\n\n          if (val !== _this.state.positionSliderValue) {\n            _this.setState({\n              positionSliderValue: val\n            });\n          }\n\n          var positionStamp = _this.milisToMinutesAndSeconds(state.position);\n\n          var durationStamp = _this.milisToMinutesAndSeconds(state.duration);\n\n          _this.setState({\n            positionStamp: positionStamp,\n            durationStamp: durationStamp\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"transferPlaybackHere\", function () {\n      // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\n      // for normal users they have to go in the spotify app/website and change the device manually\n      // user type is stored in redux state => this.props.user.type\n      var deviceId = _this.state.deviceId;\n      fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          Authorization: \"Bearer \".concat(_this.state.token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          device_ids: [deviceId],\n          play: false\n        })\n      }).then(function (res) {\n        // console.log(\"status\", res);\n        if (res.status === 204) {\n          $axios.get(\"https://api.spotify.com/v1/me/player\").then(function () {\n            // Transferred playback successfully, get current timestamp\n            _this.checkChangePosition();\n          })[\"catch\"](function (err) {\n            console.log(err);\n          });\n        }\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      }); // console.log('Hello', this.props);\n      // if (this.props.user.product === 'premium') {\n      // } else {\n      //   console.log(\n      //     'Cannot transfer playback automatically because you are not a premium user.'\n      //   );\n      // }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPrevClick\", function () {\n      _this.player.previousTrack();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlayClick\", function () {\n      _this.player.togglePlay();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onNextClick\", function () {\n      _this.player.nextTrack();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"milisToMinutesAndSeconds\", function (mil) {\n      var minutes = Math.floor(mil / 60000);\n      var seconds = (mil % 60000 / 1000).toFixed(0);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    });\n\n    _this.state = {\n      deviceId: null,\n      playingInfo: null,\n      playing: false,\n      positionSliderValue: 50,\n      volumeSliderValue: 50,\n      positionStamp: \"00:00\",\n      durationStamp: \"00:00\",\n      player_init_error: false,\n      user: null\n    };\n    _this.player = null;\n    _this.playerCheckInterval = null;\n    _this.positionCheckInterval = null;\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        token: localStorage.getItem(\"react-spotify-access-token\")\n      });\n      var newUser = localStorage.getItem(\"newUser\"); // console.log(newUser, \"newUser\");\n\n      if (newUser) {\n        this.setState({\n          user: JSON.parse(newUser)\n        });\n      } // console.log(Spotify, \"etata\");\n\n\n      window.onSpotifyWebPlaybackSDKReady = function () {\n        console.log(\"onready\");\n        window.Spotify = Spotify;\n      }; // console.log(window.Spotify, \"etata\");\n\n\n      this.playerCheckInterval = setInterval(function () {\n        return _this2.checkForPlayer();\n      }, 1000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.playingInfo, this.state.user, \"this.state.user\");\n\n      if (!this.state.playingInfo || !this.state.user) {\n        return __jsx(\"div\", {\n          className: styles.player\n        }, __jsx(\"div\", {\n          className: styles.loadingContainer\n        }, __jsx(\"div\", {\n          style: {\n            position: \"relative\",\n            left: \"70px\",\n            bottom: \"130px\"\n          }\n        }, __jsx(LoadingPage, null)), __jsx(\"div\", {\n          className: styles.loadingText\n        }, \"Connecting to Spotify Player...\")));\n      } // console.log(this.state.playingInfo);\n\n\n      return __jsx(\"div\", {\n        className: styles.player\n      }, __jsx(\"div\", {\n        className: styles.playerHeader\n      }, __jsx(\"div\", null, __jsx(\"img\", {\n        className: styles.avatar,\n        src: this.state.user.avatar,\n        alt: \"\"\n      }), __jsx(\"span\", {\n        className: styles.nickname\n      }, this.state.user.displayName))), __jsx(\"div\", {\n        className: styles.playerCoverContainer\n      }, this.state.playing ? __jsx(\"img\", {\n        className: styles.playerCoverAnimation,\n        src: this.state.playingInfo.track_window.current_track.album.images[0].url,\n        alt: \"\"\n      }) : __jsx(\"img\", {\n        className: styles.playerCover,\n        src: this.state.playingInfo.track_window.current_track.album.images[0].url,\n        alt: \"\"\n      })), __jsx(\"div\", {\n        className: styles.musicInfo\n      }, __jsx(\"div\", {\n        className: styles.songName\n      }, this.state.playingInfo.track_window.current_track.name), __jsx(\"div\", {\n        className: styles.artistName\n      }, this.state.playingInfo.track_window.current_track.artists[0].name)), __jsx(\"div\", {\n        className: styles.playerPanel\n      }, __jsx(\"img\", {\n        src: \"/icons/prev.svg\",\n        alt: \"\",\n        onClick: this.onPrevClick\n      }), this.state.playing ? __jsx(\"img\", {\n        src: \"/icons/playing.svg\",\n        alt: \"\",\n        style: {\n          width: \"45px\"\n        },\n        onClick: this.onPlayClick\n      }) : __jsx(\"img\", {\n        src: \"/icons/play.svg\",\n        alt: \"\",\n        style: {\n          width: \"45px\"\n        },\n        onClick: this.onPlayClick\n      }), __jsx(\"img\", {\n        src: \"/icons/next.svg\",\n        alt: \"\",\n        onClick: this.onNextClick\n      })), __jsx(\"div\", {\n        className: styles.playerNext\n      }, this.state.playing ? __jsx(AudioAnimation, null) : __jsx(AudioStop, null)), __jsx(\"div\", {\n        className: styles.line\n      }));\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    recently_played: state.recently_played,\n    user: state.current_user,\n    playNow: state.play_now,\n    currentlyPlaying: state.currently_playing,\n    isPlaying: state.isPlaying\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setUser: function setUser(user) {\n      return dispatch({\n        type: actionTypes.SET_USER,\n        user: user\n      });\n    },\n    fetchRecentlyPlayed: function fetchRecentlyPlayed(options) {\n      return dispatch(actionTypes.fetchRecentlyPlayed(options));\n    },\n    resetPlayNow: function resetPlayNow() {\n      return dispatch({\n        type: actionTypes.RESET_PLAY_NOW\n      });\n    },\n    setCurrentlyPlaying: function setCurrentlyPlaying(song) {\n      return dispatch({\n        type: actionTypes.SET_CURRENTLY_PLAYING,\n        song: song\n      });\n    },\n    setIsPlaying: function setIsPlaying(isPlaying) {\n      return dispatch({\n        type: actionTypes.SET_IS_PLAYING,\n        isPlaying: isPlaying\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));","map":{"version":3,"sources":["D:/1-Project/soundify-web/components/Player.js"],"names":["React","Component","withRouter","styles","connect","actionTypes","$axios","LoadingPage","AudioAnimation","AudioStop","Player","props","window","Spotify","console","log","clearInterval","playerCheckInterval","player","name","getOAuthToken","cb","state","token","createEventHandlers","on","e","error","setState","player_init_error","duration","position","val","playingInfo","playing","paused","positionSliderValue","isPlaying","positionCheckInterval","setInterval","checkChangePosition","setIsPlaying","currentlyPlaying","track_window","current_track","setCurrentlyPlaying","data","device_id","deviceId","transferPlaybackHere","getVolume","then","vol","volume","volumeSliderValue","getCurrentState","positionStamp","milisToMinutesAndSeconds","durationStamp","fetch","method","headers","Authorization","body","JSON","stringify","device_ids","play","res","status","get","err","previousTrack","togglePlay","nextTrack","mil","minutes","Math","floor","seconds","toFixed","user","localStorage","getItem","newUser","parse","onSpotifyWebPlaybackSDKReady","checkForPlayer","loadingContainer","left","bottom","loadingText","playerHeader","avatar","nickname","displayName","playerCoverContainer","playerCoverAnimation","album","images","url","playerCover","musicInfo","songName","artistName","artists","playerPanel","onPrevClick","width","onPlayClick","onNextClick","playerNext","line","mapStateToProps","recently_played","current_user","playNow","play_now","currently_playing","mapDispatchToProps","dispatch","setUser","type","SET_USER","fetchRecentlyPlayed","options","resetPlayNow","RESET_PLAY_NOW","song","SET_CURRENTLY_PLAYING","SET_IS_PLAYING"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,WAAZ,MAA6B,iBAA7B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,cAAT,EAAyBC,SAAzB,QAA0C,kBAA1C;;IACMC,M;;;;;AACJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,qEAsCF,YAAM;AACrB,UAAIC,MAAM,CAACC,OAAX,EAAoB;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAC,QAAAA,aAAa,CAAC,MAAKC,mBAAN,CAAb;AACA,cAAKC,MAAL,GAAc,IAAIN,MAAM,CAACC,OAAP,CAAeH,MAAnB,CAA0B;AACtCS,UAAAA,IAAI,EAAE,UADgC;AAEtCC,UAAAA,aAAa,EAAE,uBAACC,EAAD,EAAQ;AACrBA,YAAAA,EAAE,CAAC,MAAKC,KAAL,CAAWC,KAAZ,CAAF;AACD;AAJqC,SAA1B,CAAd;AAMD;;AAED,UAAI,MAAKL,MAAT,EAAiB;AACf,cAAKM,mBAAL;;AAEA,cAAKN,MAAL,CAAYd,OAAZ;AACD;AACF,KAvDkB;;AAAA,0EAwDG,YAAM;AAC1B,YAAKc,MAAL,CAAYO,EAAZ,CAAe,sBAAf,EAAuC,UAACC,CAAD,EAAO;AAC5CZ,QAAAA,OAAO,CAACa,KAAR,CAAc,uBAAd,EAAuCD,CAAvC;;AACA,cAAKE,QAAL,CAAc;AAAEC,UAAAA,iBAAiB,EAAE;AAArB,SAAd;AACD,OAHD;;AAIA,YAAKX,MAAL,CAAYO,EAAZ,CAAe,sBAAf,EAAuC,UAACC,CAAD;AAAA,eACrCZ,OAAO,CAACa,KAAR,CAAc,uBAAd,EAAuCD,CAAvC,CADqC;AAAA,OAAvC;;AAGA,YAAKR,MAAL,CAAYO,EAAZ,CAAe,eAAf,EAAgC,UAACC,CAAD;AAAA,eAAOZ,OAAO,CAACa,KAAR,CAAc,gBAAd,EAAgCD,CAAhC,CAAP;AAAA,OAAhC;;AACA,YAAKR,MAAL,CAAYO,EAAZ,CAAe,gBAAf,EAAiC,UAACC,CAAD;AAAA,eAC/BZ,OAAO,CAACa,KAAR,CAAc,iBAAd,EAAiCD,CAAjC,CAD+B;AAAA,OAAjC;;AAIA,YAAKR,MAAL,CAAYO,EAAZ,CAAe,sBAAf,EAAuC,UAACH,KAAD,EAAW;AAChD,YAAIA,KAAJ,EAAW;AACT;AADS,cAEHQ,QAFG,GAEoBR,KAFpB,CAEHQ,QAFG;AAAA,cAEOC,QAFP,GAEoBT,KAFpB,CAEOS,QAFP,EAGT;AACA;;AACA,cAAIC,GAAG,GAAID,QAAQ,GAAG,GAAZ,GAAmBD,QAA7B;;AACA,gBAAKF,QAAL,CAAc;AACZK,YAAAA,WAAW,EAAEX,KADD;AAEZY,YAAAA,OAAO,EAAE,CAACZ,KAAK,CAACa,MAFJ;AAGZC,YAAAA,mBAAmB,EAAEJ;AAHT,WAAd,EANS,CAYT;;;AACA,cAAI,CAAC,MAAKrB,KAAL,CAAW0B,SAAZ,IAAyB,CAACf,KAAK,CAACa,MAApC,EAA4C;AAC1C,kBAAKG,qBAAL,GAA6BC,WAAW,CAAC,YAAM;AAC7C,oBAAKC,mBAAL;AACD,aAFuC,EAErC,IAFqC,CAAxC;AAGD,WAjBQ,CAmBT;;;AACA,cAAI,MAAK7B,KAAL,CAAW0B,SAAX,IAAwBf,KAAK,CAACa,MAAlC,EAA0C;AACxCnB,YAAAA,aAAa,CAAC,MAAKsB,qBAAN,CAAb;AACD;;AAED,cAAI,MAAK3B,KAAL,CAAW0B,SAAX,KAAyBf,KAAK,CAACa,MAAnC,EAA2C;AACzC,kBAAKxB,KAAL,CAAW8B,YAAX,CAAwB,CAACnB,KAAK,CAACa,MAA/B;AACD;;AAED,cACE,CAAC,MAAKxB,KAAL,CAAW+B,gBAAZ,IACA,MAAK/B,KAAL,CAAW+B,gBAAX,KAAgCpB,KAAK,CAACqB,YAAN,CAAmBC,aAAnB,CAAiCzB,IAFnE,EAGE;AAAA,gBACMyB,aADN,GACwBtB,KAAK,CAACqB,YAD9B,CACMC,aADN;;AAEA,kBAAKjC,KAAL,CAAWkC,mBAAX,CAA+BD,aAAa,CAACzB,IAA7C;AACD;AACF;AACF,OArCD;;AAuCA,YAAKD,MAAL,CAAYO,EAAZ,CAAe,OAAf,EAAwB,UAACqB,IAAD,EAAU;AAAA,YAC1BC,SAD0B,GACZD,IADY,CAC1BC,SAD0B;AAEhCjC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCgC,SAAjC,EAFgC,CAGhC;;AACA,cAAKnB,QAAL,CAAc;AAAEoB,UAAAA,QAAQ,EAAED;AAAZ,SAAd,EAAuC,YAAM;AAC3C,gBAAKE,oBAAL;AACD,SAFD;;AAGA,cAAK/B,MAAL,CAAYgC,SAAZ,GAAwBC,IAAxB,CAA6B,UAACC,GAAD,EAAS;AACpC,cAAIC,MAAM,GAAGD,GAAG,GAAG,GAAnB;;AACA,gBAAKxB,QAAL,CAAc;AAAE0B,YAAAA,iBAAiB,EAAED;AAArB,WAAd;AACD,SAHD;AAID,OAXD;AAYD,KAxHkB;;AAAA,0EAyHG,YAAM;AAC1B,YAAKnC,MAAL,CAAYqC,eAAZ,GAA8BJ,IAA9B,CAAmC,UAAC7B,KAAD,EAAW;AAC5C,YAAIA,KAAJ,EAAW;AAAA,cACHQ,QADG,GACoBR,KADpB,CACHQ,QADG;AAAA,cACOC,QADP,GACoBT,KADpB,CACOS,QADP,EAET;AACA;;AACA,cAAIC,GAAG,GAAID,QAAQ,GAAG,GAAZ,GAAmBD,QAA7B;;AACA,cAAIE,GAAG,KAAK,MAAKV,KAAL,CAAWc,mBAAvB,EAA4C;AAC1C,kBAAKR,QAAL,CAAc;AACZQ,cAAAA,mBAAmB,EAAEJ;AADT,aAAd;AAGD;;AAED,cAAIwB,aAAa,GAAG,MAAKC,wBAAL,CAA8BnC,KAAK,CAACS,QAApC,CAApB;;AACA,cAAI2B,aAAa,GAAG,MAAKD,wBAAL,CAA8BnC,KAAK,CAACQ,QAApC,CAApB;;AACA,gBAAKF,QAAL,CAAc;AAAE4B,YAAAA,aAAa,EAAbA,aAAF;AAAiBE,YAAAA,aAAa,EAAbA;AAAjB,WAAd;AACD;AACF,OAhBD;AAiBD,KA3IkB;;AAAA,2EA4II,YAAM;AAC3B;AACA;AACA;AAH2B,UAInBV,QAJmB,GAIN,MAAK1B,KAJC,CAInB0B,QAJmB;AAK3BW,MAAAA,KAAK,CAAC,sCAAD,EAAyC;AAC5CC,QAAAA,MAAM,EAAE,KADoC;AAE5CC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,mBAAY,MAAKxC,KAAL,CAAWC,KAAvB,CADN;AAEP,0BAAgB;AAFT,SAFmC;AAM5CwC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,UAAU,EAAE,CAAClB,QAAD,CADO;AAEnBmB,UAAAA,IAAI,EAAE;AAFa,SAAf;AANsC,OAAzC,CAAL,CAWGhB,IAXH,CAWQ,UAACiB,GAAD,EAAS;AACb;AACA,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB/D,UAAAA,MAAM,CACHgE,GADH,CACO,sCADP,EAEGnB,IAFH,CAEQ,YAAM;AACV;AACA,kBAAKX,mBAAL;AACD,WALH,WAMS,UAAC+B,GAAD,EAAS;AACdzD,YAAAA,OAAO,CAACC,GAAR,CAAYwD,GAAZ;AACD,WARH;AASD;AACF,OAxBH,WAyBS,UAAC7C,CAAD;AAAA,eAAOZ,OAAO,CAACa,KAAR,CAAcD,CAAd,CAAP;AAAA,OAzBT,EAL2B,CAgC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAnLkB;;AAAA,kEAqLL,YAAM;AAClB,YAAKR,MAAL,CAAYsD,aAAZ;AACD,KAvLkB;;AAAA,kEAyLL,YAAM;AAClB,YAAKtD,MAAL,CAAYuD,UAAZ;AACD,KA3LkB;;AAAA,kEA6LL,YAAM;AAClB,YAAKvD,MAAL,CAAYwD,SAAZ;AACD,KA/LkB;;AAAA,+EAgMQ,UAACC,GAAD,EAAS;AAClC,UAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAG,KAAjB,CAAd;AACA,UAAII,OAAO,GAAG,CAAEJ,GAAG,GAAG,KAAP,GAAgB,IAAjB,EAAuBK,OAAvB,CAA+B,CAA/B,CAAd;AACA,aAAOJ,OAAO,GAAG,GAAV,IAAiBG,OAAO,GAAG,EAAV,GAAe,GAAf,GAAqB,EAAtC,IAA4CA,OAAnD;AACD,KApMkB;;AAGjB,UAAKzD,KAAL,GAAa;AACX0B,MAAAA,QAAQ,EAAE,IADC;AAEXf,MAAAA,WAAW,EAAE,IAFF;AAGXC,MAAAA,OAAO,EAAE,KAHE;AAIXE,MAAAA,mBAAmB,EAAE,EAJV;AAKXkB,MAAAA,iBAAiB,EAAE,EALR;AAMXE,MAAAA,aAAa,EAAE,OANJ;AAOXE,MAAAA,aAAa,EAAE,OAPJ;AAQX7B,MAAAA,iBAAiB,EAAE,KARR;AASXoD,MAAAA,IAAI,EAAE;AATK,KAAb;AAYA,UAAK/D,MAAL,GAAc,IAAd;AACA,UAAKD,mBAAL,GAA2B,IAA3B;AACA,UAAKqB,qBAAL,GAA6B,IAA7B;AAjBiB;AAkBlB;;;;wCAEmB;AAAA;;AAClB,WAAKV,QAAL,CAAc;AACZL,QAAAA,KAAK,EAAE2D,YAAY,CAACC,OAAb,CAAqB,4BAArB;AADK,OAAd;AAGA,UAAIC,OAAO,GAAGF,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAd,CAJkB,CAKlB;;AACA,UAAIC,OAAJ,EAAa;AACX,aAAKxD,QAAL,CAAc;AAAEqD,UAAAA,IAAI,EAAEjB,IAAI,CAACqB,KAAL,CAAWD,OAAX;AAAR,SAAd;AACD,OARiB,CAUlB;;;AACAxE,MAAAA,MAAM,CAAC0E,4BAAP,GAAsC,YAAM;AAC1CxE,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAH,QAAAA,MAAM,CAACC,OAAP,GAAiBA,OAAjB;AACD,OAHD,CAXkB,CAelB;;;AACA,WAAKI,mBAAL,GAA2BsB,WAAW,CAAC;AAAA,eAAM,MAAI,CAACgD,cAAL,EAAN;AAAA,OAAD,EAA8B,IAA9B,CAAtC;AACD;;;6BAiKQ;AACPzE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKO,KAAL,CAAWW,WAAvB,EAAoC,KAAKX,KAAL,CAAW2D,IAA/C,EAAqD,iBAArD;;AACA,UAAI,CAAC,KAAK3D,KAAL,CAAWW,WAAZ,IAA2B,CAAC,KAAKX,KAAL,CAAW2D,IAA3C,EAAiD;AAC/C,eACE;AAAK,UAAA,SAAS,EAAE9E,MAAM,CAACe;AAAvB,WACE;AAAK,UAAA,SAAS,EAAEf,MAAM,CAACqF;AAAvB,WACE;AACE,UAAA,KAAK,EAAE;AAAEzD,YAAAA,QAAQ,EAAE,UAAZ;AAAwB0D,YAAAA,IAAI,EAAE,MAA9B;AAAsCC,YAAAA,MAAM,EAAE;AAA9C;AADT,WAGE,MAAC,WAAD,OAHF,CADF,EAOE;AAAK,UAAA,SAAS,EAAEvF,MAAM,CAACwF;AAAvB,6CAPF,CADF,CADF;AAeD,OAlBM,CAmBP;;;AAEA,aACE;AAAK,QAAA,SAAS,EAAExF,MAAM,CAACe;AAAvB,SACE;AAAK,QAAA,SAAS,EAAEf,MAAM,CAACyF;AAAvB,SACE,mBACE;AACE,QAAA,SAAS,EAAEzF,MAAM,CAAC0F,MADpB;AAEE,QAAA,GAAG,EAAE,KAAKvE,KAAL,CAAW2D,IAAX,CAAgBY,MAFvB;AAGE,QAAA,GAAG,EAAC;AAHN,QADF,EAME;AAAM,QAAA,SAAS,EAAE1F,MAAM,CAAC2F;AAAxB,SACG,KAAKxE,KAAL,CAAW2D,IAAX,CAAgBc,WADnB,CANF,CADF,CADF,EAaE;AAAK,QAAA,SAAS,EAAE5F,MAAM,CAAC6F;AAAvB,SACG,KAAK1E,KAAL,CAAWY,OAAX,GACC;AACE,QAAA,SAAS,EAAE/B,MAAM,CAAC8F,oBADpB;AAEE,QAAA,GAAG,EACD,KAAK3E,KAAL,CAAWW,WAAX,CAAuBU,YAAvB,CAAoCC,aAApC,CAAkDsD,KAAlD,CACGC,MADH,CACU,CADV,EACaC,GAJjB;AAME,QAAA,GAAG,EAAC;AANN,QADD,GAUC;AACE,QAAA,SAAS,EAAEjG,MAAM,CAACkG,WADpB;AAEE,QAAA,GAAG,EACD,KAAK/E,KAAL,CAAWW,WAAX,CAAuBU,YAAvB,CAAoCC,aAApC,CAAkDsD,KAAlD,CACGC,MADH,CACU,CADV,EACaC,GAJjB;AAME,QAAA,GAAG,EAAC;AANN,QAXJ,CAbF,EAkCE;AAAK,QAAA,SAAS,EAAEjG,MAAM,CAACmG;AAAvB,SACE;AAAK,QAAA,SAAS,EAAEnG,MAAM,CAACoG;AAAvB,SACG,KAAKjF,KAAL,CAAWW,WAAX,CAAuBU,YAAvB,CAAoCC,aAApC,CAAkDzB,IADrD,CADF,EAIE;AAAK,QAAA,SAAS,EAAEhB,MAAM,CAACqG;AAAvB,SACG,KAAKlF,KAAL,CAAWW,WAAX,CAAuBU,YAAvB,CAAoCC,aAApC,CAAkD6D,OAAlD,CAA0D,CAA1D,EAA6DtF,IADhE,CAJF,CAlCF,EA0CE;AAAK,QAAA,SAAS,EAAEhB,MAAM,CAACuG;AAAvB,SACE;AAAK,QAAA,GAAG,EAAC,iBAAT;AAA2B,QAAA,GAAG,EAAC,EAA/B;AAAkC,QAAA,OAAO,EAAE,KAAKC;AAAhD,QADF,EAEG,KAAKrF,KAAL,CAAWY,OAAX,GACC;AACE,QAAA,GAAG,EAAC,oBADN;AAEE,QAAA,GAAG,EAAC,EAFN;AAGE,QAAA,KAAK,EAAE;AAAE0E,UAAAA,KAAK,EAAE;AAAT,SAHT;AAIE,QAAA,OAAO,EAAE,KAAKC;AAJhB,QADD,GAQC;AACE,QAAA,GAAG,EAAC,iBADN;AAEE,QAAA,GAAG,EAAC,EAFN;AAGE,QAAA,KAAK,EAAE;AAAED,UAAAA,KAAK,EAAE;AAAT,SAHT;AAIE,QAAA,OAAO,EAAE,KAAKC;AAJhB,QAVJ,EAiBE;AAAK,QAAA,GAAG,EAAC,iBAAT;AAA2B,QAAA,GAAG,EAAC,EAA/B;AAAkC,QAAA,OAAO,EAAE,KAAKC;AAAhD,QAjBF,CA1CF,EA8DE;AAAK,QAAA,SAAS,EAAE3G,MAAM,CAAC4G;AAAvB,SACG,KAAKzF,KAAL,CAAWY,OAAX,GAAqB,MAAC,cAAD,OAArB,GAA0C,MAAC,SAAD,OAD7C,CA9DF,EAiEE;AAAK,QAAA,SAAS,EAAE/B,MAAM,CAAC6G;AAAvB,QAjEF,CADF;AAqED;;;;EAjSkB/G,S;;AAmSrB,IAAMgH,eAAe,GAAG,SAAlBA,eAAkB,CAAC3F,KAAD,EAAW;AACjC,SAAO;AACL4F,IAAAA,eAAe,EAAE5F,KAAK,CAAC4F,eADlB;AAELjC,IAAAA,IAAI,EAAE3D,KAAK,CAAC6F,YAFP;AAGLC,IAAAA,OAAO,EAAE9F,KAAK,CAAC+F,QAHV;AAIL3E,IAAAA,gBAAgB,EAAEpB,KAAK,CAACgG,iBAJnB;AAKLjF,IAAAA,SAAS,EAAEf,KAAK,CAACe;AALZ,GAAP;AAOD,CARD;;AAUA,IAAMkF,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,SAAO;AACLC,IAAAA,OAAO,EAAE,iBAACxC,IAAD;AAAA,aAAUuC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAErH,WAAW,CAACsH,QAApB;AAA8B1C,QAAAA,IAAI,EAAJA;AAA9B,OAAD,CAAlB;AAAA,KADJ;AAEL2C,IAAAA,mBAAmB,EAAE,6BAACC,OAAD;AAAA,aACnBL,QAAQ,CAACnH,WAAW,CAACuH,mBAAZ,CAAgCC,OAAhC,CAAD,CADW;AAAA,KAFhB;AAILC,IAAAA,YAAY,EAAE;AAAA,aAAMN,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAErH,WAAW,CAAC0H;AAApB,OAAD,CAAd;AAAA,KAJT;AAKLlF,IAAAA,mBAAmB,EAAE,6BAACmF,IAAD;AAAA,aACnBR,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAErH,WAAW,CAAC4H,qBAApB;AAA2CD,QAAAA,IAAI,EAAJA;AAA3C,OAAD,CADW;AAAA,KALhB;AAOLvF,IAAAA,YAAY,EAAE,sBAACJ,SAAD;AAAA,aACZmF,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAErH,WAAW,CAAC6H,cAApB;AAAoC7F,QAAAA,SAAS,EAATA;AAApC,OAAD,CADI;AAAA;AAPT,GAAP;AAUD,CAXD;;AAaA,eAAejC,OAAO,CAAC6G,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CrH,UAAU,CAACQ,MAAD,CAAvD,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"next/router\";\r\nimport styles from \"../styles/player.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionTypes from \"../redux/action\";\r\nimport $axios from \"../$axios\";\r\nimport LoadingPage from \"./LoadingPage\";\r\nimport { AudioAnimation, AudioStop } from \"./AudioAnimation\";\r\nclass Player extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      deviceId: null,\r\n      playingInfo: null,\r\n      playing: false,\r\n      positionSliderValue: 50,\r\n      volumeSliderValue: 50,\r\n      positionStamp: \"00:00\",\r\n      durationStamp: \"00:00\",\r\n      player_init_error: false,\r\n      user: null,\r\n    };\r\n\r\n    this.player = null;\r\n    this.playerCheckInterval = null;\r\n    this.positionCheckInterval = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      token: localStorage.getItem(\"react-spotify-access-token\"),\r\n    });\r\n    let newUser = localStorage.getItem(\"newUser\");\r\n    // console.log(newUser, \"newUser\");\r\n    if (newUser) {\r\n      this.setState({ user: JSON.parse(newUser) });\r\n    }\r\n\r\n    // console.log(Spotify, \"etata\");\r\n    window.onSpotifyWebPlaybackSDKReady = () => {\r\n      console.log(\"onready\");\r\n      window.Spotify = Spotify;\r\n    };\r\n    // console.log(window.Spotify, \"etata\");\r\n    this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\r\n  }\r\n  checkForPlayer = () => {\r\n    if (window.Spotify) {\r\n      console.log(\"checkForPlayer\");\r\n      clearInterval(this.playerCheckInterval);\r\n      this.player = new window.Spotify.Player({\r\n        name: \"Soundify\",\r\n        getOAuthToken: (cb) => {\r\n          cb(this.state.token);\r\n        },\r\n      });\r\n    }\r\n\r\n    if (this.player) {\r\n      this.createEventHandlers();\r\n\r\n      this.player.connect();\r\n    }\r\n  };\r\n  createEventHandlers = () => {\r\n    this.player.on(\"initialization_error\", (e) => {\r\n      console.error(\"Initialization error \", e);\r\n      this.setState({ player_init_error: true });\r\n    });\r\n    this.player.on(\"authentication_error\", (e) =>\r\n      console.error(\"Authentication error \", e)\r\n    );\r\n    this.player.on(\"account_error\", (e) => console.error(\"Account error \", e));\r\n    this.player.on(\"playback_error\", (e) =>\r\n      console.error(\"Playback error \", e)\r\n    );\r\n\r\n    this.player.on(\"player_state_changed\", (state) => {\r\n      if (state) {\r\n        // console.log(\"player state changed\", state);\r\n        let { duration, position } = state;\r\n        // duration = 100%\r\n        // position = ?%\r\n        let val = (position * 100) / duration;\r\n        this.setState({\r\n          playingInfo: state,\r\n          playing: !state.paused,\r\n          positionSliderValue: val,\r\n        });\r\n\r\n        // Music started playing, start the position interval\r\n        if (!this.props.isPlaying && !state.paused) {\r\n          this.positionCheckInterval = setInterval(() => {\r\n            this.checkChangePosition();\r\n          }, 1000);\r\n        }\r\n\r\n        // Music stopped playing, clear the position interval\r\n        if (this.props.isPlaying && state.paused) {\r\n          clearInterval(this.positionCheckInterval);\r\n        }\r\n\r\n        if (this.props.isPlaying === state.paused) {\r\n          this.props.setIsPlaying(!state.paused);\r\n        }\r\n\r\n        if (\r\n          !this.props.currentlyPlaying ||\r\n          this.props.currentlyPlaying !== state.track_window.current_track.name\r\n        ) {\r\n          let { current_track } = state.track_window;\r\n          this.props.setCurrentlyPlaying(current_track.name);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.player.on(\"ready\", (data) => {\r\n      let { device_id } = data;\r\n      console.log(\"PLAYER CONNECTED \", device_id);\r\n      // await this.setState({ deviceId: device_id });\r\n      this.setState({ deviceId: device_id }, () => {\r\n        this.transferPlaybackHere();\r\n      });\r\n      this.player.getVolume().then((vol) => {\r\n        let volume = vol * 100;\r\n        this.setState({ volumeSliderValue: volume });\r\n      });\r\n    });\r\n  };\r\n  checkChangePosition = () => {\r\n    this.player.getCurrentState().then((state) => {\r\n      if (state) {\r\n        let { duration, position } = state;\r\n        // duration = 100%\r\n        // position = ?%\r\n        let val = (position * 100) / duration;\r\n        if (val !== this.state.positionSliderValue) {\r\n          this.setState({\r\n            positionSliderValue: val,\r\n          });\r\n        }\r\n\r\n        let positionStamp = this.milisToMinutesAndSeconds(state.position);\r\n        let durationStamp = this.milisToMinutesAndSeconds(state.duration);\r\n        this.setState({ positionStamp, durationStamp });\r\n      }\r\n    });\r\n  };\r\n  transferPlaybackHere = () => {\r\n    // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\r\n    // for normal users they have to go in the spotify app/website and change the device manually\r\n    // user type is stored in redux state => this.props.user.type\r\n    const { deviceId } = this.state;\r\n    fetch(\"https://api.spotify.com/v1/me/player\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Authorization: `Bearer ${this.state.token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        device_ids: [deviceId],\r\n        play: false,\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        // console.log(\"status\", res);\r\n        if (res.status === 204) {\r\n          $axios\r\n            .get(\"https://api.spotify.com/v1/me/player\")\r\n            .then(() => {\r\n              // Transferred playback successfully, get current timestamp\r\n              this.checkChangePosition();\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n\r\n    // console.log('Hello', this.props);\r\n    // if (this.props.user.product === 'premium') {\r\n    // } else {\r\n    //   console.log(\r\n    //     'Cannot transfer playback automatically because you are not a premium user.'\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  onPrevClick = () => {\r\n    this.player.previousTrack();\r\n  };\r\n\r\n  onPlayClick = () => {\r\n    this.player.togglePlay();\r\n  };\r\n\r\n  onNextClick = () => {\r\n    this.player.nextTrack();\r\n  };\r\n  milisToMinutesAndSeconds = (mil) => {\r\n    let minutes = Math.floor(mil / 60000);\r\n    let seconds = ((mil % 60000) / 1000).toFixed(0);\r\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state.playingInfo, this.state.user, \"this.state.user\");\r\n    if (!this.state.playingInfo || !this.state.user) {\r\n      return (\r\n        <div className={styles.player}>\r\n          <div className={styles.loadingContainer}>\r\n            <div\r\n              style={{ position: \"relative\", left: \"70px\", bottom: \"130px\" }}\r\n            >\r\n              <LoadingPage />\r\n            </div>\r\n\r\n            <div className={styles.loadingText}>\r\n              Connecting to Spotify Player...\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    // console.log(this.state.playingInfo);\r\n\r\n    return (\r\n      <div className={styles.player}>\r\n        <div className={styles.playerHeader}>\r\n          <div>\r\n            <img\r\n              className={styles.avatar}\r\n              src={this.state.user.avatar}\r\n              alt=\"\"\r\n            />\r\n            <span className={styles.nickname}>\r\n              {this.state.user.displayName}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className={styles.playerCoverContainer}>\r\n          {this.state.playing ? (\r\n            <img\r\n              className={styles.playerCoverAnimation}\r\n              src={\r\n                this.state.playingInfo.track_window.current_track.album\r\n                  .images[0].url\r\n              }\r\n              alt=\"\"\r\n            />\r\n          ) : (\r\n            <img\r\n              className={styles.playerCover}\r\n              src={\r\n                this.state.playingInfo.track_window.current_track.album\r\n                  .images[0].url\r\n              }\r\n              alt=\"\"\r\n            />\r\n          )}\r\n        </div>\r\n        <div className={styles.musicInfo}>\r\n          <div className={styles.songName}>\r\n            {this.state.playingInfo.track_window.current_track.name}\r\n          </div>\r\n          <div className={styles.artistName}>\r\n            {this.state.playingInfo.track_window.current_track.artists[0].name}\r\n          </div>\r\n        </div>\r\n        <div className={styles.playerPanel}>\r\n          <img src=\"/icons/prev.svg\" alt=\"\" onClick={this.onPrevClick} />\r\n          {this.state.playing ? (\r\n            <img\r\n              src=\"/icons/playing.svg\"\r\n              alt=\"\"\r\n              style={{ width: \"45px\" }}\r\n              onClick={this.onPlayClick}\r\n            />\r\n          ) : (\r\n            <img\r\n              src=\"/icons/play.svg\"\r\n              alt=\"\"\r\n              style={{ width: \"45px\" }}\r\n              onClick={this.onPlayClick}\r\n            />\r\n          )}\r\n          <img src=\"/icons/next.svg\" alt=\"\" onClick={this.onNextClick} />\r\n        </div>\r\n\r\n        <div className={styles.playerNext}>\r\n          {this.state.playing ? <AudioAnimation /> : <AudioStop />}\r\n        </div>\r\n        <div className={styles.line}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    recently_played: state.recently_played,\r\n    user: state.current_user,\r\n    playNow: state.play_now,\r\n    currentlyPlaying: state.currently_playing,\r\n    isPlaying: state.isPlaying,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => dispatch({ type: actionTypes.SET_USER, user }),\r\n    fetchRecentlyPlayed: (options) =>\r\n      dispatch(actionTypes.fetchRecentlyPlayed(options)),\r\n    resetPlayNow: () => dispatch({ type: actionTypes.RESET_PLAY_NOW }),\r\n    setCurrentlyPlaying: (song) =>\r\n      dispatch({ type: actionTypes.SET_CURRENTLY_PLAYING, song }),\r\n    setIsPlaying: (isPlaying) =>\r\n      dispatch({ type: actionTypes.SET_IS_PLAYING, isPlaying }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));\r\n"]},"metadata":{},"sourceType":"module"}