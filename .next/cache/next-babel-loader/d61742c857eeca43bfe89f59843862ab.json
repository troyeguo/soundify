{"ast":null,"code":"import axios from \"axios\";\nimport * as actionTypes from \"./redux/action\";\nimport { connect } from \"react-redux\"; // dotenv.config();\n// console.log(process.env.NODE_ENV, \"REACT_APP_BASE_URL\");\n\nconst $axios = axios.create({\n  timeout: 6000,\n  retry: 4,\n  retryDelay: 1000\n}); //请求拦截\n\n$axios.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  // 通过reudx的store拿到拿到全局状态树的token ，添加到请求报文，后台会根据该报文返回status\n  // 此处应根据具体业务写token\n  // const token = store.getState().user.token || localStorage.getItem('token');\n  const token = localStorage.getItem(\"react-spotify-access-token\");\n  config.headers = {\n    Authorization: `Bearer ${token}`\n  };\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  message.error(error);\n  return Promise.reject(error);\n}); // 添加响应拦截器\n\n$axios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response) {\n    console.log(error.response, \"error\");\n    const originalRequest = error.config;\n\n    if (error.response.status === 401) {\n      console.log(\"Error happened\");\n      console.log(error);\n      let refresh_token = localStorage.getItem(\"react-spotify-refresh-token\");\n      console.log(refresh_token); // return window.location.reload();\n\n      return axios.post(\"http://localhost:3000/refresh\", {\n        refresh_token: localStorage.getItem(\"react-spotify-refresh-token\")\n      }).then(res => {\n        console.log(res, \"res\");\n\n        if (res.status === 200) {\n          // 1) put token to LocalStorage\n          localStorage.setItem(\"react-spotify-access-token\", res.data.access_token); // console.log(\"New token\", res.data);\n          // console.log(originalRequest);\n          // // 2) Change Authorization header\n          // axios.defaults.headers.common['Authorization'] =\n          //   'Bearer ' + localStorageService.getAccessToken();\n          // 3) return originalRequest object with Axios.\n\n          return axios(originalRequest);\n        }\n      }).catch(error => {\n        console.log(error, \"error\");\n      });\n    }\n  }\n\n  return Promise.reject(error);\n});\nexport default $axios;","map":null,"metadata":{},"sourceType":"module"}