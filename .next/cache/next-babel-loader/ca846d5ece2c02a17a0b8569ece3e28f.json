{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Router, { withRouter, useRouter } from \"next/router\";\nimport Sidebar from \"../components/Sidebar\";\nimport Player from \"../components/Player\";\nimport Content from \"../components/Content\";\nimport * as actionTypes from \"../redux/action\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { SpotifyApiContext, SpotifyApiAxiosContext } from \"react-spotify-api\";\nconst menuList = [\"Home\", \"Playlist\", \"Album\", \"Artist\", \"Search\"];\n\nclass Index extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {});\n\n    _defineProperty(this, \"logInUserAndGetInfo\", newUser => {\n      console.log(\"LOG IN\", newUser);\n      const router = useRouter();\n      this.props.setUser(newUser); // set user in redux state\n\n      if (router.pathname === \"/\") {\n        Router.push(\"/browse/featured\"); // if there is no page the user wants to go to\n        // then go to the home page\n      } else {\n        // if there is a page the user wants to go to then just send them there\n        Router.push();\n      }\n    });\n  }\n\n  componentDidMount() {\n    // console.log(this.props, \"cdm\");\n    axios.interceptors.response.use(response => {\n      return response;\n    }, error => {\n      // console.log(error.response, \"error\");\n      const originalRequest = error.config;\n\n      if (error.response.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        console.log(\"Error happened\");\n        console.log(error); // return window.location.reload();\n\n        return axios.post(\"http://localhost:3000/refresh\", {\n          data: JSON.stringify({\n            refresh_token: localStorage.getItem(\"react-spotify-refresh-token\")\n          })\n        }).then(res => {\n          // console.log(this, \"props\");\n          if (res.status === 200) {\n            // 1) put token to LocalStorage\n            localStorage.setItem(\"react-spotify-access-token\", res.data.access_token);\n            console.log(\"New token\", res.data);\n            console.log(originalRequest);\n            this.props.setUser({\n              access_token: res.data.access_token\n            }); // // 2) Change Authorization header\n            // axios.defaults.headers.common['Authorization'] =\n            //   'Bearer ' + localStorageService.getAccessToken();\n            // 3) return originalRequest object with Axios.\n\n            return axios(originalRequest);\n          }\n        });\n      }\n    });\n    let params = this.getHashParams();\n    console.log(\"Params\", params); // If access token doesn't exist in has params, try to take it from local storage\n\n    if (!(\"access_token\" in params)) {\n      const currentAccessToken = localStorage.getItem(\"react-spotify-access-token\");\n\n      if (currentAccessToken) {\n        params.access_token = currentAccessToken;\n      }\n    }\n\n    console.log(\"Params after\", params);\n\n    if (\"access_token\" in params) {\n      console.log(\"access_token\" in params);\n      axios.get(\"https://api.spotify.com/v1/me\", {\n        headers: {\n          Authorization: `Bearer ${params.access_token}`\n        }\n      }).then(({\n        data\n      }) => {\n        localStorage.setItem(\"react-spotify-access-token\", params.access_token);\n\n        if (params.refresh_token) {\n          localStorage.setItem(\"react-spotify-refresh-token\", params.refresh_token);\n        }\n\n        let newUser = {\n          access_token: params.access_token,\n          displayName: data.display_name,\n          email: data.email,\n          id: data.id,\n          type: data.type,\n          country: data.country,\n          product: data.product\n        };\n        console.log(this.props.setUser);\n        this.setState({\n          loading: false\n        });\n        this.logInUserAndGetInfo(newUser);\n        this.props.fetchRecentlyPlayed({\n          limit: 12\n        });\n      }).catch(err => {\n        console.log(err.response, \"fgjxfjxf\"); // 401 = Unauthorized - the access token is incorrect (expired)\n\n        if (err.response.status === 401) {\n          // Check if refresh token exists\n          const refreshToken = localStorage.getItem(\"react-spotify-refresh-token\");\n\n          if (refreshToken) {\n            // Send refresh token to server to acquire a new access token\n            axios.post(\"http://localhost:3000/refresh\", {\n              data: JSON.stringify({\n                refresh_token: refreshToken\n              })\n            }).then(res => {\n              console.log(\"Refresh token response -\", res.data);\n              axios.get(\"https://api.spotify.com/v1/me\", {\n                headers: {\n                  Authorization: `Bearer ${res.data.access_token}`\n                }\n              }).then(({\n                data\n              }) => {\n                localStorage.setItem(\"react-spotify-access-token\", res.data.access_token);\n                let newUser = {\n                  access_token: res.data.access_token,\n                  displayName: data.display_name,\n                  email: data.email,\n                  id: data.id,\n                  type: data.type,\n                  country: data.country,\n                  product: data.product\n                };\n                this.logInUserAndGetInfo(newUser);\n                this.props.fetchRecentlyPlayed({\n                  limit: 12\n                });\n              });\n            }).catch(e => {\n              console.log(\"Refresh token error -\", e);\n            }).finally(() => {\n              this.setState({\n                loading: false\n              });\n            });\n          } else {\n            // Refresh token doesn't exist, the user is shown a 'login with Spotify button'\n            this.setState({\n              loading: false\n            });\n          }\n        }\n      });\n    } else {\n      // The user is shown a 'login with Spotify button'\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    console.log(hashParams, \"hashParams\");\n    return hashParams;\n  }\n\n  render() {\n    // console.log(this.props, \"user\");\n    return __jsx(\"div\", {\n      className: \"layout\"\n    }, __jsx(SpotifyApiAxiosContext.Provider, {\n      value: axios\n    }, __jsx(SpotifyApiContext.Provider, null, __jsx(Sidebar, null), __jsx(Content, null), __jsx(Player, null))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.current_user,\n    backgroundImage: state.backgroundImage\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUser: user => dispatch({\n      type: actionTypes.SET_USER,\n      user\n    }),\n    fetchRecentlyPlayed: options => dispatch(actionTypes.fetchRecentlyPlayed(options))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Index));","map":{"version":3,"sources":["D:/1-Project/soundify-web/pages/index.js"],"names":["React","Component","Router","withRouter","useRouter","Sidebar","Player","Content","actionTypes","axios","connect","SpotifyApiContext","SpotifyApiAxiosContext","menuList","Index","newUser","console","log","router","props","setUser","pathname","push","componentDidMount","interceptors","response","use","error","originalRequest","config","status","_retry","post","data","JSON","stringify","refresh_token","localStorage","getItem","then","res","setItem","access_token","params","getHashParams","currentAccessToken","get","headers","Authorization","displayName","display_name","email","id","type","country","product","setState","loading","logInUserAndGetInfo","fetchRecentlyPlayed","limit","catch","err","refreshToken","e","finally","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","render","mapStateToProps","state","user","current_user","backgroundImage","mapDispatchToProps","dispatch","SET_USER","options"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Router, { withRouter, useRouter } from \"next/router\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport Player from \"../components/Player\";\r\nimport Content from \"../components/Content\";\r\nimport * as actionTypes from \"../redux/action\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { SpotifyApiContext, SpotifyApiAxiosContext } from \"react-spotify-api\";\r\nconst menuList = [\"Home\", \"Playlist\", \"Album\", \"Artist\", \"Search\"];\r\nclass Index extends Component {\r\n  state = {};\r\n  componentDidMount() {\r\n    // console.log(this.props, \"cdm\");\r\n    axios.interceptors.response.use(\r\n      (response) => {\r\n        return response;\r\n      },\r\n      (error) => {\r\n        // console.log(error.response, \"error\");\r\n        const originalRequest = error.config;\r\n        if (error.response.status === 401 && !originalRequest._retry) {\r\n          originalRequest._retry = true;\r\n          console.log(\"Error happened\");\r\n          console.log(error);\r\n          // return window.location.reload();\r\n          return axios\r\n            .post(\"http://localhost:3000/refresh\", {\r\n              data: JSON.stringify({\r\n                refresh_token: localStorage.getItem(\r\n                  \"react-spotify-refresh-token\"\r\n                ),\r\n              }),\r\n            })\r\n            .then((res) => {\r\n              // console.log(this, \"props\");\r\n              if (res.status === 200) {\r\n                // 1) put token to LocalStorage\r\n                localStorage.setItem(\r\n                  \"react-spotify-access-token\",\r\n                  res.data.access_token\r\n                );\r\n                console.log(\"New token\", res.data);\r\n                console.log(originalRequest);\r\n                this.props.setUser({ access_token: res.data.access_token });\r\n\r\n                // // 2) Change Authorization header\r\n                // axios.defaults.headers.common['Authorization'] =\r\n                //   'Bearer ' + localStorageService.getAccessToken();\r\n\r\n                // 3) return originalRequest object with Axios.\r\n                return axios(originalRequest);\r\n              }\r\n            });\r\n        }\r\n      }\r\n    );\r\n\r\n    let params = this.getHashParams();\r\n    console.log(\"Params\", params);\r\n    // If access token doesn't exist in has params, try to take it from local storage\r\n    if (!(\"access_token\" in params)) {\r\n      const currentAccessToken = localStorage.getItem(\r\n        \"react-spotify-access-token\"\r\n      );\r\n\r\n      if (currentAccessToken) {\r\n        params.access_token = currentAccessToken;\r\n      }\r\n    }\r\n    console.log(\"Params after\", params);\r\n    if (\"access_token\" in params) {\r\n      console.log(\"access_token\" in params);\r\n      axios\r\n        .get(\"https://api.spotify.com/v1/me\", {\r\n          headers: {\r\n            Authorization: `Bearer ${params.access_token}`,\r\n          },\r\n        })\r\n        .then(({ data }) => {\r\n          localStorage.setItem(\r\n            \"react-spotify-access-token\",\r\n            params.access_token\r\n          );\r\n          if (params.refresh_token) {\r\n            localStorage.setItem(\r\n              \"react-spotify-refresh-token\",\r\n              params.refresh_token\r\n            );\r\n          }\r\n          let newUser = {\r\n            access_token: params.access_token,\r\n            displayName: data.display_name,\r\n            email: data.email,\r\n            id: data.id,\r\n            type: data.type,\r\n            country: data.country,\r\n            product: data.product,\r\n          };\r\n          console.log(this.props.setUser);\r\n          this.setState({ loading: false });\r\n          this.logInUserAndGetInfo(newUser);\r\n          this.props.fetchRecentlyPlayed({ limit: 12 });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response, \"fgjxfjxf\");\r\n          // 401 = Unauthorized - the access token is incorrect (expired)\r\n          if (err.response.status === 401) {\r\n            // Check if refresh token exists\r\n            const refreshToken = localStorage.getItem(\r\n              \"react-spotify-refresh-token\"\r\n            );\r\n            if (refreshToken) {\r\n              // Send refresh token to server to acquire a new access token\r\n              axios\r\n                .post(\"http://localhost:3000/refresh\", {\r\n                  data: JSON.stringify({\r\n                    refresh_token: refreshToken,\r\n                  }),\r\n                })\r\n                .then((res) => {\r\n                  console.log(\"Refresh token response -\", res.data);\r\n                  axios\r\n                    .get(\"https://api.spotify.com/v1/me\", {\r\n                      headers: {\r\n                        Authorization: `Bearer ${res.data.access_token}`,\r\n                      },\r\n                    })\r\n                    .then(({ data }) => {\r\n                      localStorage.setItem(\r\n                        \"react-spotify-access-token\",\r\n                        res.data.access_token\r\n                      );\r\n\r\n                      let newUser = {\r\n                        access_token: res.data.access_token,\r\n                        displayName: data.display_name,\r\n                        email: data.email,\r\n                        id: data.id,\r\n                        type: data.type,\r\n                        country: data.country,\r\n                        product: data.product,\r\n                      };\r\n                      this.logInUserAndGetInfo(newUser);\r\n                      this.props.fetchRecentlyPlayed({ limit: 12 });\r\n                    });\r\n                })\r\n                .catch((e) => {\r\n                  console.log(\"Refresh token error -\", e);\r\n                })\r\n                .finally(() => {\r\n                  this.setState({ loading: false });\r\n                });\r\n            } else {\r\n              // Refresh token doesn't exist, the user is shown a 'login with Spotify button'\r\n              this.setState({ loading: false });\r\n            }\r\n          }\r\n        });\r\n    } else {\r\n      // The user is shown a 'login with Spotify button'\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n  logInUserAndGetInfo = (newUser) => {\r\n    console.log(\"LOG IN\", newUser);\r\n    const router = useRouter();\r\n    this.props.setUser(newUser); // set user in redux state\r\n    if (router.pathname === \"/\") {\r\n      Router.push(\"/browse/featured\"); // if there is no page the user wants to go to\r\n      // then go to the home page\r\n    } else {\r\n      // if there is a page the user wants to go to then just send them there\r\n      Router.push();\r\n    }\r\n  };\r\n\r\n  getHashParams() {\r\n    var hashParams = {};\r\n    var e,\r\n      r = /([^&;=]+)=?([^&;]*)/g,\r\n      q = window.location.hash.substring(1);\r\n    while ((e = r.exec(q))) {\r\n      hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    }\r\n    console.log(hashParams, \"hashParams\");\r\n    return hashParams;\r\n  }\r\n  render() {\r\n    // console.log(this.props, \"user\");\r\n    return (\r\n      <div className=\"layout\">\r\n        <SpotifyApiAxiosContext.Provider value={axios}>\r\n          <SpotifyApiContext.Provider\r\n          // value={this.props.user.access_token}\r\n          >\r\n            <Sidebar />\r\n            <Content />\r\n            <Player />\r\n          </SpotifyApiContext.Provider>\r\n        </SpotifyApiAxiosContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.current_user,\r\n    backgroundImage: state.backgroundImage,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => dispatch({ type: actionTypes.SET_USER, user }),\r\n    fetchRecentlyPlayed: (options) =>\r\n      dispatch(actionTypes.fetchRecentlyPlayed(options)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Index));\r\n"]},"metadata":{},"sourceType":"module"}