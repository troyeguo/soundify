{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Router, { withRouter } from \"next/router\";\nimport * as actionTypes from \"../redux/action\";\nimport $axios from \"../$axios\";\nimport { connect } from \"react-redux\";\nimport { SpotifyApiContext, SpotifyApiAxiosContext } from \"react-spotify-api\";\nimport AlbumBody from \"../components/Album\";\n\nclass Album extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleIndex\", index => {\n      this.setState({\n        index\n      });\n    });\n\n    this.state = {\n      index: 0\n    };\n    this.token = null;\n  }\n\n  componentDidMount() {\n    this.setState({\n      token: localStorage.getItem(\"react-spotify-access-token\")\n    });\n    let newUser = localStorage.getItem(\"newUser\");\n\n    if (newUser) {\n      this.props.setUser(JSON.parse(newUser));\n    } // console.log(this.props, \"cdm\");\n\n  }\n\n  render() {\n    console.log(this.props.recently_played, \"user\");\n    return __jsx(\"div\", {\n      className: \"content\"\n    }, this.state.token ? __jsx(SpotifyApiAxiosContext.Provider, {\n      value: $axios\n    }, __jsx(SpotifyApiContext.Provider, {\n      value: this.state.token\n    }, __jsx(\"div\", {\n      className: \"content-header\"\n    }, \"Album\"), __jsx(AlbumBody, null))) : null);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.current_user,\n    backgroundImage: state.backgroundImage,\n    recently_played: state.recently_played\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUser: user => dispatch({\n      type: actionTypes.SET_USER,\n      user\n    }),\n    fetchRecentlyPlayed: options => dispatch(actionTypes.fetchRecentlyPlayed(options))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Album));","map":{"version":3,"sources":["D:/1-Project/soundify-web/pages/Album.js"],"names":["React","Component","Router","withRouter","actionTypes","$axios","connect","SpotifyApiContext","SpotifyApiAxiosContext","AlbumBody","Album","constructor","props","index","setState","state","token","componentDidMount","localStorage","getItem","newUser","setUser","JSON","parse","render","console","log","recently_played","mapStateToProps","user","current_user","backgroundImage","mapDispatchToProps","dispatch","type","SET_USER","fetchRecentlyPlayed","options"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,aAAnC;AACA,OAAO,KAAKC,WAAZ,MAA6B,iBAA7B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,EAA4BC,sBAA5B,QAA0D,mBAA1D;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;AAEA,MAAMC,KAAN,SAAoBT,SAApB,CAA8B;AAC5BU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,yCAgBJC,KAAD,IAAW;AACvB,WAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd;AACD,KAlBkB;;AAEjB,SAAKE,KAAL,GAAa;AAAEF,MAAAA,KAAK,EAAE;AAAT,KAAb;AACA,SAAKG,KAAL,GAAa,IAAb;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,QAAL,CAAc;AACZE,MAAAA,KAAK,EAAEE,YAAY,CAACC,OAAb,CAAqB,4BAArB;AADK,KAAd;AAGA,QAAIC,OAAO,GAAGF,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAd;;AACA,QAAIC,OAAJ,EAAa;AACX,WAAKR,KAAL,CAAWS,OAAX,CAAmBC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAnB;AACD,KAPiB,CASlB;;AACD;;AAIDI,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAL,CAAWe,eAAvB,EAAwC,MAAxC;AAEA,WACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACG,KAAKZ,KAAL,CAAWC,KAAX,GACC,MAAC,sBAAD,CAAwB,QAAxB;AAAiC,MAAA,KAAK,EAAEX;AAAxC,OACE,MAAC,iBAAD,CAAmB,QAAnB;AAA4B,MAAA,KAAK,EAAE,KAAKU,KAAL,CAAWC;AAA9C,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,eADF,EAEE,MAAC,SAAD,OAFF,CADF,CADD,GAOG,IARN,CADF;AAYD;;AAnC2B;;AAqC9B,MAAMY,eAAe,GAAIb,KAAD,IAAW;AACjC,SAAO;AACLc,IAAAA,IAAI,EAAEd,KAAK,CAACe,YADP;AAELC,IAAAA,eAAe,EAAEhB,KAAK,CAACgB,eAFlB;AAGLJ,IAAAA,eAAe,EAAEZ,KAAK,CAACY;AAHlB,GAAP;AAKD,CAND;;AAQA,MAAMK,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLZ,IAAAA,OAAO,EAAGQ,IAAD,IAAUI,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE9B,WAAW,CAAC+B,QAApB;AAA8BN,MAAAA;AAA9B,KAAD,CADtB;AAELO,IAAAA,mBAAmB,EAAGC,OAAD,IACnBJ,QAAQ,CAAC7B,WAAW,CAACgC,mBAAZ,CAAgCC,OAAhC,CAAD;AAHL,GAAP;AAKD,CAND;;AAQA,eAAe/B,OAAO,CAACsB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6C7B,UAAU,CAACO,KAAD,CAAvD,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport Router, { withRouter } from \"next/router\";\r\nimport * as actionTypes from \"../redux/action\";\r\nimport $axios from \"../$axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { SpotifyApiContext, SpotifyApiAxiosContext } from \"react-spotify-api\";\r\nimport AlbumBody from \"../components/Album\";\r\n\r\nclass Album extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { index: 0 };\r\n    this.token = null;\r\n  }\r\n  componentDidMount() {\r\n    this.setState({\r\n      token: localStorage.getItem(\"react-spotify-access-token\"),\r\n    });\r\n    let newUser = localStorage.getItem(\"newUser\");\r\n    if (newUser) {\r\n      this.props.setUser(JSON.parse(newUser));\r\n    }\r\n\r\n    // console.log(this.props, \"cdm\");\r\n  }\r\n  handleIndex = (index) => {\r\n    this.setState({ index });\r\n  };\r\n  render() {\r\n    console.log(this.props.recently_played, \"user\");\r\n\r\n    return (\r\n      <div className=\"content\">\r\n        {this.state.token ? (\r\n          <SpotifyApiAxiosContext.Provider value={$axios}>\r\n            <SpotifyApiContext.Provider value={this.state.token}>\r\n              <div className=\"content-header\">Album</div>\r\n              <AlbumBody />\r\n            </SpotifyApiContext.Provider>\r\n          </SpotifyApiAxiosContext.Provider>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.current_user,\r\n    backgroundImage: state.backgroundImage,\r\n    recently_played: state.recently_played,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => dispatch({ type: actionTypes.SET_USER, user }),\r\n    fetchRecentlyPlayed: (options) =>\r\n      dispatch(actionTypes.fetchRecentlyPlayed(options)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Album));\r\n"]},"metadata":{},"sourceType":"module"}