{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Router, { withRouter, useRouter } from \"next/router\";\nimport Sidebar from \"../components/Sidebar\";\nimport Player from \"../components/Player\";\nimport Content from \"../components/Content\";\nimport * as actionTypes from \"../redux/action\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { SpotifyApiContext, SpotifyApiAxiosContext } from \"react-spotify-api\";\nimport { logger } from \"../utils\";\nvar menuList = [\"Home\", \"Playlist\", \"Album\", \"Artist\", \"Search\"];\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  var _super = _createSuper(Index);\n\n  function Index() {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHashParams\", function _callee() {\n      var currentAccessToken, metadata;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              logger.log(\"Params\", params); // If access token doesn't exist in has params, try to take it from local storage\n\n              if (!(\"access_token\" in params)) {\n                currentAccessToken = localStorage.getItem(\"react-spotify-access-token\");\n\n                if (currentAccessToken) {\n                  params.access_token = currentAccessToken;\n                }\n              }\n\n              logger.log(\"Params after\", params);\n\n              if (!(\"access_token\" in params)) {\n                _context.next = 9;\n                break;\n              }\n\n              logger.log(\"access_token\" in params);\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(axios.get(\"https://api.spotify.com/v1/me\", {\n                headers: {\n                  Authorization: \"Bearer \".concat(params.access_token)\n                }\n              }));\n\n            case 7:\n              metadata = _context.sent;\n              console.log(metadata, \"metadata\"); //       localStorage.setItem(\n              //         \"react-spotify-access-token\",\n              //         params.access_token\n              //       );\n              //       if (params.refresh_token) {\n              //         localStorage.setItem(\n              //           \"react-spotify-refresh-token\",\n              //           params.refresh_token\n              //         );\n              //       }\n              //       let newUser = {\n              //         access_token: params.access_token,\n              //         displayName: data.display_name,\n              //         email: data.email,\n              //         id: data.id,\n              //         type: data.type,\n              //         country: data.country,\n              //         product: data.product,\n              //       };\n              //       logger.log(this.props.setUser);\n              //       this.setState({ loading: false });\n              //       this.logInUserAndGetInfo(newUser);\n              //       this.props.fetchRecentlyPlayed({ limit: 12 });\n              //     })\n              //     .catch((err) => {\n              //       console.log(err, \"fgjxfjxf\");\n              //       // 401 = Unauthorized - the access token is incorrect (expired)\n              //       if (true) {\n              //         // Check if refresh token exists\n              //         const refreshToken = localStorage.getItem(\n              //           \"react-spotify-refresh-token\"\n              //         );\n              //         if (refreshToken) {\n              //           // Send refresh token to server to acquire a new access token\n              //           axios\n              //             .post(\"http://localhost:3000/refresh\", {\n              //               data: JSON.stringify({\n              //                 refresh_token: refreshToken,\n              //               }),\n              //             })\n              //             .then((res) => {\n              //               logger.log(\"Refresh token response -\", res.data);\n              //               axios\n              //                 .get(\"https://api.spotify.com/v1/me\", {\n              //                   headers: {\n              //                     Authorization: `Bearer ${res.data.access_token}`,\n              //                   },\n              //                 })\n              //                 .then(({ data }) => {\n              //                   localStorage.setItem(\n              //                     \"react-spotify-access-token\",\n              //                     res.data.access_token\n              //                   );\n              //                   let newUser = {\n              //                     access_token: res.data.access_token,\n              //                     displayName: data.display_name,\n              //                     email: data.email,\n              //                     id: data.id,\n              //                     type: data.type,\n              //                     country: data.country,\n              //                     product: data.product,\n              //                   };\n              //                   this.logInUserAndGetInfo(newUser);\n              //                   this.props.fetchRecentlyPlayed({ limit: 12 });\n              //                 });\n              //             })\n              //             .catch((e) => {\n              //               logger.log(\"Refresh token error -\", e);\n              //             })\n              //             .finally(() => {\n              //               this.setState({ loading: false });\n              //             });\n              //         } else {\n              //           // Refresh token doesn't exist, the user is shown a 'login with Spotify button'\n              //           this.setState({ loading: false });\n              //         }\n              //       }\n              //     });\n              // } else {\n              //   // The user is shown a 'login with Spotify button'\n              //   this.setState({ loading: false });\n              // }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"logInUserAndGetInfo\", function (newUser) {\n      logger.log(\"LOG IN\", newUser);\n      var router = useRouter();\n\n      _this.props.setUser(newUser); // set user in redux state\n\n\n      if (router.pathname === \"/\") {\n        Router.push(\"/browse/featured\"); // if there is no page the user wants to go to\n        // then go to the home page\n      } else {\n        // if there is a page the user wants to go to then just send them there\n        Router.push();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // console.log(this.props, \"cdm\");\n      axios.interceptors.response.use(function (response) {\n        return response;\n      }, function (error) {\n        // console.log(error.response, \"error\");\n        var originalRequest = error.config;\n\n        if (error.response.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n          console.log(\"Error happened\");\n          console.log(error); // return window.location.reload();\n\n          return axios.post(\"http://localhost:3000/refresh\", {\n            data: JSON.stringify({\n              refresh_token: localStorage.getItem(\"react-spotify-refresh-token\")\n            })\n          }).then(function (res) {\n            console.log(_this2, \"props\");\n\n            if (res.status === 200) {\n              // 1) put token to LocalStorage\n              localStorage.setItem(\"react-spotify-access-token\", res.data.access_token);\n              logger.log(\"New token\", res.data);\n              logger.log(originalRequest);\n\n              _this2.props.setUser({\n                access_token: res.data.access_token\n              }); // // 2) Change Authorization header\n              // axios.defaults.headers.common['Authorization'] =\n              //   'Bearer ' + localStorageService.getAccessToken();\n              // 3) return originalRequest object with Axios.\n\n\n              return axios(originalRequest);\n            }\n          });\n        }\n      });\n      var params = this.getHashParams();\n      this.handleHashParams(params);\n    }\n  }, {\n    key: \"getHashParams\",\n    value: function getHashParams() {\n      var hashParams = {};\n      var e,\n          r = /([^&;=]+)=?([^&;]*)/g,\n          q = window.location.hash.substring(1);\n\n      while (e = r.exec(q)) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n      }\n\n      logger.log(hashParams, \"hashParams\");\n      return hashParams;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // console.log(this.props, \"user\");\n      return __jsx(\"div\", {\n        className: \"layout\"\n      }, __jsx(SpotifyApiAxiosContext.Provider, {\n        value: axios\n      }, __jsx(SpotifyApiContext.Provider, null, __jsx(Sidebar, null), __jsx(Content, null), __jsx(Player, null))));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.current_user,\n    backgroundImage: state.backgroundImage\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setUser: function setUser(user) {\n      return dispatch({\n        type: actionTypes.SET_USER,\n        user: user\n      });\n    },\n    fetchRecentlyPlayed: function fetchRecentlyPlayed(options) {\n      return dispatch(actionTypes.fetchRecentlyPlayed(options));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Index));","map":{"version":3,"sources":["D:/1-Project/soundify-web/pages/index.js"],"names":["React","Component","Router","withRouter","useRouter","Sidebar","Player","Content","actionTypes","axios","connect","SpotifyApiContext","SpotifyApiAxiosContext","logger","menuList","Index","log","params","currentAccessToken","localStorage","getItem","access_token","get","headers","Authorization","metadata","console","newUser","router","props","setUser","pathname","push","interceptors","response","use","error","originalRequest","config","status","_retry","post","data","JSON","stringify","refresh_token","then","res","setItem","getHashParams","handleHashParams","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","mapStateToProps","state","user","current_user","backgroundImage","mapDispatchToProps","dispatch","type","SET_USER","fetchRecentlyPlayed","options"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Router, { withRouter, useRouter } from \"next/router\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport Player from \"../components/Player\";\r\nimport Content from \"../components/Content\";\r\nimport * as actionTypes from \"../redux/action\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { SpotifyApiContext, SpotifyApiAxiosContext } from \"react-spotify-api\";\r\nimport { logger } from \"../utils\";\r\nconst menuList = [\"Home\", \"Playlist\", \"Album\", \"Artist\", \"Search\"];\r\nclass Index extends Component {\r\n  state = {};\r\n  componentDidMount() {\r\n    // console.log(this.props, \"cdm\");\r\n    axios.interceptors.response.use(\r\n      (response) => {\r\n        return response;\r\n      },\r\n      (error) => {\r\n        // console.log(error.response, \"error\");\r\n        const originalRequest = error.config;\r\n        if (error.response.status === 401 && !originalRequest._retry) {\r\n          originalRequest._retry = true;\r\n          console.log(\"Error happened\");\r\n          console.log(error);\r\n          // return window.location.reload();\r\n          return axios\r\n            .post(\"http://localhost:3000/refresh\", {\r\n              data: JSON.stringify({\r\n                refresh_token: localStorage.getItem(\r\n                  \"react-spotify-refresh-token\"\r\n                ),\r\n              }),\r\n            })\r\n            .then((res) => {\r\n              console.log(this, \"props\");\r\n              if (res.status === 200) {\r\n                // 1) put token to LocalStorage\r\n                localStorage.setItem(\r\n                  \"react-spotify-access-token\",\r\n                  res.data.access_token\r\n                );\r\n                logger.log(\"New token\", res.data);\r\n                logger.log(originalRequest);\r\n                this.props.setUser({ access_token: res.data.access_token });\r\n\r\n                // // 2) Change Authorization header\r\n                // axios.defaults.headers.common['Authorization'] =\r\n                //   'Bearer ' + localStorageService.getAccessToken();\r\n\r\n                // 3) return originalRequest object with Axios.\r\n                return axios(originalRequest);\r\n              }\r\n            });\r\n        }\r\n      }\r\n    );\r\n\r\n    let params = this.getHashParams();\r\n    this.handleHashParams(params);\r\n  }\r\n  handleHashParams = async () => {\r\n    logger.log(\"Params\", params);\r\n    // If access token doesn't exist in has params, try to take it from local storage\r\n    if (!(\"access_token\" in params)) {\r\n      const currentAccessToken = localStorage.getItem(\r\n        \"react-spotify-access-token\"\r\n      );\r\n\r\n      if (currentAccessToken) {\r\n        params.access_token = currentAccessToken;\r\n      }\r\n    }\r\n    logger.log(\"Params after\", params);\r\n    if (\"access_token\" in params) {\r\n      logger.log(\"access_token\" in params);\r\n      const metadata = await axios.get(\"https://api.spotify.com/v1/me\", {\r\n        headers: {\r\n          Authorization: `Bearer ${params.access_token}`,\r\n        },\r\n      });\r\n      console.log(metadata, \"metadata\");\r\n      //       localStorage.setItem(\r\n      //         \"react-spotify-access-token\",\r\n      //         params.access_token\r\n      //       );\r\n      //       if (params.refresh_token) {\r\n      //         localStorage.setItem(\r\n      //           \"react-spotify-refresh-token\",\r\n      //           params.refresh_token\r\n      //         );\r\n      //       }\r\n      //       let newUser = {\r\n      //         access_token: params.access_token,\r\n      //         displayName: data.display_name,\r\n      //         email: data.email,\r\n      //         id: data.id,\r\n      //         type: data.type,\r\n      //         country: data.country,\r\n      //         product: data.product,\r\n      //       };\r\n      //       logger.log(this.props.setUser);\r\n      //       this.setState({ loading: false });\r\n      //       this.logInUserAndGetInfo(newUser);\r\n      //       this.props.fetchRecentlyPlayed({ limit: 12 });\r\n      //     })\r\n      //     .catch((err) => {\r\n      //       console.log(err, \"fgjxfjxf\");\r\n      //       // 401 = Unauthorized - the access token is incorrect (expired)\r\n      //       if (true) {\r\n      //         // Check if refresh token exists\r\n      //         const refreshToken = localStorage.getItem(\r\n      //           \"react-spotify-refresh-token\"\r\n      //         );\r\n      //         if (refreshToken) {\r\n      //           // Send refresh token to server to acquire a new access token\r\n      //           axios\r\n      //             .post(\"http://localhost:3000/refresh\", {\r\n      //               data: JSON.stringify({\r\n      //                 refresh_token: refreshToken,\r\n      //               }),\r\n      //             })\r\n      //             .then((res) => {\r\n      //               logger.log(\"Refresh token response -\", res.data);\r\n      //               axios\r\n      //                 .get(\"https://api.spotify.com/v1/me\", {\r\n      //                   headers: {\r\n      //                     Authorization: `Bearer ${res.data.access_token}`,\r\n      //                   },\r\n      //                 })\r\n      //                 .then(({ data }) => {\r\n      //                   localStorage.setItem(\r\n      //                     \"react-spotify-access-token\",\r\n      //                     res.data.access_token\r\n      //                   );\r\n\r\n      //                   let newUser = {\r\n      //                     access_token: res.data.access_token,\r\n      //                     displayName: data.display_name,\r\n      //                     email: data.email,\r\n      //                     id: data.id,\r\n      //                     type: data.type,\r\n      //                     country: data.country,\r\n      //                     product: data.product,\r\n      //                   };\r\n      //                   this.logInUserAndGetInfo(newUser);\r\n      //                   this.props.fetchRecentlyPlayed({ limit: 12 });\r\n      //                 });\r\n      //             })\r\n      //             .catch((e) => {\r\n      //               logger.log(\"Refresh token error -\", e);\r\n      //             })\r\n      //             .finally(() => {\r\n      //               this.setState({ loading: false });\r\n      //             });\r\n      //         } else {\r\n      //           // Refresh token doesn't exist, the user is shown a 'login with Spotify button'\r\n      //           this.setState({ loading: false });\r\n      //         }\r\n      //       }\r\n      //     });\r\n      // } else {\r\n      //   // The user is shown a 'login with Spotify button'\r\n      //   this.setState({ loading: false });\r\n      // }\r\n    }\r\n  };\r\n  logInUserAndGetInfo = (newUser) => {\r\n    logger.log(\"LOG IN\", newUser);\r\n    const router = useRouter();\r\n    this.props.setUser(newUser); // set user in redux state\r\n    if (router.pathname === \"/\") {\r\n      Router.push(\"/browse/featured\"); // if there is no page the user wants to go to\r\n      // then go to the home page\r\n    } else {\r\n      // if there is a page the user wants to go to then just send them there\r\n      Router.push();\r\n    }\r\n  };\r\n\r\n  getHashParams() {\r\n    var hashParams = {};\r\n    var e,\r\n      r = /([^&;=]+)=?([^&;]*)/g,\r\n      q = window.location.hash.substring(1);\r\n    while ((e = r.exec(q))) {\r\n      hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    }\r\n    logger.log(hashParams, \"hashParams\");\r\n    return hashParams;\r\n  }\r\n  render() {\r\n    // console.log(this.props, \"user\");\r\n    return (\r\n      <div className=\"layout\">\r\n        <SpotifyApiAxiosContext.Provider value={axios}>\r\n          <SpotifyApiContext.Provider\r\n          // value={this.props.user.access_token}\r\n          >\r\n            <Sidebar />\r\n            <Content />\r\n            <Player />\r\n          </SpotifyApiContext.Provider>\r\n        </SpotifyApiAxiosContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.current_user,\r\n    backgroundImage: state.backgroundImage,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => dispatch({ type: actionTypes.SET_USER, user }),\r\n    fetchRecentlyPlayed: (options) =>\r\n      dispatch(actionTypes.fetchRecentlyPlayed(options)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Index));\r\n"]},"metadata":{},"sourceType":"module"}