{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport $axios from \"../../$axios\";\nexport var SET_USER = \"SET_USER\";\nexport var GET_RECENTLY_PLAYED = \"GET_RECENTLY_PLAYED\";\nexport var SET_RECENTLY_PLAYED = \"SET_RECENTLY_PLAYED\";\nexport var SET_PLAY_NOW = \"SET_PLAY_NOW\";\nexport var RESET_PLAY_NOW = \"RESET_PLAY_NOW\";\nexport var SET_CURRENTLY_PLAYING = \"SET_CURRENTLY_PLAYING\";\nexport var SET_IS_PLAYING = \"SET_IS_PLAYING\";\nexport var SET_BACKGROUND_IMAGE = \"SET_BACKGROUND_IMAGE\";\nexport var PLAY_SONG_START = \"PLAY_SONG_START\";\nexport var PLAY_SONG_SUCCESS = \"PLAY_SONG_SUCCESS\";\nexport var PLAY_SONG_FAIL = \"PLAY_SONG_FAIL\";\nexport var playSong = function playSong(uris, deviceId) {\n  console.log(uris, \"uris\");\n  return function (dispatch, getState) {\n    if (getState().current_user) {\n      dispatch(playSongStart());\n      $axios({\n        url: \"https://api.spotify.com/v1/me/player/play\",\n        method: \"PUT\",\n        data: uris\n      }).then(function () {\n        dispatch(playSongSuccess());\n      })[\"catch\"](function () {\n        dispatch(playSongFail());\n      });\n    }\n  };\n};\n\nvar playSongStart = function playSongStart() {\n  return {\n    type: PLAY_SONG_START\n  };\n};\n\nvar playSongSuccess = function playSongSuccess() {\n  return {\n    type: PLAY_SONG_SUCCESS\n  };\n};\n\nvar playSongFail = function playSongFail() {\n  return {\n    type: PLAY_SONG_FAIL\n  };\n};\n\nexport var pauseSong = function pauseSong() {\n  return function (dispatch, getState) {\n    if (!getState().isPlaying) {\n      $axios({\n        url: \"https://api.spotify.com/v1/me/player/pause\",\n        method: \"PUT\"\n      }).then(function (res) {\n        dispatch(setPauseSong());\n      })[\"catch\"](function (err) {\n        console.error(\"Playback cannot be paused, Your playback is probably already paused\");\n      });\n    } else {\n      console.error(\"Playback cannot be paused, Your playback is probably already paused\");\n    }\n  };\n};\n\nvar setPauseSong = function setPauseSong() {\n  return {\n    type: SET_IS_PLAYING\n  };\n};\n\nexport var fetchRecentlyPlayed = function fetchRecentlyPlayed(options) {\n  // console.log(options);\n  return function (dispatch) {\n    if (true) {\n      dispatch(getRecentlyPlayed());\n      $axios({\n        url: \"https://api.spotify.com/v1/me/player/recently-played\",\n        method: \"GET\",\n        params: _objectSpread({}, options)\n      }).then(function (res) {\n        // console.log(res.data.items);\n        dispatch(setRecentlyPlayed(res.data.items));\n      })[\"catch\"](function (err) {\n        console.error(\"There was an error getting recently played tracks\");\n      });\n    }\n  };\n};\n\nvar getRecentlyPlayed = function getRecentlyPlayed() {\n  return {\n    type: GET_RECENTLY_PLAYED\n  };\n};\n\nvar setRecentlyPlayed = function setRecentlyPlayed(data) {\n  return {\n    type: SET_RECENTLY_PLAYED,\n    recently_played: data\n  };\n};","map":null,"metadata":{},"sourceType":"module"}