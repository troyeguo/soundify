{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { withRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport songList from \"../mock/songs\";\nimport styles from \"../styles/player.module.css\";\nimport { connect } from \"react-redux\";\nimport AddDialog from \"./AddDialog\";\n\nclass Player extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"checkForPlayer\", () => {\n      if (window.Spotify) {\n        clearInterval(this.playerCheckInterval);\n        this.player = new window.Spotify.Player({\n          name: \"Idanlo's Spotify App\",\n          getOAuthToken: cb => {\n            cb(this.state.token);\n          }\n        });\n      }\n\n      if (this.player) {\n        this.createEventHandlers();\n        this.player.connect();\n      }\n    });\n\n    _defineProperty(this, \"createEventHandlers\", () => {\n      this.player.on(\"initialization_error\", e => {\n        console.error(\"Initialization error \", e);\n        this.setState({\n          player_init_error: true\n        });\n      });\n      this.player.on(\"authentication_error\", e => console.error(\"Authentication error \", e));\n      this.player.on(\"account_error\", e => console.error(\"Account error \", e));\n      this.player.on(\"playback_error\", e => console.error(\"Playback error \", e));\n      this.player.on(\"player_state_changed\", state => {\n        if (state) {\n          console.log(\"player state changed\", state);\n          let {\n            duration,\n            position\n          } = state; // duration = 100%\n          // position = ?%\n\n          let val = position * 100 / duration;\n          this.setState({\n            playingInfo: state,\n            playing: !state.paused,\n            positionSliderValue: val\n          }); // Music started playing, start the position interval\n\n          if (!this.props.isPlaying && !state.paused) {\n            this.positionCheckInterval = setInterval(() => {\n              this.checkChangePosition();\n            }, 1000);\n          } // Music stopped playing, clear the position interval\n\n\n          if (this.props.isPlaying && state.paused) {\n            clearInterval(this.positionCheckInterval);\n          }\n\n          if (this.props.isPlaying === state.paused) {\n            this.props.setIsPlaying(!state.paused);\n          }\n\n          if (!this.props.currentlyPlaying || this.props.currentlyPlaying !== state.track_window.current_track.name) {\n            let {\n              current_track\n            } = state.track_window;\n            this.props.setCurrentlyPlaying(current_track.name);\n          }\n        }\n      });\n      this.player.on(\"ready\", data => {\n        let {\n          device_id\n        } = data;\n        console.log(\"PLAYER CONNECTED \", device_id); // await this.setState({ deviceId: device_id });\n\n        this.setState({\n          deviceId: device_id\n        }, () => {\n          this.transferPlaybackHere();\n        });\n        this.player.getVolume().then(vol => {\n          let volume = vol * 100;\n          this.setState({\n            volumeSliderValue: volume\n          });\n        });\n      });\n    });\n\n    _defineProperty(this, \"transferPlaybackHere\", () => {\n      // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\n      // for normal users they have to go in the spotify app/website and change the device manually\n      // user type is stored in redux state => this.props.user.type\n      const {\n        deviceId\n      } = this.state;\n      fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${this.state.token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          device_ids: [deviceId],\n          play: false\n        })\n      }).then(res => {\n        console.log(\"status\", res.status);\n\n        if (res.status === 204) {\n          axios.get(\"https://api.spotify.com/v1/me/player\", {\n            headers: {\n              Authorization: `Bearer ${this.state.token}`\n            }\n          }).then(() => {\n            // Transferred playback successfully, get current timestamp\n            this.checkChangePosition();\n          }).catch(err => {\n            console.log(err);\n          });\n        }\n      }).catch(e => console.error(e)); // console.log('Hello', this.props);\n      // if (this.props.user.product === 'premium') {\n      // } else {\n      //   console.log(\n      //     'Cannot transfer playback automatically because you are not a premium user.'\n      //   );\n      // }\n    });\n\n    _defineProperty(this, \"onPrevClick\", () => {\n      this.player.previousTrack();\n    });\n\n    _defineProperty(this, \"onPlayClick\", () => {\n      this.player.togglePlay();\n    });\n\n    _defineProperty(this, \"onNextClick\", () => {\n      this.player.nextTrack();\n    });\n\n    this.state = {\n      deviceId: null,\n      playingInfo: null,\n      playing: false,\n      player_init_error: false\n    };\n    this.player = null;\n  }\n\n  componentDidMount() {\n    this.setState({\n      token: localStorage.getItem(\"react-spotify-access-token\")\n    });\n    console.log(window.Spotify, \"etata\");\n\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      window.Spotify = Spotify;\n    };\n\n    console.log(window.Spotify, \"etata\");\n    this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n  }\n\n  render() {\n    console.log(this.props.user, \"rus\");\n\n    if (!this.props.recently_played) {\n      return null;\n    }\n\n    let recentTrack = this.props.recently_played[0];\n    return __jsx(\"div\", {\n      className: styles.player\n    }, __jsx(\"div\", {\n      className: styles.playerHeader\n    }, __jsx(\"div\", null, __jsx(\"img\", {\n      className: styles.avatar,\n      src: \"/images/avatar.jpeg\",\n      alt: \"\"\n    }), __jsx(\"span\", {\n      className: styles.nickname\n    }, \"Troye Guo\"), __jsx(\"span\", {\n      className: styles.triangle\n    }))), __jsx(\"div\", {\n      className: styles.playerCoverContainer\n    }, __jsx(\"img\", {\n      className: styles.playerCover,\n      src: recentTrack.track.album.images[1].url,\n      alt: \"\"\n    })), __jsx(\"div\", {\n      className: styles.musicInfo\n    }, __jsx(\"div\", {\n      className: styles.songName\n    }, recentTrack.track.name), __jsx(\"div\", {\n      className: styles.artistName\n    }, recentTrack.track.artists[0].name)), __jsx(\"div\", {\n      className: styles.playerPanel\n    }, __jsx(\"img\", {\n      src: \"/icons/favorite.svg\",\n      alt: \"\"\n    }), __jsx(\"img\", {\n      src: \"/icons/prev.svg\",\n      alt: \"\",\n      onClick: this.onPrevClick\n    }), __jsx(\"img\", {\n      src: \"/icons/play.svg\",\n      alt: \"\",\n      style: {\n        width: \"45px\"\n      },\n      onClick: this.onPlayClick\n    }), __jsx(\"img\", {\n      src: \"/icons/next.svg\",\n      alt: \"\",\n      onClick: this.onNextClick\n    }), __jsx(\"img\", {\n      src: \"/icons/shuffle.svg\",\n      alt: \"\",\n      style: {\n        width: \"25px\"\n      }\n    })), __jsx(\"div\", {\n      className: styles.playerNext\n    }, __jsx(\"div\", {\n      className: styles.nextText\n    }, \"Next\"), __jsx(\"div\", {\n      className: styles.nextListContainer\n    }, __jsx(\"ul\", {\n      className: styles.nextList\n    }, songList().map(item => {\n      return __jsx(\"li\", {\n        key: item.id,\n        className: styles.nextListItem\n      }, __jsx(\"div\", {\n        className: styles.nextSong\n      }, item.song), __jsx(\"p\", {\n        className: styles.nextArtistName,\n        style: {\n          fontSize: \"14px\",\n          lineHeight: \"20px\",\n          color: \"rgba(61, 63, 134, 0.61)\"\n        }\n      }, item.artist), __jsx(\"img\", {\n        src: \"/icons/play.svg\",\n        alt: \"\",\n        className: styles.nextButton\n      }));\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    recently_played: state.recently_played,\n    user: state.current_user,\n    playNow: state.play_now,\n    currentlyPlaying: state.currently_playing,\n    isPlaying: state.isPlaying\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUser: user => dispatch({\n      type: actionTypes.SET_USER,\n      user\n    }),\n    fetchRecentlyPlayed: options => dispatch(actionTypes.fetchRecentlyPlayed(options)),\n    resetPlayNow: () => dispatch({\n      type: actionTypes.RESET_PLAY_NOW\n    }),\n    setCurrentlyPlaying: song => dispatch({\n      type: actionTypes.SET_CURRENTLY_PLAYING,\n      song\n    }),\n    setIsPlaying: isPlaying => dispatch({\n      type: actionTypes.SET_IS_PLAYING,\n      isPlaying\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));","map":{"version":3,"sources":["D:/1-Project/soundify-web/components/Player.js"],"names":["React","Component","withRouter","useState","songList","styles","connect","AddDialog","Player","constructor","props","window","Spotify","clearInterval","playerCheckInterval","player","name","getOAuthToken","cb","state","token","createEventHandlers","on","e","console","error","setState","player_init_error","log","duration","position","val","playingInfo","playing","paused","positionSliderValue","isPlaying","positionCheckInterval","setInterval","checkChangePosition","setIsPlaying","currentlyPlaying","track_window","current_track","setCurrentlyPlaying","data","device_id","deviceId","transferPlaybackHere","getVolume","then","vol","volume","volumeSliderValue","fetch","method","headers","Authorization","body","JSON","stringify","device_ids","play","res","status","axios","get","catch","err","previousTrack","togglePlay","nextTrack","componentDidMount","localStorage","getItem","onSpotifyWebPlaybackSDKReady","checkForPlayer","render","user","recently_played","recentTrack","playerHeader","avatar","nickname","triangle","playerCoverContainer","playerCover","track","album","images","url","musicInfo","songName","artistName","artists","playerPanel","onPrevClick","width","onPlayClick","onNextClick","playerNext","nextText","nextListContainer","nextList","map","item","id","nextListItem","nextSong","song","nextArtistName","fontSize","lineHeight","color","artist","nextButton","mapStateToProps","current_user","playNow","play_now","currently_playing","mapDispatchToProps","dispatch","setUser","type","actionTypes","SET_USER","fetchRecentlyPlayed","options","resetPlayNow","RESET_PLAY_NOW","SET_CURRENTLY_PLAYING","SET_IS_PLAYING"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"next/router\";\r\nimport { useState } from \"react\";\r\nimport songList from \"../mock/songs\";\r\nimport styles from \"../styles/player.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport AddDialog from \"./AddDialog\";\r\n\r\nclass Player extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      deviceId: null,\r\n      playingInfo: null,\r\n      playing: false,\r\n      player_init_error: false,\r\n    };\r\n\r\n    this.player = null;\r\n  }\r\n  componentDidMount() {\r\n    this.setState({\r\n      token: localStorage.getItem(\"react-spotify-access-token\"),\r\n    });\r\n    console.log(window.Spotify, \"etata\");\r\n    window.onSpotifyWebPlaybackSDKReady = () => {\r\n      window.Spotify = Spotify;\r\n    };\r\n    console.log(window.Spotify, \"etata\");\r\n    this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\r\n  }\r\n  checkForPlayer = () => {\r\n    if (window.Spotify) {\r\n      clearInterval(this.playerCheckInterval);\r\n      this.player = new window.Spotify.Player({\r\n        name: \"Idanlo's Spotify App\",\r\n        getOAuthToken: (cb) => {\r\n          cb(this.state.token);\r\n        },\r\n      });\r\n    }\r\n\r\n    if (this.player) {\r\n      this.createEventHandlers();\r\n\r\n      this.player.connect();\r\n    }\r\n  };\r\n  createEventHandlers = () => {\r\n    this.player.on(\"initialization_error\", (e) => {\r\n      console.error(\"Initialization error \", e);\r\n      this.setState({ player_init_error: true });\r\n    });\r\n    this.player.on(\"authentication_error\", (e) =>\r\n      console.error(\"Authentication error \", e)\r\n    );\r\n    this.player.on(\"account_error\", (e) => console.error(\"Account error \", e));\r\n    this.player.on(\"playback_error\", (e) =>\r\n      console.error(\"Playback error \", e)\r\n    );\r\n\r\n    this.player.on(\"player_state_changed\", (state) => {\r\n      if (state) {\r\n        console.log(\"player state changed\", state);\r\n        let { duration, position } = state;\r\n        // duration = 100%\r\n        // position = ?%\r\n        let val = (position * 100) / duration;\r\n        this.setState({\r\n          playingInfo: state,\r\n          playing: !state.paused,\r\n          positionSliderValue: val,\r\n        });\r\n\r\n        // Music started playing, start the position interval\r\n        if (!this.props.isPlaying && !state.paused) {\r\n          this.positionCheckInterval = setInterval(() => {\r\n            this.checkChangePosition();\r\n          }, 1000);\r\n        }\r\n\r\n        // Music stopped playing, clear the position interval\r\n        if (this.props.isPlaying && state.paused) {\r\n          clearInterval(this.positionCheckInterval);\r\n        }\r\n\r\n        if (this.props.isPlaying === state.paused) {\r\n          this.props.setIsPlaying(!state.paused);\r\n        }\r\n\r\n        if (\r\n          !this.props.currentlyPlaying ||\r\n          this.props.currentlyPlaying !== state.track_window.current_track.name\r\n        ) {\r\n          let { current_track } = state.track_window;\r\n          this.props.setCurrentlyPlaying(current_track.name);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.player.on(\"ready\", (data) => {\r\n      let { device_id } = data;\r\n      console.log(\"PLAYER CONNECTED \", device_id);\r\n      // await this.setState({ deviceId: device_id });\r\n      this.setState({ deviceId: device_id }, () => {\r\n        this.transferPlaybackHere();\r\n      });\r\n      this.player.getVolume().then((vol) => {\r\n        let volume = vol * 100;\r\n        this.setState({ volumeSliderValue: volume });\r\n      });\r\n    });\r\n  };\r\n  transferPlaybackHere = () => {\r\n    // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\r\n    // for normal users they have to go in the spotify app/website and change the device manually\r\n    // user type is stored in redux state => this.props.user.type\r\n    const { deviceId } = this.state;\r\n    fetch(\"https://api.spotify.com/v1/me/player\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Authorization: `Bearer ${this.state.token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        device_ids: [deviceId],\r\n        play: false,\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        console.log(\"status\", res.status);\r\n        if (res.status === 204) {\r\n          axios\r\n            .get(\"https://api.spotify.com/v1/me/player\", {\r\n              headers: {\r\n                Authorization: `Bearer ${this.state.token}`,\r\n              },\r\n            })\r\n            .then(() => {\r\n              // Transferred playback successfully, get current timestamp\r\n              this.checkChangePosition();\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n\r\n    // console.log('Hello', this.props);\r\n    // if (this.props.user.product === 'premium') {\r\n    // } else {\r\n    //   console.log(\r\n    //     'Cannot transfer playback automatically because you are not a premium user.'\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  onPrevClick = () => {\r\n    this.player.previousTrack();\r\n  };\r\n\r\n  onPlayClick = () => {\r\n    this.player.togglePlay();\r\n  };\r\n\r\n  onNextClick = () => {\r\n    this.player.nextTrack();\r\n  };\r\n  render() {\r\n    console.log(this.props.user, \"rus\");\r\n    if (!this.props.recently_played) {\r\n      return null;\r\n    }\r\n    let recentTrack = this.props.recently_played[0];\r\n    return (\r\n      <div className={styles.player}>\r\n        <div className={styles.playerHeader}>\r\n          <div>\r\n            <img className={styles.avatar} src=\"/images/avatar.jpeg\" alt=\"\" />\r\n            <span className={styles.nickname}>Troye Guo</span>\r\n            <span className={styles.triangle}></span>\r\n          </div>\r\n        </div>\r\n        <div className={styles.playerCoverContainer}>\r\n          <img\r\n            className={styles.playerCover}\r\n            src={recentTrack.track.album.images[1].url}\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className={styles.musicInfo}>\r\n          <div className={styles.songName}>{recentTrack.track.name}</div>\r\n          <div className={styles.artistName}>\r\n            {recentTrack.track.artists[0].name}\r\n          </div>\r\n        </div>\r\n        <div className={styles.playerPanel}>\r\n          <img src=\"/icons/favorite.svg\" alt=\"\" />\r\n          <img src=\"/icons/prev.svg\" alt=\"\" onClick={this.onPrevClick} />\r\n          <img\r\n            src=\"/icons/play.svg\"\r\n            alt=\"\"\r\n            style={{ width: \"45px\" }}\r\n            onClick={this.onPlayClick}\r\n          />\r\n          <img src=\"/icons/next.svg\" alt=\"\" onClick={this.onNextClick} />\r\n          <img src=\"/icons/shuffle.svg\" alt=\"\" style={{ width: \"25px\" }} />\r\n        </div>\r\n\r\n        <div className={styles.playerNext}>\r\n          <div className={styles.nextText}>Next</div>\r\n          <div className={styles.nextListContainer}>\r\n            <ul className={styles.nextList}>\r\n              {songList().map((item) => {\r\n                return (\r\n                  <li key={item.id} className={styles.nextListItem}>\r\n                    <div className={styles.nextSong}>{item.song}</div>\r\n                    <p\r\n                      className={styles.nextArtistName}\r\n                      style={{\r\n                        fontSize: \"14px\",\r\n                        lineHeight: \"20px\",\r\n                        color: \"rgba(61, 63, 134, 0.61)\",\r\n                      }}\r\n                    >\r\n                      {item.artist}\r\n                    </p>\r\n                    <img\r\n                      src=\"/icons/play.svg\"\r\n                      alt=\"\"\r\n                      className={styles.nextButton}\r\n                    />\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    recently_played: state.recently_played,\r\n    user: state.current_user,\r\n    playNow: state.play_now,\r\n    currentlyPlaying: state.currently_playing,\r\n    isPlaying: state.isPlaying,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => dispatch({ type: actionTypes.SET_USER, user }),\r\n    fetchRecentlyPlayed: (options) =>\r\n      dispatch(actionTypes.fetchRecentlyPlayed(options)),\r\n    resetPlayNow: () => dispatch({ type: actionTypes.RESET_PLAY_NOW }),\r\n    setCurrentlyPlaying: (song) =>\r\n      dispatch({ type: actionTypes.SET_CURRENTLY_PLAYING, song }),\r\n    setIsPlaying: (isPlaying) =>\r\n      dispatch({ type: actionTypes.SET_IS_PLAYING, isPlaying }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));\r\n"]},"metadata":{},"sourceType":"module"}