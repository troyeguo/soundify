{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { withRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport songList from \"../mock/songs\";\nimport styles from \"../styles/player.module.css\";\nimport { connect } from \"react-redux\";\nimport AddDialog from \"./AddDialog\";\n\nclass Player extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {});\n  }\n\n  render() {\n    // console.log(this.props.recently_played, \"recent\");\n    let recentTrack = this.props.recently_played ? this.props.recently_played[0] : null;\n    return __jsx(\"div\", {\n      className: styles.player\n    }, __jsx(\"div\", {\n      className: styles.playerHeader\n    }, __jsx(\"div\", null, __jsx(\"img\", {\n      className: styles.avatar,\n      src: \"/images/avatar.jpeg\",\n      alt: \"\"\n    }), __jsx(\"span\", {\n      className: styles.nickname\n    }, \"Troye Guo\"), __jsx(\"span\", {\n      className: styles.triangle\n    }))), __jsx(\"div\", {\n      className: styles.playerCoverContainer\n    }, __jsx(\"img\", {\n      className: styles.playerCover,\n      src: recentTrack.track.album.image[1].url,\n      alt: \"\"\n    })), __jsx(\"div\", {\n      className: styles.musicInfo\n    }, __jsx(\"div\", {\n      className: styles.songName\n    }, \"You Need to Calm Down\"), __jsx(\"div\", {\n      className: styles.artistName\n    }, \"Taylor Swift\")), __jsx(\"div\", {\n      className: styles.playerPanel\n    }, __jsx(\"img\", {\n      src: \"/icons/favorite.svg\",\n      alt: \"\"\n    }), __jsx(\"img\", {\n      src: \"/icons/prev.svg\",\n      alt: \"\"\n    }), __jsx(\"img\", {\n      src: \"/icons/play.svg\",\n      alt: \"\",\n      style: {\n        width: \"45px\"\n      }\n    }), __jsx(\"img\", {\n      src: \"/icons/next.svg\",\n      alt: \"\"\n    }), __jsx(\"img\", {\n      src: \"/icons/shuffle.svg\",\n      alt: \"\",\n      style: {\n        width: \"25px\"\n      }\n    })), __jsx(\"div\", {\n      className: styles.playerNext\n    }, __jsx(\"div\", {\n      className: styles.nextText\n    }, \"Next\"), __jsx(\"div\", {\n      className: styles.nextListContainer\n    }, __jsx(\"ul\", {\n      className: styles.nextList\n    }, songList().map(item => {\n      return __jsx(\"li\", {\n        key: item.id,\n        className: styles.nextListItem\n      }, __jsx(\"div\", {\n        className: styles.nextSong\n      }, item.song), __jsx(\"p\", {\n        className: styles.nextArtistName,\n        style: {\n          fontSize: \"14px\",\n          lineHeight: \"20px\",\n          color: \"rgba(61, 63, 134, 0.61)\"\n        }\n      }, item.artist), __jsx(\"img\", {\n        src: \"/icons/play.svg\",\n        alt: \"\",\n        className: styles.nextButton\n      }));\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.current_user,\n    backgroundImage: state.backgroundImage,\n    recently_played: state.recently_played\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUser: user => dispatch({\n      type: actionTypes.SET_USER,\n      user\n    }),\n    fetchRecentlyPlayed: options => dispatch(actionTypes.fetchRecentlyPlayed(options))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));","map":{"version":3,"sources":["D:/1-Project/soundify-web/components/Player.js"],"names":["React","Component","withRouter","useState","songList","styles","connect","AddDialog","Player","render","recentTrack","props","recently_played","player","playerHeader","avatar","nickname","triangle","playerCoverContainer","playerCover","track","album","image","url","musicInfo","songName","artistName","playerPanel","width","playerNext","nextText","nextListContainer","nextList","map","item","id","nextListItem","nextSong","song","nextArtistName","fontSize","lineHeight","color","artist","nextButton","mapStateToProps","state","user","current_user","backgroundImage","mapDispatchToProps","dispatch","setUser","type","actionTypes","SET_USER","fetchRecentlyPlayed","options"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"next/router\";\r\nimport { useState } from \"react\";\r\nimport songList from \"../mock/songs\";\r\nimport styles from \"../styles/player.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport AddDialog from \"./AddDialog\";\r\nclass Player extends Component {\r\n  state = {};\r\n  render() {\r\n    // console.log(this.props.recently_played, \"recent\");\r\n    let recentTrack = this.props.recently_played\r\n      ? this.props.recently_played[0]\r\n      : null;\r\n    return (\r\n      <div className={styles.player}>\r\n        <div className={styles.playerHeader}>\r\n          <div>\r\n            <img className={styles.avatar} src={\"/images/avatar.jpeg\"} alt=\"\" />\r\n            <span className={styles.nickname}>Troye Guo</span>\r\n            <span className={styles.triangle}></span>\r\n          </div>\r\n        </div>\r\n        <div className={styles.playerCoverContainer}>\r\n          <img\r\n            className={styles.playerCover}\r\n            src={recentTrack.track.album.image[1].url}\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className={styles.musicInfo}>\r\n          <div className={styles.songName}>You Need to Calm Down</div>\r\n          <div className={styles.artistName}>Taylor Swift</div>\r\n        </div>\r\n        <div className={styles.playerPanel}>\r\n          <img src=\"/icons/favorite.svg\" alt=\"\" />\r\n          <img src=\"/icons/prev.svg\" alt=\"\" />\r\n          <img src=\"/icons/play.svg\" alt=\"\" style={{ width: \"45px\" }} />\r\n          <img src=\"/icons/next.svg\" alt=\"\" />\r\n          <img src=\"/icons/shuffle.svg\" alt=\"\" style={{ width: \"25px\" }} />\r\n        </div>\r\n\r\n        <div className={styles.playerNext}>\r\n          <div className={styles.nextText}>Next</div>\r\n          <div className={styles.nextListContainer}>\r\n            <ul className={styles.nextList}>\r\n              {songList().map((item) => {\r\n                return (\r\n                  <li key={item.id} className={styles.nextListItem}>\r\n                    <div className={styles.nextSong}>{item.song}</div>\r\n                    <p\r\n                      className={styles.nextArtistName}\r\n                      style={{\r\n                        fontSize: \"14px\",\r\n                        lineHeight: \"20px\",\r\n                        color: \"rgba(61, 63, 134, 0.61)\",\r\n                      }}\r\n                    >\r\n                      {item.artist}\r\n                    </p>\r\n                    <img\r\n                      src=\"/icons/play.svg\"\r\n                      alt=\"\"\r\n                      className={styles.nextButton}\r\n                    />\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.current_user,\r\n    backgroundImage: state.backgroundImage,\r\n    recently_played: state.recently_played,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUser: (user) => dispatch({ type: actionTypes.SET_USER, user }),\r\n    fetchRecentlyPlayed: (options) =>\r\n      dispatch(actionTypes.fetchRecentlyPlayed(options)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));\r\n"]},"metadata":{},"sourceType":"module"}