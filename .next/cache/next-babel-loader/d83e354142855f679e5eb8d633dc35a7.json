{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport { serialize } from '../utils';\nimport { SpotifyApiContext, SpotifyApiAxiosContext } from '../';\n\nfunction useApiRequest(url, options = {}) {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        loading = _React$useState2[0],\n        setLoading = _React$useState2[1];\n\n  const _React$useState3 = React.useState(null),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        error = _React$useState4[0],\n        setError = _React$useState4[1];\n\n  const _React$useState5 = React.useState(null),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        data = _React$useState6[0],\n        setData = _React$useState6[1];\n\n  const token = React.useContext(SpotifyApiContext);\n  const axios = React.useContext(SpotifyApiAxiosContext);\n  React.useEffect(() => {\n    function loadData() {\n      return _loadData.apply(this, arguments);\n    }\n\n    function _loadData() {\n      _loadData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        var res, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setLoading(true);\n              res = null;\n              data = null;\n\n              if (!axios) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 7;\n              return axios.get(url + serialize(options), {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n\n            case 7:\n              res = _context.sent;\n              data = res.data;\n              _context.next = 17;\n              break;\n\n            case 11:\n              _context.next = 13;\n              return fetch(url + serialize(options), {\n                method: 'GET',\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n\n            case 13:\n              res = _context.sent;\n              _context.next = 16;\n              return res.json();\n\n            case 16:\n              data = _context.sent;\n\n            case 17:\n              setLoading(false);\n\n              if (data.error) {\n                setError(data.error);\n              } else if (res.status !== 200) {\n                setError({\n                  status: res.status,\n                  message: res.statusText\n                });\n              } else {\n                setData(data);\n                setError(null);\n              }\n\n              _context.next = 26;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](0);\n              setLoading(false);\n              setError(_context.t0);\n              setData(null);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 21]]);\n      }));\n      return _loadData.apply(this, arguments);\n    }\n\n    loadData();\n  }, [url, options.ids, options.q, token]);\n  return {\n    data,\n    loading,\n    error\n  };\n}\n\nexport default useApiRequest;","map":null,"metadata":{},"sourceType":"module"}