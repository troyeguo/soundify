{"ast":null,"code":"import { get, has } from 'lodash/object';\n/**\n * Take the user object from Firebase (from either the Firebase admin SDK or\n * or the client-side Firebase JS SDK) and return a consistent AuthUser object.\n * @param {Object} firebaseUser - A decoded Firebase user token or JS SDK\n *   Firebase user object.\n * @return {Object|null} AuthUser - The user object.\n * @return {String} AuthUser.id - The user's ID\n * @return {String} AuthUser.email - The user's email\n * @return {Boolean} AuthUser.emailVerified - Whether the user has verified their email\n */\n\nexport const createAuthUser = firebaseUser => {\n  if (!firebaseUser || !firebaseUser.uid) {\n    return null;\n  }\n\n  return {\n    id: get(firebaseUser, 'uid'),\n    email: get(firebaseUser, 'email'),\n    emailVerified: has(firebaseUser, 'emailVerified') ? get(firebaseUser, 'emailVerified') // Firebase JS SDK\n    : get(firebaseUser, 'email_verified') // Firebase admin SDK\n\n  };\n};\n/**\n * Create an object with an AuthUser object and AuthUserToken value.\n * @param {Object} firebaseUser - A decoded Firebase user token or JS SDK\n *   Firebase user object.\n * @param {String} firebaseToken - A Firebase auth token string.\n * @return {Object|null} AuthUserInfo - The auth user info object.\n * @return {String} AuthUserInfo.AuthUser - An AuthUser object (see\n *   `createAuthUser` above).\n * @return {String} AuthUser.token - The user's encoded Firebase token.\n */\n\nexport const createAuthUserInfo = ({\n  firebaseUser = null,\n  token = null\n} = {}) => {\n  return {\n    AuthUser: createAuthUser(firebaseUser),\n    token\n  };\n};","map":{"version":3,"sources":["D:/1-Project/soundify-web/utils/auth/user.js"],"names":["get","has","createAuthUser","firebaseUser","uid","id","email","emailVerified","createAuthUserInfo","token","AuthUser"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,QAAyB,eAAzB;AAEA;;;;;;;;;;;AAUA,OAAO,MAAMC,cAAc,GAAGC,YAAY,IAAI;AAC5C,MAAI,CAACA,YAAD,IAAiB,CAACA,YAAY,CAACC,GAAnC,EAAwC;AACtC,WAAO,IAAP;AACD;;AACD,SAAO;AACLC,IAAAA,EAAE,EAAEL,GAAG,CAACG,YAAD,EAAe,KAAf,CADF;AAELG,IAAAA,KAAK,EAAEN,GAAG,CAACG,YAAD,EAAe,OAAf,CAFL;AAGLI,IAAAA,aAAa,EAAEN,GAAG,CAACE,YAAD,EAAe,eAAf,CAAH,GACXH,GAAG,CAACG,YAAD,EAAe,eAAf,CADQ,CACwB;AADxB,MAEXH,GAAG,CAACG,YAAD,EAAe,gBAAf,CALF,CAKoC;;AALpC,GAAP;AAOD,CAXM;AAaP;;;;;;;;;;;AAUA,OAAO,MAAMK,kBAAkB,GAAG,CAAC;AACjCL,EAAAA,YAAY,GAAG,IADkB;AAEjCM,EAAAA,KAAK,GAAG;AAFyB,IAG/B,EAH8B,KAGvB;AACT,SAAO;AACLC,IAAAA,QAAQ,EAAER,cAAc,CAACC,YAAD,CADnB;AAELM,IAAAA;AAFK,GAAP;AAID,CARM","sourcesContent":["import { get, has } from 'lodash/object'\n\n/**\n * Take the user object from Firebase (from either the Firebase admin SDK or\n * or the client-side Firebase JS SDK) and return a consistent AuthUser object.\n * @param {Object} firebaseUser - A decoded Firebase user token or JS SDK\n *   Firebase user object.\n * @return {Object|null} AuthUser - The user object.\n * @return {String} AuthUser.id - The user's ID\n * @return {String} AuthUser.email - The user's email\n * @return {Boolean} AuthUser.emailVerified - Whether the user has verified their email\n */\nexport const createAuthUser = firebaseUser => {\n  if (!firebaseUser || !firebaseUser.uid) {\n    return null\n  }\n  return {\n    id: get(firebaseUser, 'uid'),\n    email: get(firebaseUser, 'email'),\n    emailVerified: has(firebaseUser, 'emailVerified')\n      ? get(firebaseUser, 'emailVerified') // Firebase JS SDK\n      : get(firebaseUser, 'email_verified'), // Firebase admin SDK\n  }\n}\n\n/**\n * Create an object with an AuthUser object and AuthUserToken value.\n * @param {Object} firebaseUser - A decoded Firebase user token or JS SDK\n *   Firebase user object.\n * @param {String} firebaseToken - A Firebase auth token string.\n * @return {Object|null} AuthUserInfo - The auth user info object.\n * @return {String} AuthUserInfo.AuthUser - An AuthUser object (see\n *   `createAuthUser` above).\n * @return {String} AuthUser.token - The user's encoded Firebase token.\n */\nexport const createAuthUserInfo = ({\n  firebaseUser = null,\n  token = null,\n} = {}) => {\n  return {\n    AuthUser: createAuthUser(firebaseUser),\n    token,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}