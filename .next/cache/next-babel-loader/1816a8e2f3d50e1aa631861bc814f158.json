{"ast":null,"code":"var _jsxFileName = \"D:\\\\1-Project\\\\soundify-web\\\\utils\\\\pageWrappers\\\\withAuthUser.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint react/jsx-props-no-spreading: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { get, set } from 'lodash/object';\nimport { AuthUserInfoContext, useFirebaseAuth } from '../auth/hooks';\nimport { createAuthUser, createAuthUserInfo } from '../auth/user'; // Gets the authenticated user from the Firebase JS SDK, when client-side,\n// or from the request object, when server-side. Add the AuthUserInfo to\n// context.\n\nexport default (ComposedComponent => {\n  const WithAuthUserComp = props => {\n    const {\n      AuthUserInfo\n    } = props,\n          otherProps = _objectWithoutProperties(props, [\"AuthUserInfo\"]); // We'll use the authed user from client-side auth (Firebase JS SDK)\n    // when available. On the server side, we'll use the authed user from\n    // the session. This allows us to server-render while also using Firebase's\n    // client-side auth functionality.\n\n\n    const {\n      user: firebaseUser\n    } = useFirebaseAuth();\n    const AuthUserFromClient = createAuthUser(firebaseUser);\n    const {\n      AuthUser: AuthUserFromSession,\n      token\n    } = AuthUserInfo;\n    const AuthUser = AuthUserFromClient || AuthUserFromSession || null;\n    return __jsx(AuthUserInfoContext.Provider, {\n      value: {\n        AuthUser,\n        token\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }\n    }, __jsx(ComposedComponent, _extends({}, otherProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  WithAuthUserComp.getInitialProps = async ctx => {\n    const {\n      req,\n      res\n    } = ctx; // Get the AuthUserInfo object.\n\n    let AuthUserInfo;\n\n    if (true) {\n      // If server-side, get AuthUserInfo from the session in the request.\n      // Don't include server middleware in the client JS bundle. See:\n      // https://arunoda.me/blog/ssr-and-server-only-modules\n      const {\n        addSession\n      } = require('../middleware/cookieSession');\n\n      addSession(req, res);\n      AuthUserInfo = createAuthUserInfo({\n        firebaseUser: get(req, 'session.decodedToken', null),\n        token: get(req, 'session.token', null)\n      });\n    } else {\n      // If client-side, get AuthUserInfo from stored data. We store it\n      // in _document.js. See:\n      // https://github.com/zeit/next.js/issues/2252#issuecomment-353992669\n      try {\n        const jsonData = JSON.parse(window.document.getElementById('__MY_AUTH_USER_INFO').textContent);\n\n        if (jsonData) {\n          AuthUserInfo = jsonData;\n        } else {\n          // Use the default (unauthed) user info if there's no data.\n          AuthUserInfo = createAuthUserInfo();\n        }\n      } catch (e) {\n        // If there's some error, use the default (unauthed) user info.\n        AuthUserInfo = createAuthUserInfo();\n      }\n    } // Explicitly add the user to a custom prop in the getInitialProps\n    // context for ease of use in child components.\n\n\n    set(ctx, 'myCustomData.AuthUserInfo', AuthUserInfo); // Evaluate the composed component's getInitialProps().\n\n    let composedInitialProps = {};\n\n    if (ComposedComponent.getInitialProps) {\n      composedInitialProps = await ComposedComponent.getInitialProps(ctx);\n    }\n\n    return _objectSpread({}, composedInitialProps, {\n      AuthUserInfo\n    });\n  };\n\n  WithAuthUserComp.displayName = `WithAuthUser(${ComposedComponent.displayName})`;\n  WithAuthUserComp.propTypes = {\n    AuthUserInfo: PropTypes.shape({\n      AuthUser: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n        emailVerified: PropTypes.bool.isRequired\n      }),\n      token: PropTypes.string\n    }).isRequired\n  };\n  WithAuthUserComp.defaultProps = {};\n  return WithAuthUserComp;\n});","map":{"version":3,"sources":["D:/1-Project/soundify-web/utils/pageWrappers/withAuthUser.js"],"names":["React","PropTypes","get","set","AuthUserInfoContext","useFirebaseAuth","createAuthUser","createAuthUserInfo","ComposedComponent","WithAuthUserComp","props","AuthUserInfo","otherProps","user","firebaseUser","AuthUserFromClient","AuthUser","AuthUserFromSession","token","getInitialProps","ctx","req","res","addSession","require","jsonData","JSON","parse","window","document","getElementById","textContent","e","composedInitialProps","displayName","propTypes","shape","id","string","isRequired","email","emailVerified","bool","defaultProps"],"mappings":"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","sourcesContent":["/* eslint react/jsx-props-no-spreading: 0 */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { get, set } from 'lodash/object'\nimport { AuthUserInfoContext, useFirebaseAuth } from '../auth/hooks'\nimport { createAuthUser, createAuthUserInfo } from '../auth/user'\n\n// Gets the authenticated user from the Firebase JS SDK, when client-side,\n// or from the request object, when server-side. Add the AuthUserInfo to\n// context.\nexport default ComposedComponent => {\n  const WithAuthUserComp = props => {\n    const { AuthUserInfo, ...otherProps } = props\n\n    // We'll use the authed user from client-side auth (Firebase JS SDK)\n    // when available. On the server side, we'll use the authed user from\n    // the session. This allows us to server-render while also using Firebase's\n    // client-side auth functionality.\n    const { user: firebaseUser } = useFirebaseAuth()\n    const AuthUserFromClient = createAuthUser(firebaseUser)\n    const { AuthUser: AuthUserFromSession, token } = AuthUserInfo\n    const AuthUser = AuthUserFromClient || AuthUserFromSession || null\n\n    return (\n      <AuthUserInfoContext.Provider value={{ AuthUser, token }}>\n        <ComposedComponent {...otherProps} />\n      </AuthUserInfoContext.Provider>\n    )\n  }\n\n  WithAuthUserComp.getInitialProps = async ctx => {\n    const { req, res } = ctx\n\n    // Get the AuthUserInfo object.\n    let AuthUserInfo\n    if (typeof window === 'undefined') {\n      // If server-side, get AuthUserInfo from the session in the request.\n      // Don't include server middleware in the client JS bundle. See:\n      // https://arunoda.me/blog/ssr-and-server-only-modules\n      const { addSession } = require('../middleware/cookieSession')\n      addSession(req, res)\n      AuthUserInfo = createAuthUserInfo({\n        firebaseUser: get(req, 'session.decodedToken', null),\n        token: get(req, 'session.token', null),\n      })\n    } else {\n      // If client-side, get AuthUserInfo from stored data. We store it\n      // in _document.js. See:\n      // https://github.com/zeit/next.js/issues/2252#issuecomment-353992669\n      try {\n        const jsonData = JSON.parse(\n          window.document.getElementById('__MY_AUTH_USER_INFO').textContent\n        )\n        if (jsonData) {\n          AuthUserInfo = jsonData\n        } else {\n          // Use the default (unauthed) user info if there's no data.\n          AuthUserInfo = createAuthUserInfo()\n        }\n      } catch (e) {\n        // If there's some error, use the default (unauthed) user info.\n        AuthUserInfo = createAuthUserInfo()\n      }\n    }\n\n    // Explicitly add the user to a custom prop in the getInitialProps\n    // context for ease of use in child components.\n    set(ctx, 'myCustomData.AuthUserInfo', AuthUserInfo)\n\n    // Evaluate the composed component's getInitialProps().\n    let composedInitialProps = {}\n    if (ComposedComponent.getInitialProps) {\n      composedInitialProps = await ComposedComponent.getInitialProps(ctx)\n    }\n\n    return {\n      ...composedInitialProps,\n      AuthUserInfo,\n    }\n  }\n\n  WithAuthUserComp.displayName = `WithAuthUser(${ComposedComponent.displayName})`\n\n  WithAuthUserComp.propTypes = {\n    AuthUserInfo: PropTypes.shape({\n      AuthUser: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n        emailVerified: PropTypes.bool.isRequired,\n      }),\n      token: PropTypes.string,\n    }).isRequired,\n  }\n\n  WithAuthUserComp.defaultProps = {}\n\n  return WithAuthUserComp\n}\n"]},"metadata":{},"sourceType":"module"}