{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { withRouter } from \"next/router\";\nimport styles from \"../styles/player.module.css\";\nimport { connect } from \"react-redux\";\nimport * as actionTypes from \"../redux/action\";\nimport $axios from \"../$axios\";\nimport LoadingPage from \"./LoadingPage\";\nimport { AudioAnimation, AudioStop } from \"./AudioAnimation\";\n\nclass Player extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"checkForPlayer\", () => {\n      if (window.Spotify) {\n        console.log(\"checkForPlayer\");\n        clearInterval(this.playerCheckInterval);\n        this.player = new window.Spotify.Player({\n          name: \"Soundify\",\n          getOAuthToken: cb => {\n            cb(this.state.token);\n          }\n        });\n      }\n\n      if (this.player) {\n        this.createEventHandlers();\n        this.player.connect();\n      }\n    });\n\n    _defineProperty(this, \"createEventHandlers\", () => {\n      this.player.on(\"initialization_error\", e => {\n        console.error(\"Initialization error \", e);\n        this.setState({\n          player_init_error: true\n        });\n      });\n      this.player.on(\"authentication_error\", e => console.error(\"Authentication error \", e));\n      this.player.on(\"account_error\", e => console.error(\"Account error \", e));\n      this.player.on(\"playback_error\", e => console.error(\"Playback error \", e));\n      this.player.on(\"player_state_changed\", state => {\n        if (state) {\n          // console.log(\"player state changed\", state);\n          let {\n            duration,\n            position\n          } = state; // duration = 100%\n          // position = ?%\n\n          let val = position * 100 / duration;\n          this.setState({\n            playingInfo: state,\n            playing: !state.paused,\n            positionSliderValue: val\n          }); // Music started playing, start the position interval\n\n          if (!this.props.isPlaying && !state.paused) {\n            this.positionCheckInterval = setInterval(() => {\n              this.checkChangePosition();\n            }, 1000);\n          } // Music stopped playing, clear the position interval\n\n\n          if (this.props.isPlaying && state.paused) {\n            clearInterval(this.positionCheckInterval);\n          }\n\n          if (this.props.isPlaying === state.paused) {\n            this.props.setIsPlaying(!state.paused);\n          }\n\n          if (!this.props.currentlyPlaying || this.props.currentlyPlaying !== state.track_window.current_track.name) {\n            let {\n              current_track\n            } = state.track_window;\n            this.props.setCurrentlyPlaying(current_track.name);\n          }\n        }\n      });\n      this.player.on(\"ready\", data => {\n        let {\n          device_id\n        } = data;\n        console.log(\"PLAYER CONNECTED \", device_id); // await this.setState({ deviceId: device_id });\n\n        this.setState({\n          deviceId: device_id\n        }, () => {\n          this.transferPlaybackHere();\n        });\n        let newUser = localStorage.getItem(\"newUser\"); // console.log(newUser, \"newUser\");\n\n        if (newUser) {\n          this.setState({\n            user: JSON.parse(newUser)\n          });\n        }\n\n        this.player.getVolume().then(vol => {\n          let volume = vol * 100;\n          this.setState({\n            volumeSliderValue: volume\n          });\n        });\n      });\n    });\n\n    _defineProperty(this, \"checkChangePosition\", () => {\n      this.player.getCurrentState().then(state => {\n        if (state) {\n          let {\n            duration,\n            position\n          } = state; // duration = 100%\n          // position = ?%\n\n          let val = position * 100 / duration;\n\n          if (val !== this.state.positionSliderValue) {\n            this.setState({\n              positionSliderValue: val\n            });\n          }\n\n          let positionStamp = this.milisToMinutesAndSeconds(state.position);\n          let durationStamp = this.milisToMinutesAndSeconds(state.duration);\n          this.setState({\n            positionStamp,\n            durationStamp\n          });\n        }\n      });\n    });\n\n    _defineProperty(this, \"transferPlaybackHere\", () => {\n      // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\n      // for normal users they have to go in the spotify app/website and change the device manually\n      // user type is stored in redux state => this.props.user.type\n      const {\n        deviceId\n      } = this.state;\n      fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${this.state.token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          device_ids: [deviceId],\n          play: false\n        })\n      }).then(res => {\n        // console.log(\"status\", res);\n        if (res.status === 204) {\n          $axios.get(\"https://api.spotify.com/v1/me/player\").then(() => {\n            // Transferred playback successfully, get current timestamp\n            this.checkChangePosition();\n          }).catch(err => {\n            console.log(err);\n          });\n        }\n      }).catch(e => console.error(e)); // console.log('Hello', this.props);\n      // if (this.props.user.product === 'premium') {\n      // } else {\n      //   console.log(\n      //     'Cannot transfer playback automatically because you are not a premium user.'\n      //   );\n      // }\n    });\n\n    _defineProperty(this, \"onPrevClick\", () => {\n      this.player.previousTrack();\n    });\n\n    _defineProperty(this, \"onPlayClick\", () => {\n      this.player.togglePlay();\n    });\n\n    _defineProperty(this, \"onNextClick\", () => {\n      this.player.nextTrack();\n    });\n\n    _defineProperty(this, \"milisToMinutesAndSeconds\", mil => {\n      let minutes = Math.floor(mil / 60000);\n      let seconds = (mil % 60000 / 1000).toFixed(0);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    });\n\n    this.state = {\n      deviceId: null,\n      playingInfo: null,\n      playing: false,\n      positionSliderValue: 50,\n      volumeSliderValue: 50,\n      positionStamp: \"00:00\",\n      durationStamp: \"00:00\",\n      player_init_error: false,\n      user: null,\n      noConnection: false\n    };\n    this.player = null;\n    this.playerCheckInterval = null;\n    this.positionCheckInterval = null;\n  }\n\n  componentDidMount() {\n    let count = 0;\n    let countInterval = setInterval(() => {\n      count++;\n\n      if (count > 15) {\n        this.setState({\n          noConnection: true\n        });\n        clearInterval(countInterval);\n      }\n    }, 1000);\n    this.setState({\n      token: localStorage.getItem(\"react-spotify-access-token\")\n    });\n    let newUser = localStorage.getItem(\"newUser\"); // console.log(newUser, \"newUser\");\n\n    if (newUser) {\n      this.setState({\n        user: JSON.parse(newUser)\n      });\n    } // console.log(Spotify, \"etata\");\n\n\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      console.log(\"onready\");\n      window.Spotify = Spotify;\n    }; // console.log(window.Spotify, \"etata\");\n\n\n    this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n  }\n\n  render() {\n    // console.log(this.state.playingInfo, this.state.user, \"this.state.user\");\n    if (!(this.state.playingInfo && this.state.user) && this.state.noConnection) {\n      return __jsx(\"div\", {\n        className: styles.player\n      }, __jsx(\"div\", {\n        className: styles.loadingContainer\n      }, __jsx(\"div\", {\n        className: styles.loadingText\n      }, \"This takes longer than expected, first make sure your internet connection to spotify is fine, then go to spotify and select Soundify manually in your spotify connect devices and refresh the website\")));\n    }\n\n    if (!this.state.playingInfo || !this.state.user) {\n      return __jsx(\"div\", {\n        className: styles.player\n      }, __jsx(\"div\", {\n        className: styles.loadingContainer\n      }, __jsx(\"div\", {\n        style: {\n          position: \"relative\",\n          left: \"70px\",\n          bottom: \"130px\"\n        }\n      }, __jsx(LoadingPage, null)), __jsx(\"div\", {\n        className: styles.loadingText\n      }, \"Connecting to Spotify Player...\")));\n    } // console.log(this.state.playingInfo);\n\n\n    return __jsx(\"div\", {\n      className: styles.player\n    }, __jsx(\"div\", {\n      className: styles.playerHeader\n    }, __jsx(\"div\", null, __jsx(\"img\", {\n      className: styles.avatar,\n      src: this.state.user.avatar,\n      alt: \"\"\n    }), __jsx(\"span\", {\n      className: styles.nickname\n    }, this.state.user.displayName))), __jsx(\"div\", {\n      className: styles.playerCoverContainer\n    }, this.state.playing ? __jsx(\"img\", {\n      className: styles.playerCoverAnimation,\n      src: this.state.playingInfo.track_window.current_track.album.images[0].url,\n      alt: \"\"\n    }) : __jsx(\"img\", {\n      className: styles.playerCover,\n      src: this.state.playingInfo.track_window.current_track.album.images[0].url,\n      alt: \"\"\n    })), __jsx(\"div\", {\n      className: styles.musicInfo\n    }, __jsx(\"div\", {\n      className: styles.songName\n    }, this.state.playingInfo.track_window.current_track.name), __jsx(\"div\", {\n      className: styles.artistName\n    }, this.state.playingInfo.track_window.current_track.artists[0].name)), __jsx(\"div\", {\n      className: styles.playerPanel\n    }, __jsx(\"img\", {\n      src: \"/icons/prev.svg\",\n      alt: \"\",\n      onClick: this.onPrevClick\n    }), this.state.playing ? __jsx(\"img\", {\n      src: \"/icons/playing.svg\",\n      alt: \"\",\n      style: {\n        width: \"45px\"\n      },\n      onClick: this.onPlayClick\n    }) : __jsx(\"img\", {\n      src: \"/icons/play.svg\",\n      alt: \"\",\n      style: {\n        width: \"45px\"\n      },\n      onClick: this.onPlayClick\n    }), __jsx(\"img\", {\n      src: \"/icons/next.svg\",\n      alt: \"\",\n      onClick: this.onNextClick\n    })), __jsx(\"div\", {\n      className: styles.playerNext\n    }, this.state.playing ? __jsx(AudioAnimation, null) : __jsx(AudioStop, null)), __jsx(\"div\", {\n      className: styles.line\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    recently_played: state.recently_played,\n    user: state.current_user,\n    playNow: state.play_now,\n    currentlyPlaying: state.currently_playing,\n    isPlaying: state.isPlaying\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUser: user => dispatch({\n      type: actionTypes.SET_USER,\n      user\n    }),\n    fetchRecentlyPlayed: options => dispatch(actionTypes.fetchRecentlyPlayed(options)),\n    resetPlayNow: () => dispatch({\n      type: actionTypes.RESET_PLAY_NOW\n    }),\n    setCurrentlyPlaying: song => dispatch({\n      type: actionTypes.SET_CURRENTLY_PLAYING,\n      song\n    }),\n    setIsPlaying: isPlaying => dispatch({\n      type: actionTypes.SET_IS_PLAYING,\n      isPlaying\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Player));","map":null,"metadata":{},"sourceType":"module"}