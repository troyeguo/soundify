{"ast":null,"code":"import axios from \"axios\";\nimport * as actionTypes from \"./redux/action\";\nimport { connect } from \"react-redux\"; // dotenv.config();\n// console.log(process.env.NODE_ENV, \"REACT_APP_BASE_URL\");\n\nconst $axios = axios.create({\n  timeout: 6000,\n  retry: 4,\n  retryDelay: 1000\n}); //请求拦截\n\n$axios.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  // 通过reudx的store拿到拿到全局状态树的token ，添加到请求报文，后台会根据该报文返回status\n  // 此处应根据具体业务写token\n  // const token = store.getState().user.token || localStorage.getItem('token');\n  const token = localStorage.getItem(\"react-spotify-access-token\");\n  config.headers = {\n    Authorization: `Bearer ${token}`\n  };\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  // if (err || err.response.status === 401) {\n  //   // Check if refresh token exists\n  //   const refreshToken = localStorage.getItem(\"react-spotify-refresh-token\");\n  //   if (refreshToken) {\n  //     // Send refresh token to server to acquire a new access token\n  //     axios\n  //       .post(\"http://localhost:3000/refresh\", {\n  //         data: JSON.stringify({\n  //           refresh_token: refreshToken,\n  //         }),\n  //       })\n  //       .then((res) => {\n  //         console.log(\"Refresh token response -\", res.data);\n  //         axios\n  //           .get(\"https://api.spotify.com/v1/me\", {\n  //             headers: {\n  //               Authorization: `Bearer ${res.data.access_token}`,\n  //             },\n  //           })\n  //           .then(({ data }) => {\n  //             localStorage.setItem(\n  //               \"react-spotify-access-token\",\n  //               res.data.access_token\n  //             );\n  //             let newUser = {\n  //               access_token: res.data.access_token,\n  //               displayName: data.display_name,\n  //               email: data.email,\n  //               display_name: data.display_name,\n  //               type: data.type,\n  //               country: data.country,\n  //               product: data.product,\n  //               avatar: data.images[0].url,\n  //             };\n  //             localStorage.setItem(\"newUser\".JSON.stringify(newUser));\n  //           });\n  //       })\n  //       .catch((e) => {\n  //         console.log(\"Refresh token error -\", e);\n  //       })\n  //       .finally(() => {\n  //         this.setState({ loading: false });\n  //       });\n  //   } else {\n  //     // Refresh token doesn't exist, the user is shown a 'login with Spotify button'\n  //     this.setState({ loading: false });\n  //   }\n  // }\n  message.error(error);\n  return Promise.reject(error);\n}); // 添加响应拦截器\n\n$axios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response) {\n    console.log(error.response, \"error\");\n    const originalRequest = error.config;\n\n    if (error.response.status === 401) {\n      console.log(\"Error happened\");\n      console.log(error);\n      let refresh_token = localStorage.getItem(\"react-spotify-refresh-token\");\n      console.log(refresh_token); // return window.location.reload();\n\n      return axios.post(\"http://localhost:3000/refresh\", {\n        refresh_token: localStorage.getItem(\"react-spotify-refresh-token\")\n      }).then(res => {\n        console.log(res, \"res\");\n\n        if (res.status === 200) {\n          // 1) put token to LocalStorage\n          localStorage.setItem(\"react-spotify-access-token\", res.data.access_token); // console.log(\"New token\", res.data);\n          // console.log(originalRequest);\n          // // 2) Change Authorization header\n          // axios.defaults.headers.common['Authorization'] =\n          //   'Bearer ' + localStorageService.getAccessToken();\n          // 3) return originalRequest object with Axios.\n\n          return axios(originalRequest);\n        }\n      }).catch(error => {\n        console.log(error, \"error\");\n      });\n    }\n  }\n\n  return Promise.reject(error);\n});\nexport default $axios;","map":{"version":3,"sources":["D:/1-Project/soundify-web/$axios.js"],"names":["axios","actionTypes","connect","$axios","create","timeout","retry","retryDelay","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","message","Promise","reject","response","console","log","originalRequest","status","refresh_token","post","then","res","setItem","data","access_token","catch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,gBAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;AACA;;AACA,MAAMC,MAAM,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE,IADiB;AAE1BC,EAAAA,KAAK,EAAE,CAFmB;AAG1BC,EAAAA,UAAU,EAAE;AAHc,CAAb,CAAf,C,CAMA;;AACAJ,MAAM,CAACK,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,CACE,UAAUC,MAAV,EAAkB;AAChB;AACA;AACA;AACA;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,4BAArB,CAAd;AACAH,EAAAA,MAAM,CAACI,OAAP,GAAiB;AAAEC,IAAAA,aAAa,EAAG,UAASJ,KAAM;AAAjC,GAAjB;AAEA,SAAOD,MAAP;AACD,CAVH,EAWE,UAAUM,KAAV,EAAiB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,SAAOE,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,CAhEH,E,CAmEA;;AACAd,MAAM,CAACK,YAAP,CAAoBa,QAApB,CAA6BX,GAA7B,CACE,UAAUW,QAAV,EAAoB;AAClB,SAAOA,QAAP;AACD,CAHH,EAIE,UAAUJ,KAAV,EAAiB;AACf,MAAIA,KAAK,CAACI,QAAV,EAAoB;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACI,QAAlB,EAA4B,OAA5B;AACA,UAAMG,eAAe,GAAGP,KAAK,CAACN,MAA9B;;AACA,QAAIM,KAAK,CAACI,QAAN,CAAeI,MAAf,KAA0B,GAA9B,EAAmC;AACjCH,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA,UAAIS,aAAa,GAAGb,YAAY,CAACC,OAAb,CAAqB,6BAArB,CAApB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYG,aAAZ,EAJiC,CAKjC;;AACA,aAAO1B,KAAK,CACT2B,IADI,CACC,+BADD,EACkC;AACrCD,QAAAA,aAAa,EAAEb,YAAY,CAACC,OAAb,CAAqB,6BAArB;AADsB,OADlC,EAIJc,IAJI,CAIEC,GAAD,IAAS;AACbP,QAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ,EAAiB,KAAjB;;AACA,YAAIA,GAAG,CAACJ,MAAJ,KAAe,GAAnB,EAAwB;AACtB;AACAZ,UAAAA,YAAY,CAACiB,OAAb,CACE,4BADF,EAEED,GAAG,CAACE,IAAJ,CAASC,YAFX,EAFsB,CAMtB;AACA;AAEA;AACA;AACA;AAEA;;AACA,iBAAOhC,KAAK,CAACwB,eAAD,CAAZ;AACD;AACF,OAtBI,EAuBJS,KAvBI,CAuBGhB,KAAD,IAAW;AAChBK,QAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAAmB,OAAnB;AACD,OAzBI,CAAP;AA0BD;AACF;;AACD,SAAOE,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,CA3CH;AA8CA,eAAed,MAAf","sourcesContent":["import axios from \"axios\";\r\nimport * as actionTypes from \"./redux/action\";\r\nimport { connect } from \"react-redux\";\r\n// dotenv.config();\r\n// console.log(process.env.NODE_ENV, \"REACT_APP_BASE_URL\");\r\nconst $axios = axios.create({\r\n  timeout: 6000,\r\n  retry: 4,\r\n  retryDelay: 1000,\r\n});\r\n\r\n//请求拦截\r\n$axios.interceptors.request.use(\r\n  function (config) {\r\n    // 在发送请求之前做些什么\r\n    // 通过reudx的store拿到拿到全局状态树的token ，添加到请求报文，后台会根据该报文返回status\r\n    // 此处应根据具体业务写token\r\n    // const token = store.getState().user.token || localStorage.getItem('token');\r\n    const token = localStorage.getItem(\"react-spotify-access-token\");\r\n    config.headers = { Authorization: `Bearer ${token}` };\r\n\r\n    return config;\r\n  },\r\n  function (error) {\r\n    // 对请求错误做些什么\r\n    // if (err || err.response.status === 401) {\r\n    //   // Check if refresh token exists\r\n    //   const refreshToken = localStorage.getItem(\"react-spotify-refresh-token\");\r\n    //   if (refreshToken) {\r\n    //     // Send refresh token to server to acquire a new access token\r\n    //     axios\r\n    //       .post(\"http://localhost:3000/refresh\", {\r\n    //         data: JSON.stringify({\r\n    //           refresh_token: refreshToken,\r\n    //         }),\r\n    //       })\r\n    //       .then((res) => {\r\n    //         console.log(\"Refresh token response -\", res.data);\r\n    //         axios\r\n    //           .get(\"https://api.spotify.com/v1/me\", {\r\n    //             headers: {\r\n    //               Authorization: `Bearer ${res.data.access_token}`,\r\n    //             },\r\n    //           })\r\n    //           .then(({ data }) => {\r\n    //             localStorage.setItem(\r\n    //               \"react-spotify-access-token\",\r\n    //               res.data.access_token\r\n    //             );\r\n\r\n    //             let newUser = {\r\n    //               access_token: res.data.access_token,\r\n    //               displayName: data.display_name,\r\n    //               email: data.email,\r\n    //               display_name: data.display_name,\r\n    //               type: data.type,\r\n    //               country: data.country,\r\n    //               product: data.product,\r\n    //               avatar: data.images[0].url,\r\n    //             };\r\n    //             localStorage.setItem(\"newUser\".JSON.stringify(newUser));\r\n    //           });\r\n    //       })\r\n    //       .catch((e) => {\r\n    //         console.log(\"Refresh token error -\", e);\r\n    //       })\r\n    //       .finally(() => {\r\n    //         this.setState({ loading: false });\r\n    //       });\r\n    //   } else {\r\n    //     // Refresh token doesn't exist, the user is shown a 'login with Spotify button'\r\n    //     this.setState({ loading: false });\r\n    //   }\r\n    // }\r\n    message.error(error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 添加响应拦截器\r\n$axios.interceptors.response.use(\r\n  function (response) {\r\n    return response;\r\n  },\r\n  function (error) {\r\n    if (error.response) {\r\n      console.log(error.response, \"error\");\r\n      const originalRequest = error.config;\r\n      if (error.response.status === 401) {\r\n        console.log(\"Error happened\");\r\n        console.log(error);\r\n        let refresh_token = localStorage.getItem(\"react-spotify-refresh-token\");\r\n        console.log(refresh_token);\r\n        // return window.location.reload();\r\n        return axios\r\n          .post(\"http://localhost:3000/refresh\", {\r\n            refresh_token: localStorage.getItem(\"react-spotify-refresh-token\"),\r\n          })\r\n          .then((res) => {\r\n            console.log(res, \"res\");\r\n            if (res.status === 200) {\r\n              // 1) put token to LocalStorage\r\n              localStorage.setItem(\r\n                \"react-spotify-access-token\",\r\n                res.data.access_token\r\n              );\r\n              // console.log(\"New token\", res.data);\r\n              // console.log(originalRequest);\r\n\r\n              // // 2) Change Authorization header\r\n              // axios.defaults.headers.common['Authorization'] =\r\n              //   'Bearer ' + localStorageService.getAccessToken();\r\n\r\n              // 3) return originalRequest object with Axios.\r\n              return axios(originalRequest);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error, \"error\");\r\n          });\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default $axios;\r\n"]},"metadata":{},"sourceType":"module"}